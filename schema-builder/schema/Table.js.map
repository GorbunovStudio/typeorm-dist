{"version":3,"sources":["../../src/schema-builder/schema/Table.ts"],"names":[],"mappings":"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","file":"Table.js","sourcesContent":["import {TableColumn} from \"./TableColumn\";\r\nimport {TableIndex} from \"./TableIndex\";\r\nimport {TableForeignKey} from \"./TableForeignKey\";\r\nimport {TablePrimaryKey} from \"./TablePrimaryKey\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {Driver} from \"../../driver/Driver\";\r\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\r\nimport {AbstractSqliteDriver} from \"../../driver/sqlite-abstract/AbstractSqliteDriver\";\r\nimport {MysqlDriver} from \"../../driver/mysql/MysqlDriver\";\r\nimport {OracleDriver} from \"../../driver/oracle/OracleDriver\";\r\n\r\n/**\r\n * Table in the database represented in this class.\r\n */\r\nexport class Table {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Table name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Table columns.\r\n     */\r\n    columns: TableColumn[] = [];\r\n\r\n    /**\r\n     * Table indices.\r\n     */\r\n    indices: TableIndex[] = [];\r\n\r\n    /**\r\n     * Table foreign keys.\r\n     */\r\n    foreignKeys: TableForeignKey[] = [];\r\n\r\n    /**\r\n     * Table primary keys.\r\n     */\r\n    primaryKeys: TablePrimaryKey[] = [];\r\n\r\n    /**\r\n     * Indicates if table was just created.\r\n     * This is needed, for example to check if we need to skip primary keys creation\r\n     * for new tables.\r\n     */\r\n    justCreated: boolean = false;\r\n\r\n    /**\r\n     * Table engine.\r\n     */\r\n    engine?: string;\r\n\r\n    /**\r\n     * Database name.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Schema name. Used in Postgres and Sql Server.\r\n     */\r\n    schema?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(name: string, columns?: TableColumn[]|ObjectLiteral[], justCreated?: boolean, engine?: string, database?: string, schema?: string) {\r\n        this.name = name;\r\n        if (columns) {\r\n            this.columns = (columns as any[]).map(column => { // as any[] is a temporary fix (some weird compiler error)\r\n                if (column instanceof TableColumn) {\r\n                    return column;\r\n                } else {\r\n                    return new TableColumn(column);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (justCreated !== undefined)\r\n            this.justCreated = justCreated;\r\n\r\n        this.engine = engine;\r\n        this.database = database;\r\n        this.schema = schema;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets only those primary keys that does not\r\n     */\r\n    get primaryKeysWithoutGenerated(): TablePrimaryKey[] {\r\n        const generatedColumn = this.columns.find(column => column.isGenerated);\r\n        if (!generatedColumn)\r\n            return this.primaryKeys;\r\n\r\n        return this.primaryKeys.filter(primaryKey => {\r\n            return primaryKey.columnName !== generatedColumn.name;\r\n        });\r\n    }\r\n\r\n    get hasGeneratedColumn(): boolean {\r\n        return !!this.columns.find(column => column.isGenerated);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table to a new table with all properties cloned.\r\n     */\r\n    clone(): Table {\r\n        const cloned = new Table(this.name);\r\n        cloned.columns = this.columns.map(column => column.clone());\r\n        cloned.indices = this.indices.map(index => index.clone());\r\n        cloned.foreignKeys = this.foreignKeys.map(key => key.clone());\r\n        cloned.primaryKeys = this.primaryKeys.map(key => key.clone());\r\n        cloned.engine = this.engine;\r\n        cloned.database = this.database;\r\n        cloned.schema = this.schema;\r\n        return cloned;\r\n    }\r\n\r\n    /**\r\n     * Adds columns.\r\n     */\r\n    addColumns(columns: TableColumn[]) {\r\n        this.columns = this.columns.concat(columns);\r\n    }\r\n\r\n    /**\r\n     * Replaces given column.\r\n     */\r\n    replaceColumn(oldColumn: TableColumn, newColumn: TableColumn) {\r\n        this.columns[this.columns.indexOf(oldColumn)] = newColumn;\r\n    }\r\n\r\n    /**\r\n     * Removes a columns from this table.\r\n     */\r\n    removeColumn(columnToRemove: TableColumn) {\r\n        const foundColumn = this.columns.find(column => column.name === columnToRemove.name);\r\n        if (foundColumn)\r\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\r\n    }\r\n\r\n    /**\r\n     * Remove all columns from this table.\r\n     */\r\n    removeColumns(columns: TableColumn[]) {\r\n        columns.forEach(column => this.removeColumn(column));\r\n    }\r\n\r\n    /**\r\n     * Adds all given primary keys.\r\n     */\r\n    addPrimaryKeys(addedKeys: TablePrimaryKey[]) {\r\n        addedKeys.forEach(key => {\r\n            this.primaryKeys.push(key);\r\n            const index = this.columns.findIndex(column => column.name === key.columnName);\r\n            if (index !== -1) {\r\n                this.columns[index].isPrimary = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all given primary keys.\r\n     */\r\n    removePrimaryKeys(droppedKeys: TablePrimaryKey[]) {\r\n        droppedKeys.forEach(key => {\r\n            this.primaryKeys.splice(this.primaryKeys.indexOf(key), 1);\r\n            const index = this.columns.findIndex(column => column.name === key.columnName);\r\n            if (index !== -1) {\r\n                this.columns[index].isPrimary = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes primary keys of the given columns.\r\n     */\r\n    removePrimaryKeysOfColumns(columns: TableColumn[]) {\r\n        this.primaryKeys = this.primaryKeys.filter(primaryKey => {\r\n            return !columns.find(column => column.name === primaryKey.columnName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds foreign keys.\r\n     */\r\n    addForeignKeys(foreignKeys: TableForeignKey[]) {\r\n        this.foreignKeys = this.foreignKeys.concat(foreignKeys);\r\n    }\r\n\r\n    /**\r\n     * Removes foreign key from this table.\r\n     */\r\n    removeForeignKey(removedForeignKey: TableForeignKey) {\r\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name); // this must be by name\r\n        if (fk)\r\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all foreign keys from this table.\r\n     */\r\n    removeForeignKeys(dbForeignKeys: TableForeignKey[]) {\r\n        dbForeignKeys.forEach(foreignKey => this.removeForeignKey(foreignKey));\r\n    }\r\n\r\n    /**\r\n     * Removes indices from this table.\r\n     */\r\n    removeIndex(tableIndex: TableIndex) {\r\n        const index = this.indices.find(index => index.name === tableIndex.name);\r\n        if (index)\r\n            this.indices.splice(this.indices.indexOf(index), 1);\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(driver: Driver, columnMetadatas: ColumnMetadata[]): TableColumn[] {\r\n        return this.columns.filter(tableColumn => {\r\n            const columnMetadata = columnMetadatas.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\r\n            if (!columnMetadata)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(tableColumn.name, \"!==\", columnMetadata.databaseName); //  ||\r\n            // console.log(tableColumn.type, \"!==\", driver.normalizeType(columnMetadata)); // ||\r\n            // console.log(tableColumn.comment, \"!==\", columnMetadata.comment); //  ||\r\n            // console.log(this.compareDefaultValues(driver.normalizeDefault(columnMetadata), tableColumn.default)); // || // we included check for generated here, because generated columns already can have default values\r\n            // console.log(tableColumn.isNullable, \"!==\", columnMetadata.isNullable); //  ||\r\n            // console.log(tableColumn.isUnique, \"!==\", columnMetadata.isUnique); //  ||\r\n            // console.log(tableColumn.isGenerated, \"!==\", columnMetadata.isGenerated);\r\n\r\n            const skipGenerationCheck = columnMetadata.generationStrategy === \"uuid\" && (driver instanceof AbstractSqliteDriver || driver instanceof MysqlDriver || driver instanceof OracleDriver);\r\n            return  tableColumn.name !== columnMetadata.databaseName ||\r\n                    tableColumn.type !== driver.normalizeType(columnMetadata) ||\r\n                    tableColumn.comment !== columnMetadata.comment ||\r\n                    (!tableColumn.isGenerated && !this.compareDefaultValues(driver.normalizeDefault(columnMetadata), tableColumn.default)) || // we included check for generated here, because generated columns already can have default values\r\n                    tableColumn.isNullable !== columnMetadata.isNullable ||\r\n                    tableColumn.isUnique !== driver.normalizeIsUnique(columnMetadata) ||\r\n                    // tableColumn.isPrimary !== columnMetadata.isPrimary ||\r\n                    (skipGenerationCheck === false && tableColumn.isGenerated !== columnMetadata.isGenerated) ||\r\n                    !this.compareColumnLengths(driver, tableColumn, columnMetadata);\r\n        });\r\n    }\r\n\r\n    findColumnByName(name: string): TableColumn|undefined {\r\n        return this.columns.find(column => column.name === name);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Compare column lengths only if the datatype supports it.\r\n     */\r\n\r\n    private compareColumnLengths(driver: Driver, tableColumn: TableColumn, columnMetadata: ColumnMetadata): boolean {\r\n\r\n        const normalizedColumn = driver.normalizeType(columnMetadata) as ColumnType;\r\n        if (driver.withLengthColumnTypes.indexOf(normalizedColumn) !== -1) {\r\n            let metadataLength = driver.getColumnLength(columnMetadata);\r\n\r\n            // if we found something to compare with then do it, else skip it\r\n            // use use case insensitive comparison to catch \"MAX\" vs \"Max\" case\r\n            if (metadataLength)\r\n                return tableColumn.length.toLowerCase() === metadataLength.toLowerCase();\r\n        }\r\n\r\n        return true;\r\n\r\n    }    \r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\r\n     */\r\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\r\n\r\n        // if (typeof columnMetadataValue === \"number\")\r\n        //     return columnMetadataValue === parseInt(databaseValue);\r\n        // if (typeof columnMetadataValue === \"boolean\")\r\n        //     return columnMetadataValue === (!!databaseValue || databaseValue === \"false\");\r\n        // if (typeof columnMetadataValue === \"function\")\r\n        // if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\")\r\n        //     return columnMetadataValue.toLowerCase() === databaseValue.toLowerCase();\r\n\r\n\r\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\r\n\r\n            // we need to cut out \"((x))\" where x number generated by mssql\r\n            columnMetadataValue = columnMetadataValue.replace(/\\(\\([0-9.]*\\)\\)$/g, \"$1\");\r\n            databaseValue = databaseValue.replace(/\\(\\(([0-9.]*?)\\)\\)$/g, \"$1\");\r\n\r\n            // we need to cut out \"(\" because in mssql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^\\(|\\)$/g, \"\");\r\n            databaseValue = databaseValue.replace(/^\\(|\\)$/g, \"\");\r\n\r\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\r\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\r\n        }\r\n\r\n        // console.log(\"columnMetadataValue\", columnMetadataValue);\r\n        // console.log(\"databaseValue\", databaseValue);\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table from a given entity metadata.\r\n     *\r\n     * todo: need deeper implementation\r\n     */\r\n    static create(entityMetadata: EntityMetadata, driver: Driver) {\r\n        const table = new Table(entityMetadata.tableName);\r\n        table.engine = entityMetadata.engine;\r\n        table.database = entityMetadata.database;\r\n        table.schema = entityMetadata.schema;\r\n        entityMetadata.columns.forEach(column => {\r\n            const tableColumn = TableColumn.create(column, \r\n                driver.normalizeType(column), \r\n                driver.normalizeDefault(column),\r\n                driver.getColumnLength(column)); \r\n            table.columns.push(tableColumn);\r\n        });\r\n\r\n        return table;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}
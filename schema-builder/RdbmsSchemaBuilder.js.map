{"version":3,"sources":["../../src/schema-builder/RdbmsSchemaBuilder.ts"],"names":[],"mappings":"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","file":"RdbmsSchemaBuilder.js","sourcesContent":["import {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {Table} from \"./schema/Table\";\r\nimport {TableColumn} from \"./schema/TableColumn\";\r\nimport {TableForeignKey} from \"./schema/TableForeignKey\";\r\nimport {TableIndex} from \"./schema/TableIndex\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {TablePrimaryKey} from \"./schema/TablePrimaryKey\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {SchemaBuilder} from \"./SchemaBuilder\";\r\n\r\n/**\r\n * Creates complete tables schemas in the database based on the entity metadatas.\r\n *\r\n * Steps how schema is being built:\r\n * 1. load list of all tables with complete column and keys information from the db\r\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\r\n * 3. create new tables that does not exist in the db, but exist in the metadata\r\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\r\n * 5. add columns from metadata which does not exist in the table\r\n * 6. update all exist columns which metadata has changed\r\n * 7. update primary keys - update old and create new primary key from changed columns\r\n * 8. create foreign keys which does not exist in the table yet\r\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\r\n */\r\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to execute schema creation queries in a single connection.\r\n     */\r\n    protected queryRunner: QueryRunner;\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    protected tables: Table[];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates complete schemas for the given entity metadatas.\r\n     */\r\n    async build(): Promise<void> {\r\n        this.queryRunner = await this.connection.createQueryRunner(\"master\");\r\n        await this.createNewDatabases();\r\n        await this.queryRunner.startTransaction();\r\n        try {\r\n            this.tables = await this.loadTableSchemas();\r\n            await this.executeSchemaSyncOperationsInProperOrder();\r\n\r\n            // if cache is enabled then perform cache-synchronization as well\r\n            if (this.connection.queryResultCache)\r\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\r\n\r\n            await this.queryRunner.commitTransaction();\r\n\r\n        } catch (error) {\r\n\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.queryRunner.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns sql queries to be executed by schema builder.\r\n     */\r\n    async log(): Promise<(string|{ up: string, down: string })[]> {\r\n        this.queryRunner = await this.connection.createQueryRunner(\"master\");\r\n        try {\r\n            await this.createNewDatabases();\r\n            this.tables = await this.loadTableSchemas();\r\n            this.queryRunner.enableSqlMemory();\r\n            await this.executeSchemaSyncOperationsInProperOrder();\r\n\r\n            // if cache is enabled then perform cache-synchronization as well\r\n            if (this.connection.queryResultCache) // todo: check this functionality\r\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\r\n\r\n            return this.queryRunner.getMemorySql();\r\n\r\n        } finally {\r\n            // its important to disable this mode despite the fact we are release query builder\r\n            // because there exist drivers which reuse same query runner. Also its important to disable\r\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\r\n            this.queryRunner.disableSqlMemory();\r\n            await this.queryRunner.release();\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all tables from the database.\r\n     */\r\n    protected loadTableSchemas(): Promise<Table[]> {\r\n        const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\r\n        return this.queryRunner.getTables(tablePaths);\r\n    }\r\n\r\n    /**\r\n     * Returns only entities that should be synced in the database.\r\n     */\r\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\r\n        return this.connection.entityMetadatas.filter(metadata => !metadata.skipSync && metadata.tableType !== \"single-table-child\");\r\n    }\r\n\r\n    /**\r\n     * Creates new databases if they are not exists.\r\n     */\r\n    protected async createNewDatabases(): Promise<void> {\r\n        const databases: string[] = [];\r\n        this.connection.entityMetadatas.forEach(metadata => {\r\n            if (metadata.database && databases.indexOf(metadata.database) === -1)\r\n                databases.push(metadata.database);\r\n        });\r\n\r\n        await Promise.all(databases.map(database => this.queryRunner.createDatabase(database!)));\r\n    }\r\n\r\n    /**\r\n     * Executes schema sync operations in a proper order.\r\n     * Order of operations matter here.\r\n     */\r\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\r\n        const schemaPaths: string[] = [];\r\n        this.connection.entityMetadatas\r\n            .filter(entityMetadata => !!entityMetadata.schemaPath)\r\n            .forEach(entityMetadata => {\r\n                const existSchemaPath = schemaPaths.find(path => path === entityMetadata.schemaPath);\r\n                if (!existSchemaPath)\r\n                    schemaPaths.push(entityMetadata.schemaPath!);\r\n            });\r\n        await this.queryRunner.createSchema(schemaPaths);\r\n\r\n        await this.dropOldForeignKeys();\r\n        // await this.dropOldPrimaryKeys(); // todo: need to drop primary column because column updates are not possible\r\n        await this.createNewTables();\r\n        await this.dropRemovedColumns();\r\n        await this.addNewColumns();\r\n        await this.updateExistColumns();\r\n        await this.updatePrimaryKeys();\r\n        await this.createIndices(); // we need to create indices before foreign keys because foreign keys rely on unique indices\r\n        await this.createForeignKeys();\r\n    }\r\n\r\n    /**\r\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\r\n     */\r\n    protected async dropOldForeignKeys(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table)\r\n                return;\r\n\r\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\r\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\r\n                return !metadata.foreignKeys.find(metadataForeignKey => metadataForeignKey.name === tableForeignKey.name);\r\n            });\r\n            if (tableForeignKeysToDrop.length === 0)\r\n                return;\r\n\r\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\r\n\r\n            // remove foreign keys from the table\r\n            table.removeForeignKeys(tableForeignKeysToDrop);\r\n\r\n            // drop foreign keys from the database\r\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates tables that do not exist in the database yet.\r\n     * New tables are created without foreign and primary keys.\r\n     * Primary key only can be created in conclusion with auto generated column.\r\n     */\r\n    protected async createNewTables(): Promise<void> {\r\n        await PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            // check if table does not exist yet\r\n            const existTableSchema = this.tables.find(table => {\r\n                if (table.name !== metadata.tableName)\r\n                    return false;\r\n\r\n                if (metadata.schema && table.schema !== metadata.schema)\r\n                    return false;\r\n\r\n                if (metadata.database && table.database !== metadata.database)\r\n                    return false;\r\n\r\n                return true;\r\n            });\r\n            if (existTableSchema)\r\n                return;\r\n\r\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tableName}`);\r\n\r\n            // create a new table and sync it in the database\r\n            const table = new Table(metadata.tableName, this.metadataColumnsToTableColumns(metadata.columns), true, metadata.engine, metadata.database, metadata.schema);\r\n            this.tables.push(table);\r\n            await this.queryRunner.createTable(table);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\r\n     * We drop their keys too, since it should be safe.\r\n     */\r\n    protected dropRemovedColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table) return;\r\n\r\n            // find columns that exist in the database but does not exist in the metadata\r\n            const droppedTableColumns = table.columns.filter(tableColumn => {\r\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\r\n            });\r\n            if (droppedTableColumns.length === 0)\r\n                return;\r\n\r\n            // drop all foreign keys that has column to be removed in its columns\r\n            await Promise.all(droppedTableColumns.map(droppedTableColumn => {\r\n                return this.dropColumnReferencedForeignKeys(metadata.tableName, droppedTableColumn.name);\r\n            }));\r\n\r\n            // drop all indices that point to this column\r\n            await Promise.all(droppedTableColumns.map(droppedTableColumn => {\r\n                return this.dropColumnReferencedIndices(metadata.tableName, droppedTableColumn.name);\r\n            }));\r\n\r\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\r\n\r\n            // remove columns from the table and primary keys of it if its used in the primary keys\r\n            table.removeColumns(droppedTableColumns);\r\n            table.removePrimaryKeysOfColumns(droppedTableColumns);\r\n\r\n            // drop columns from the database\r\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds columns from metadata which does not exist in the table.\r\n     * Columns are created without keys.\r\n     */\r\n    protected addNewColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table)\r\n                return;\r\n\r\n            // find which columns are new\r\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\r\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\r\n            });\r\n            if (newColumnMetadatas.length === 0)\r\n                return;\r\n\r\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\r\n\r\n            // create columns in the database\r\n            const newTableColumns = this.metadataColumnsToTableColumns(newColumnMetadatas);\r\n            await this.queryRunner.addColumns(table, newTableColumns);\r\n            table.addColumns(newTableColumns);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update all exist columns which metadata has changed.\r\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\r\n     */\r\n    protected updateExistColumns() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table)\r\n                return;\r\n\r\n            const updatedTableColumns = table.findChangedColumns(this.connection.driver, metadata.columns);\r\n            if (updatedTableColumns.length === 0)\r\n                return;\r\n\r\n            this.connection.logger.logSchemaBuild(`columns changed in ${table.name}. updating: ` + updatedTableColumns.map(column => column.name).join(\", \"));\r\n\r\n            // drop all foreign keys that point to this column\r\n            const dropRelatedForeignKeysPromises = updatedTableColumns\r\n                .filter(changedTableColumn => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedTableColumn.name))\r\n                .map(changedTableColumn => this.dropColumnReferencedForeignKeys(metadata.tableName, changedTableColumn.name));\r\n\r\n            // wait until all related foreign keys are dropped\r\n            await Promise.all(dropRelatedForeignKeysPromises);\r\n\r\n            // drop all indices that point to this column\r\n            const dropRelatedIndicesPromises = updatedTableColumns\r\n                .filter(changedTableColumn => !!metadata.columns.find(columnMetadata => columnMetadata.databaseName === changedTableColumn.name))\r\n                .map(changedTableColumn => this.dropColumnReferencedIndices(metadata.tableName, changedTableColumn.name));\r\n\r\n            // wait until all related indices are dropped\r\n            await Promise.all(dropRelatedIndicesPromises);\r\n\r\n            // generate a map of new/old columns\r\n            const newAndOldTableColumns = updatedTableColumns.map(changedTableColumn => {\r\n                const columnMetadata = metadata.columns.find(column => column.databaseName === changedTableColumn.name);\r\n                const newTableColumn = TableColumn.create(columnMetadata!, \r\n                    this.connection.driver.normalizeType(columnMetadata!), \r\n                    this.connection.driver.normalizeDefault(columnMetadata!),\r\n                    this.connection.driver.getColumnLength(columnMetadata!));\r\n                table.replaceColumn(changedTableColumn, newTableColumn);\r\n\r\n                return {\r\n                    newColumn: newTableColumn,\r\n                    oldColumn: changedTableColumn\r\n                };\r\n            });\r\n\r\n            return this.queryRunner.changeColumns(table, newAndOldTableColumns);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates primary keys which does not exist in the table yet.\r\n     */\r\n    protected updatePrimaryKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName && !table.justCreated);\r\n            if (!table)\r\n                return;\r\n\r\n            const metadataPrimaryColumns = metadata.columns.filter(column => column.isPrimary);\r\n            const addedKeys = metadataPrimaryColumns\r\n                .filter(primaryKey => {\r\n                    return !table.primaryKeys.find(dbPrimaryKey => dbPrimaryKey.columnName === primaryKey.databaseName);\r\n                })\r\n                .map(primaryKey => new TablePrimaryKey(\"\", primaryKey.databaseName));\r\n\r\n            const droppedKeys = table.primaryKeys.filter(primaryKeySchema => {\r\n                return !metadataPrimaryColumns.find(primaryKeyMetadata => primaryKeyMetadata.databaseName === primaryKeySchema.columnName);\r\n            });\r\n\r\n            if (addedKeys.length === 0 && droppedKeys.length === 0)\r\n                return;\r\n\r\n            this.connection.logger.logSchemaBuild(`primary keys of ${table.name} has changed: dropped - ${droppedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}; added - ${addedKeys.map(key => key.columnName).join(\", \") || \"nothing\"}`);\r\n            table.addPrimaryKeys(addedKeys);\r\n            table.removePrimaryKeys(droppedKeys);\r\n            await this.queryRunner.updatePrimaryKeys(table);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates foreign keys which does not exist in the table yet.\r\n     */\r\n    protected createForeignKeys() {\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table)\r\n                return;\r\n\r\n            const newKeys = metadata.foreignKeys.filter(foreignKey => {\r\n                return !table.foreignKeys.find(dbForeignKey => dbForeignKey.name === foreignKey.name);\r\n            });\r\n            if (newKeys.length === 0)\r\n                return;\r\n\r\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\r\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")}`);\r\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\r\n            table.addForeignKeys(dbForeignKeys);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates indices which are missing in db yet, and drops indices which exist in the db,\r\n     * but does not exist in the metadata anymore.\r\n     */\r\n    protected createIndices() {\r\n        // return Promise.all(this.connection.entityMetadatas.map(metadata => this.createIndices(metadata.table, metadata.indices)));\r\n        return PromiseUtils.runInSequence(this.entityToSyncMetadatas, async metadata => {\r\n            const table = this.tables.find(table => table.name === metadata.tableName);\r\n            if (!table)\r\n                return;\r\n\r\n            // drop all indices that exist in the table, but does not exist in the given composite indices\r\n            const dropQueries = table.indices\r\n                .filter(tableIndex => {\r\n                    const metadataIndex = metadata.indices.find(indexMetadata => indexMetadata.name === tableIndex.name);\r\n                    if (!metadataIndex)\r\n                        return true;\r\n                    if (metadataIndex.isUnique !== tableIndex.isUnique)\r\n                        return true;\r\n                    if (metadataIndex.columns.length !== tableIndex.columnNames.length)\r\n                        return true;\r\n                    if (metadataIndex.columns.findIndex((col, i) => col.databaseName !== tableIndex.columnNames[i]) !== -1)\r\n                        return true;\r\n                    \r\n                    return false;\r\n                })\r\n                .map(async tableIndex => {\r\n                    this.connection.logger.logSchemaBuild(`dropping an index: ${tableIndex.name}`);\r\n                    table.removeIndex(tableIndex);\r\n                    await this.queryRunner.dropIndex(metadata.tablePath, tableIndex.name);\r\n                });\r\n\r\n            await Promise.all(dropQueries);\r\n\r\n            // then create table indices for all composite indices we have\r\n            const addQueries = metadata.indices\r\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name))\r\n                .map(async indexMetadata => {\r\n                    const tableIndex = TableIndex.create(indexMetadata);\r\n                    table.indices.push(tableIndex);\r\n                    this.connection.logger.logSchemaBuild(`adding new index: ${tableIndex.name}`);\r\n                    await this.queryRunner.createIndex(table, tableIndex);\r\n                });\r\n\r\n            await Promise.all(addQueries);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Drops all indices where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedIndices(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const table = this.tables.find(table => table.name === tableName);\r\n        if (!table)\r\n            return;\r\n\r\n        // find depend indices to drop them\r\n        const dependIndicesInTable = table.indices.filter(tableIndex => {\r\n            return tableIndex.tableName === tableName && !!tableIndex.columnNames.find(columnDatabaseName => columnDatabaseName === columnName);\r\n        });\r\n        if (dependIndicesInTable.length === 0)\r\n            return;\r\n\r\n        this.connection.logger.logSchemaBuild(`dropping related indices of ${tableName}#${columnName}: ${dependIndicesInTable.map(index => index.name).join(\", \")}`);\r\n\r\n        const dropPromises = dependIndicesInTable.map(index => {\r\n            table.removeIndex(index);\r\n            return this.queryRunner.dropIndex(table, index.name);\r\n        });\r\n\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Drops all foreign keys where given column of the given table is being used.\r\n     */\r\n    protected async dropColumnReferencedForeignKeys(tableName: string, columnName: string): Promise<void> {\r\n\r\n        const allForeignKeyMetadatas = this.connection.entityMetadatas.reduce(\r\n            (all, metadata) => all.concat(metadata.foreignKeys),\r\n            [] as ForeignKeyMetadata[]\r\n        );\r\n\r\n        const table = this.tables.find(table => table.name === tableName);\r\n        if (!table)\r\n            return;\r\n\r\n        // find depend foreign keys to drop them\r\n        const dependForeignKeys = allForeignKeyMetadatas.filter(foreignKey => {\r\n            if (foreignKey.tableName === tableName) {\r\n                return !!foreignKey.columns.find(fkColumn => {\r\n                    return fkColumn.databaseName === columnName;\r\n                });\r\n            } else if (foreignKey.referencedTableName === tableName) {\r\n                return !!foreignKey.referencedColumns.find(fkColumn => {\r\n                    return fkColumn.databaseName === columnName;\r\n                });\r\n            }\r\n            return false;\r\n        });\r\n        if (!dependForeignKeys.length)\r\n            return;\r\n\r\n        const dependForeignKeyInTable = dependForeignKeys.filter(fk => {\r\n            return !!table.foreignKeys.find(dbForeignKey => dbForeignKey.name === fk.name);\r\n        });\r\n        if (dependForeignKeyInTable.length === 0)\r\n            return;\r\n\r\n        this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableName}#${columnName}: ${dependForeignKeyInTable.map(foreignKey => foreignKey.name).join(\", \")}`);\r\n        const tableForeignKeys = dependForeignKeyInTable.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\r\n        table.removeForeignKeys(tableForeignKeys);\r\n        await this.queryRunner.dropForeignKeys(table, tableForeignKeys);\r\n    }\r\n\r\n    /**\r\n     * Creates new columns from the given column metadatas.\r\n     */\r\n    protected metadataColumnsToTableColumns(columns: ColumnMetadata[]): TableColumn[] {\r\n        return columns.map(columnMetadata => {\r\n            return TableColumn.create(\r\n                columnMetadata,\r\n                this.connection.driver.normalizeType(columnMetadata),\r\n                this.connection.driver.normalizeDefault(columnMetadata),\r\n                this.connection.driver.getColumnLength(columnMetadata)\r\n            );\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}
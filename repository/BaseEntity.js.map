{"version":3,"sources":["../../src/repository/BaseEntity.ts"],"names":[],"mappings":"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","file":"BaseEntity.js","sourcesContent":["import {Repository} from \"./Repository\";\r\nimport {getConnection} from \"../index\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {SaveOptions} from \"./SaveOptions\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {RemoveOptions} from \"./RemoveOptions\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\n\r\n/**\r\n * Base abstract entity for all entities, used in ActiveRecord patterns.\r\n */\r\nexport class BaseEntity {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used in all static methods of the BaseEntity.\r\n     */\r\n    // @ts-ignore: Unused variable which is actually used\r\n    private static usedConnection?: Connection;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    hasId(): boolean {\r\n        return (this.constructor as any).getRepository().hasId(this);\r\n    }\r\n\r\n    /**\r\n     * Saves current entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save(): Promise<this> {\r\n        return (this.constructor as any).getRepository().save(this);\r\n    }\r\n\r\n    /**\r\n     * Removes current entity from the database.\r\n     */\r\n    remove(): Promise<this> {\r\n        return (this.constructor as any).getRepository().remove(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets connection to be used by entity.\r\n     */\r\n    static useConnection(connection: Connection) {\r\n        this.usedConnection = connection;\r\n    }\r\n\r\n    /**\r\n     * Gets current entity's Repository.\r\n     */\r\n    static getRepository<T extends BaseEntity>(this: ObjectType<T>): Repository<T> {\r\n        const connection: Connection = (this as any).usedConnection || getConnection();\r\n        return connection.getRepository<T>(this);\r\n    }\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    static get target(): Function|string {\r\n        return this.getRepository().target;\r\n    }\r\n\r\n    /**\r\n     * Checks entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    static hasId(entity: BaseEntity): boolean {\r\n        return this.getRepository().hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    static getId<T extends BaseEntity>(this: ObjectType<T>, entity: T): any {\r\n        return (this as any).getRepository().getId(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    static createQueryBuilder<T extends BaseEntity>(this: ObjectType<T>, alias?: string): SelectQueryBuilder<T> {\r\n        return (this as any).getRepository().createQueryBuilder(alias);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    static create<T extends BaseEntity>(this: ObjectType<T>): T;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLikeArray: DeepPartial<T>[]): T;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): T;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities?: any): T {\r\n        return (this as any).getRepository().create(entityOrEntities);\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    static merge<T extends BaseEntity>(this: ObjectType<T>, mergeIntoEntity: T, ...entityLikes: DeepPartial<T>[]): T {\r\n        return (this as any).getRepository().merge(mergeIntoEntity, ...entityLikes);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    static preload<T extends BaseEntity>(this: ObjectType<T>, entityLike: DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().preload(entityLike);\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: SaveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: SaveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    static save<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\r\n        return (this as any).getRepository().save(entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    static update<T extends BaseEntity>(this: ObjectType<T>, conditions: Partial<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given find options.\r\n     */\r\n    static update<T extends BaseEntity>(this: ObjectType<T>, findOptions: FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void>;\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     */\r\n    static update<T extends BaseEntity>(this: ObjectType<T>, conditionsOrFindOptions: Partial<T>|FindOneOptions<T>, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\r\n        return (this as any).getRepository().update(conditionsOrFindOptions as any, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     */\r\n    static updateById<T extends BaseEntity>(this: ObjectType<T>, id: any, partialEntity: DeepPartial<T>, options?: SaveOptions): Promise<void> {\r\n        return (this as any).getRepository().updateById(id, partialEntity, options);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entities: T[], options?: RemoveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entity: T, options?: RemoveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    static remove<T extends BaseEntity>(this: ObjectType<T>, entityOrEntities: T|T[], options?: RemoveOptions): Promise<T|T[]> {\r\n        return (this as any).getRepository().remove(entityOrEntities as any, options);\r\n    }\r\n\r\n    /**\r\n     * Removes entity by a given entity id.\r\n     */\r\n    static removeById<T extends BaseEntity>(this: ObjectType<T>, id: any, options?: RemoveOptions): Promise<void> {\r\n        return (this as any).getRepository().deleteById(id, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    static count<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     */\r\n    static count<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     */\r\n    static count<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<number> {\r\n        return (this as any).getRepository().count(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    static find<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    static find<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    static find<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\r\n        return (this as any).getRepository().find(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, options?: FindManyOptions<T>): Promise<[ T[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<[ T[], number ]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<[ T[], number ]> {\r\n        return (this as any).getRepository().findAndCount(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], options?: FindManyOptions<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], conditions?: DeepPartial<T>): Promise<T[]>;\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findByIds<T extends BaseEntity>(this: ObjectType<T>, ids: any[], optionsOrConditions?: FindManyOptions<T>|DeepPartial<T>): Promise<T[]> {\r\n        return (this as any).getRepository().findByIds(ids, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     */\r\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, options?: FindOneOptions<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, conditions?: DeepPartial<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOne<T extends BaseEntity>(this: ObjectType<T>, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().findOne(optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, options?: FindOneOptions<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, conditions?: DeepPartial<T>): Promise<T|undefined>;\r\n\r\n    /**\r\n     * Finds entity by given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    static findOneById<T extends BaseEntity>(this: ObjectType<T>, id: any, optionsOrConditions?: FindOneOptions<T>|DeepPartial<T>): Promise<T|undefined> {\r\n        return (this as any).getRepository().findOneById(id, optionsOrConditions as any);\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    static query<T extends BaseEntity>(this: ObjectType<T>, query: string, parameters?: any[]): Promise<any> {\r\n        return (this as any).getRepository().query(query, parameters);\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    static clear<T extends BaseEntity>(this: ObjectType<T>, ): Promise<void> {\r\n        return (this as any).getRepository().clear();\r\n    }\r\n\r\n}"],"sourceRoot":".."}
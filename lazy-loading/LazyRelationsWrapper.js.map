{"version":3,"sources":["../../src/lazy-loading/LazyRelationsWrapper.ts"],"names":[],"mappings":";;AAGA,kEAA+D;AAE/D;;;GAGG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,8BAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC1C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,mCAAI,GAAJ,UAAK,MAAqB,EAAE,QAA0B;QAClD,IAAM,cAAc,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3D,IAAM,SAAS,GAAG,IAAI,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,4DAA4D;QACnH,IAAM,YAAY,GAAG,YAAY,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,gEAAgE;QAClI,IAAM,YAAY,GAAG,QAAQ,GAAG,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,kGAAkG;QAEhK,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,YAAY,EAAE;YACjD,GAAG,EAAE;gBAAA,iBAgBJ;gBAfG,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;oBAC5B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACnB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE9B,0FAA0F;gBAC1F,IAAI,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;oBAChE,KAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;oBACzB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBAC1B,OAAO,KAAI,CAAC,YAAY,CAAC,CAAC;oBAC1B,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAE3B,CAAC,CAAC,CAAC,CAAC,wCAAwC;gBAC5C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC9B,CAAC;YACD,GAAG,EAAE,UAAS,OAAqB;gBAA9B,iBAWJ;gBAVG,EAAE,CAAC,CAAC,OAAO,YAAY,OAAO,CAAC,CAAC,CAAC;oBAC7B,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM;wBACf,KAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;wBACzB,KAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBAC9B,CAAC,CAAC,CAAC;gBAEP,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;oBAC1B,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gBAC9B,CAAC;YACL,CAAC;YACD,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC;IAEL,2BAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,oDAAoB","file":"LazyRelationsWrapper.js","sourcesContent":["import {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\r\n\r\n/**\r\n * Wraps entities and creates getters/setters for their relations\r\n * to be able to lazily load relations when accessing these relations.\r\n */\r\nexport class LazyRelationsWrapper {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Wraps given entity and creates getters/setters for its given relation\r\n     * to be able to lazily load data when accessing these relation.\r\n     */\r\n    wrap(object: ObjectLiteral, relation: RelationMetadata) {\r\n        const relationLoader = new RelationLoader(this.connection);\r\n        const dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\r\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\r\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\r\n\r\n        Object.defineProperty(object, relation.propertyName, {\r\n            get: function() {\r\n                if (this[resolveIndex] === true) // if related data already was loaded then simply return it\r\n                    return Promise.resolve(this[dataIndex]);\r\n\r\n                if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it\r\n                    return this[promiseIndex];\r\n\r\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\r\n                this[promiseIndex] = relationLoader.load(relation, this).then(result => {\r\n                    this[dataIndex] = result;\r\n                    this[resolveIndex] = true;\r\n                    delete this[promiseIndex];\r\n                    return this[dataIndex];\r\n\r\n                }); // .catch((err: any) => { throw err; });\r\n                return this[promiseIndex];\r\n            },\r\n            set: function(promise: Promise<any>) {\r\n                if (promise instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\r\n                    promise.then(result => {\r\n                        this[dataIndex] = result;\r\n                        this[resolveIndex] = true;\r\n                    });\r\n\r\n                } else { // if its direct data set (non promise, probably not safe-typed)\r\n                    this[dataIndex] = promise;\r\n                    this[resolveIndex] = true;\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}
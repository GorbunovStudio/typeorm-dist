{"version":3,"sources":["../../src/driver/sqljs/SqljsQueryRunner.ts"],"names":[],"mappings":"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","file":"SqljsQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {InsertResult} from \"../InsertResult\";\r\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport {SqljsDriver} from \"./SqljsDriver\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\r\n    \r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqljsDriver;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqljsDriver) {\r\n        super(driver);\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public methods\r\n    // -------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        await super.commitTransaction();\r\n        await this.driver.autoSave();\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n            const databaseConnection = await this.connect();\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const queryStartTime = +new Date();\r\n            try {\r\n                const statement = databaseConnection.prepare(query);\r\n                statement.bind(parameters);\r\n                \r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                const queryEndTime = +new Date();\r\n                const queryExecutionTime = queryEndTime - queryStartTime;\r\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                const result: any[] = [];\r\n\r\n                while (statement.step()) {\r\n                    result.push(statement.getAsObject());\r\n                }\r\n                \r\n                statement.free();\r\n                ok(result);\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of the generated column if given and generate column exist in the table.\r\n     */\r\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\r\n        const values = keys.map((key) => \"?\").join(\",\");\r\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\r\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<InsertResult>(async (ok, fail) => {\r\n            this.driver.connection.logger.logQuery(sql, parameters, this);\r\n            const databaseConnection = await this.connect();\r\n            try {\r\n                const statement = databaseConnection.prepare(sql);\r\n                statement.bind(parameters);\r\n                statement.step();\r\n                \r\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\r\n                    let value = keyValues[generatedColumn.databaseName];\r\n                    // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\r\n                    if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\r\n                        value = databaseConnection.exec(\"SELECT last_insert_rowid()\")[0].values[0][0];\r\n                    }\r\n                    \r\n                    if (!value) return map;\r\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n                }, {} as ObjectLiteral);\r\n\r\n                if (!this.isTransactionActive) {\r\n                    await this.driver.autoSave();\r\n                }\r\n                \r\n                ok({\r\n                    result: undefined,\r\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n                });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     * Calls AbstractSqliteQueryRunner.update() and runs autoSave if update() was not called in a transaction.\r\n     */\r\n    async update(tableName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        await super.update(tableName, valuesMap, conditions);\r\n        \r\n        if (!this.isTransactionActive) {\r\n            await this.driver.autoSave();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     * Calls AbstractSqliteQueryRunner.delete() and runs autoSave if delete() was not called in a transaction.\r\n     */\r\n    async delete(tableName: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        await super.delete(tableName, conditions, maybeParameters);\r\n        \r\n        if (!this.isTransactionActive) {\r\n            await this.driver.autoSave();\r\n        }\r\n    }\r\n}"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/sqljs/SqljsDriver.ts"],"names":[],"mappings":"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","file":"SqljsDriver.js","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\r\nimport {SqljsConnectionOptions} from \"./SqljsConnectionOptions\";\r\nimport {SqljsQueryRunner} from \"./SqljsQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\n\r\n// This is needed to satisfy the typescript compiler.\r\ninterface Window {\r\n    SQL: any;\r\n}\r\ndeclare var window: Window;\r\n\r\nexport class SqljsDriver extends AbstractSqliteDriver {\r\n    // The driver specific options.\r\n    options: SqljsConnectionOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\r\n        // because either autoSave saves to location or calls autoSaveCallback.\r\n        if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\r\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\r\n        }\r\n\r\n        // load sql.js package\r\n        this.loadDependencies();\r\n    }\r\n\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        this.databaseConnection = await this.createDatabaseConnection();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            try {\r\n                this.queryRunner = undefined;\r\n                this.databaseConnection.close();\r\n                ok();\r\n            }\r\n            catch (e)  {\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\" | \"slave\" = \"master\"): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new SqljsQueryRunner(this);\r\n\r\n        return this.queryRunner;\r\n    }\r\n    \r\n    /**\r\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\r\n     * This will delete the current database!\r\n     */\r\n    load(fileNameOrLocalStorageOrData: string | Uint8Array): Promise<any> {\r\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\r\n            // content has to be loaded\r\n            if (PlatformTools.type === \"node\") {\r\n                // Node.js\r\n                // fileNameOrLocalStorageOrData should be a path to the file\r\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\r\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\r\n                    return this.createDatabaseConnectionWithImport(database);\r\n                }\r\n                else {\r\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\r\n                }\r\n            } \r\n            else {\r\n                // browser\r\n                // fileNameOrLocalStorageOrData should be a local storage key\r\n                const localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\r\n                return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\r\n            }\r\n        }\r\n        else {\r\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saved the current database to the given file (Node.js) or local storage key (browser).\r\n     * If no location path is given, the location path in the options (if specified) will be used.\r\n     */\r\n    async save(location?: string) {\r\n        if (!location && !this.options.location) {\r\n            throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);\r\n        }\r\n        \r\n        let path = \"\";\r\n        if (location) {\r\n            path = location;\r\n        }\r\n        else if (this.options.location) {\r\n            path = this.options.location;\r\n        }\r\n\r\n        if (PlatformTools.type === \"node\") {\r\n            try {\r\n                const content = new Buffer(this.databaseConnection.export());\r\n                await PlatformTools.writeFile(path, content);\r\n            }\r\n            catch (e) {\r\n                throw new Error(`Could not save database, error: ${e}`);\r\n            }\r\n        }\r\n        else {\r\n            const database: Uint8Array = this.databaseConnection.export();\r\n            // convert Uint8Array to number array to improve local-storage storage\r\n            const databaseArray = [].slice.call(database);\r\n            PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This gets called by the QueryRunner when a change to the database is made.\r\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\r\n     * otherwise the save method is called which saves it to file (Node.js) or localstorage (browser).\r\n     */\r\n    async autoSave() {\r\n        if (this.options.autoSave) {\r\n            if (this.options.autoSaveCallback) {\r\n                await this.options.autoSaveCallback(this.export());\r\n            }\r\n            else {\r\n                await this.save();\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns the current database as Uint8Array.\r\n     */\r\n    export(): Uint8Array {\r\n        return this.databaseConnection.export();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     * If the location option is set, the database is loaded first.\r\n     */\r\n    protected createDatabaseConnection(): Promise<any> {\r\n        if (this.options.location) {\r\n            return this.load(this.options.location);\r\n        }\r\n\r\n        return this.createDatabaseConnectionWithImport(this.options.database);\r\n    }\r\n\r\n    /**\r\n     * Creates connection with an optional database.\r\n     * If database is specified it is loaded, otherwise a new empty database is created.\r\n     */\r\n    protected createDatabaseConnectionWithImport(database?: Uint8Array): Promise<any> {\r\n        if (database && database.length > 0) {\r\n            this.databaseConnection = new this.sqlite.Database(database);\r\n        }\r\n        else {\r\n            this.databaseConnection = new this.sqlite.Database();\r\n        }\r\n\r\n        // Enable foreign keys for database\r\n        return new Promise<any>((ok, fail) => {\r\n            try {\r\n                this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);\r\n                ok(this.databaseConnection);\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        if (PlatformTools.type === \"browser\") {\r\n            this.sqlite = window.SQL;\r\n        }\r\n        else {\r\n            try {\r\n                this.sqlite = PlatformTools.load(\"sql.js\");\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {TableColumn} from \"../../schema-builder/schema/TableColumn\";\r\nimport {Table} from \"../../schema-builder/schema/Table\";\r\nimport {TableForeignKey} from \"../../schema-builder/schema/TableForeignKey\";\r\nimport {TablePrimaryKey} from \"../../schema-builder/schema/TablePrimaryKey\";\r\nimport {TableIndex} from \"../../schema-builder/schema/TableIndex\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {SqlServerDriver} from \"./SqlServerDriver\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {MssqlParameter} from \"./MssqlParameter\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {PromiseUtils} from \"../../util/PromiseUtils\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class SqlServerQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqlServerDriver;\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Isolated entity manager working only with current query runner.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    isReleased = false;\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     */\r\n    isTransactionActive = false;\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {};\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    protected databaseConnection: any;\r\n\r\n    /**\r\n     * Last executed query in a transaction.\r\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\r\n     * that's why we store last executed query promise to wait it when we execute next query.\r\n     *\r\n     * @see https://github.com/patriksimek/node-mssql/issues/491\r\n     */\r\n    protected queryResponsibilityChain: Promise<any>[] = [];\r\n\r\n    /**\r\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\r\n     */\r\n    protected sqlMemoryMode: boolean = false;\r\n\r\n    /**\r\n     * Sql-s stored if \"sql in memory\" mode is enabled.\r\n     */\r\n    protected sqlsInMemory: string[] = [];\r\n\r\n    /**\r\n     * Mode in which query runner executes.\r\n     * Used for replication.\r\n     * If replication is not setup its value is ignored.\r\n     */\r\n    protected mode: \"master\"|\"slave\";\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqlServerDriver, mode: \"master\"|\"slave\" = \"master\") {\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.mode = mode;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        return new Promise<void>(async (ok, fail) => {\r\n            this.isTransactionActive = true;\r\n\r\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n            this.databaseConnection = pool.transaction();\r\n            this.databaseConnection.begin((err: any) => {\r\n                if (err) {\r\n                    this.isTransactionActive = false;\r\n                    return fail(err);\r\n                }\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.commit((err: any) => {\r\n                if (err) return fail(err);\r\n                this.isTransactionActive = false;\r\n                this.databaseConnection = null;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        return new Promise<void>((ok, fail) => {\r\n            this.databaseConnection.rollback((err: any) => {\r\n                if (err) return fail(err);\r\n                this.isTransactionActive = false;\r\n                this.databaseConnection = null;\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\r\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\r\n            case \"bit\":\r\n                return this.driver.mssql.Bit;\r\n            case \"bigint\":\r\n                return this.driver.mssql.BigInt;\r\n            case \"decimal\":\r\n                return this.driver.mssql.Decimal(...parameter.params);\r\n            case \"float\":\r\n                return this.driver.mssql.Float;\r\n            case \"int\":\r\n                return this.driver.mssql.Int;\r\n            case \"money\":\r\n                return this.driver.mssql.Money;\r\n            case \"numeric\":\r\n                return this.driver.mssql.Numeric(...parameter.params);\r\n            case \"smallint\":\r\n                return this.driver.mssql.SmallInt;\r\n            case \"smallmoney\":\r\n                return this.driver.mssql.SmallMoney;\r\n            case \"real\":\r\n                return this.driver.mssql.Real;\r\n            case \"tinyint\":\r\n                return this.driver.mssql.TinyInt;\r\n            case \"char\":\r\n                return this.driver.mssql.Char(...parameter.params);\r\n            case \"nchar\":\r\n                return this.driver.mssql.NChar(...parameter.params);\r\n            case \"text\":\r\n                return this.driver.mssql.Text;\r\n            case \"ntext\":\r\n                return this.driver.mssql.Ntext;\r\n            case \"varchar\":\r\n                return this.driver.mssql.VarChar(...parameter.params);\r\n            case \"nvarchar\":\r\n                return this.driver.mssql.NVarChar(...parameter.params);\r\n            case \"xml\":\r\n                return this.driver.mssql.Xml;\r\n            case \"time\":\r\n                return this.driver.mssql.Time(...parameter.params);\r\n            case \"date\":\r\n                return this.driver.mssql.Date;\r\n            case \"datetime\":\r\n                return this.driver.mssql.DateTime;\r\n            case \"datetime2\":\r\n                return this.driver.mssql.DateTime2(...parameter.params);\r\n            case \"datetimeoffset\":\r\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\r\n            case \"smalldatetime\":\r\n                return this.driver.mssql.SmallDateTime;\r\n            case \"uniqueidentifier\":\r\n                return this.driver.mssql.UniqueIdentifier;\r\n            case \"variant\":\r\n                return this.driver.mssql.Variant;\r\n            case \"binary\":\r\n                return this.driver.mssql.Binary;\r\n            case \"varbinary\":\r\n                return this.driver.mssql.VarBinary(...parameter.params);\r\n            case \"image\":\r\n                return this.driver.mssql.Image;\r\n            case \"udt\":\r\n                return this.driver.mssql.UDT;\r\n            case \"geography\":\r\n                return this.driver.mssql.Geography;\r\n            case \"geometry\":\r\n                return this.driver.mssql.Geometry;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let waitingOkay: Function;\r\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\r\n        if (this.queryResponsibilityChain.length) {\r\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\r\n            this.queryResponsibilityChain.push(waitingPromise);\r\n            await Promise.all(otherWaitingPromises);\r\n        }\r\n\r\n        const promise = new Promise(async (ok, fail) => {\r\n            try {\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\r\n                if (parameters && parameters.length) {\r\n                    parameters.forEach((parameter, index) => {\r\n                        if (parameter instanceof MssqlParameter) {\r\n                            const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\r\n                            if (mssqlParameter) {\r\n                                request.input(index, mssqlParameter, parameter.value);\r\n                            } else {\r\n                                request.input(index, parameter.value);\r\n                            }\r\n                        } else {\r\n                            request.input(index, parameter);\r\n                        }\r\n                    });\r\n                }\r\n                const queryStartTime = +new Date();\r\n                request.query(query, (err: any, result: any) => {\r\n\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                    const queryEndTime = +new Date();\r\n                    const queryExecutionTime = queryEndTime - queryStartTime;\r\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                    const resolveChain = () => {\r\n                        if (promiseIndex !== -1)\r\n                            this.queryResponsibilityChain.splice(promiseIndex, 1);\r\n                        if (waitingPromiseIndex !== -1)\r\n                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\r\n                        waitingOkay();\r\n                    };\r\n\r\n                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\r\n                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\r\n                    if (err) {\r\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                        resolveChain();\r\n                        return fail(new QueryFailedError(query, parameters, err));\r\n                    }\r\n\r\n                    ok(result.recordset);\r\n                    resolveChain();\r\n                });\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n        if (this.isTransactionActive)\r\n            this.queryResponsibilityChain.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        let waitingOkay: Function;\r\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\r\n        if (this.queryResponsibilityChain.length) {\r\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\r\n            this.queryResponsibilityChain.push(waitingPromise);\r\n            await Promise.all(otherWaitingPromises);\r\n        }\r\n\r\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\r\n\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\r\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\r\n            request.stream = true;\r\n            if (parameters && parameters.length) {\r\n                parameters.forEach((parameter, index) => {\r\n                    if (parameter instanceof MssqlParameter) {\r\n                        request.input(index, this.mssqlParameterToNativeParameter(parameter), parameter.value);\r\n                    } else {\r\n                        request.input(index, parameter);\r\n                    }\r\n                });\r\n            }\r\n            request.query(query, (err: any, result: any) => {\r\n\r\n                const resolveChain = () => {\r\n                    if (promiseIndex !== -1)\r\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\r\n                    if (waitingPromiseIndex !== -1)\r\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\r\n                    waitingOkay();\r\n                };\r\n\r\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\r\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\r\n                if (err) {\r\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                    resolveChain();\r\n                    return fail(err);\r\n                }\r\n\r\n                ok(result.recordset);\r\n                resolveChain();\r\n            });\r\n            if (onEnd) request.on(\"done\", onEnd);\r\n            if (onError) request.on(\"error\", onError);\r\n            ok(request as ReadStream);\r\n        });\r\n        if (this.isTransactionActive)\r\n            this.queryResponsibilityChain.push(promise);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of the generated column if given and generate column exist in the table.\r\n     */\r\n    async insert(tablePath: string, keyValues: ObjectLiteral): Promise<any> {\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\r\n        const values = keys.map((key, index) => \"@\" + index).join(\",\");\r\n        const generatedColumns = this.connection.hasMetadata(tablePath) ? this.connection.getMetadata(tablePath).generatedColumns : [];\r\n        const generatedColumnNames = generatedColumns.map(generatedColumn => `INSERTED.\"${generatedColumn.databaseName}\"`).join(\", \");\r\n        const generatedColumnSql = generatedColumns.length > 0 ? ` OUTPUT ${generatedColumnNames}` : \"\";\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.escapeTablePath(tablePath)}(${columns}) ${generatedColumnSql} VALUES (${values})`\r\n            : `INSERT INTO ${this.escapeTablePath(tablePath)} ${generatedColumnSql} DEFAULT VALUES `;\r\n\r\n        const parameters = this.driver.parametrizeMap(tablePath, keyValues);\r\n        const parametersArray = Object.keys(parameters).map(key => parameters[key]);\r\n        const result = await this.query(sql, parametersArray);\r\n        const generatedMap = generatedColumns.reduce((map, column) => {\r\n            const valueMap = column.createValueMap(result[0][column.databaseName]);\r\n            return OrmUtils.mergeDeep(map, valueMap);\r\n        }, {} as ObjectLiteral);\r\n\r\n        return {\r\n            result: result,\r\n            generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tablePath: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        valuesMap = this.driver.parametrizeMap(tablePath, valuesMap);\r\n        conditions = this.driver.parametrizeMap(tablePath, conditions);\r\n\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, updateParams.length).join(\" AND \");\r\n        const sql = `UPDATE ${this.escapeTablePath(tablePath)} SET ${updateValues} ${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n\r\n        await this.query(sql, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tablePath: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        conditions = typeof conditions === \"object\" ? this.driver.parametrizeMap(tablePath, conditions) : conditions;\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.escapeTablePath(tablePath)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into the closure table.\r\n     */\r\n    async insertIntoClosureTable(tablePath: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        let sql = \"\";\r\n        if (hasLevel) { // todo: escape all parameters there\r\n            sql = `INSERT INTO ${this.escapeTablePath(tablePath)}(\"ancestor\", \"descendant\", \"level\") ` +\r\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM ${this.escapeTablePath(tablePath)} WHERE \"descendant\" = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.escapeTablePath(tablePath)}(\"ancestor\", \"descendant\") ` +\r\n                `SELECT \"ancestor\", ${newEntityId} FROM ${this.escapeTablePath(tablePath)} WHERE \"descendant\" = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        if (hasLevel) {\r\n            const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.escapeTablePath(tablePath)} WHERE descendant = ${parentId}`);\r\n            return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(tablePath: string): Promise<Table|undefined> {\r\n        const tables = await this.getTables([tablePath]);\r\n        return tables.length > 0 ? tables[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getTables(tablePaths: string[]): Promise<Table[]> {\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tablePaths || !tablePaths.length)\r\n            return [];\r\n\r\n        const tableNames = tablePaths.map(tablePath => {\r\n            if (tablePath.split(\".\").length === 3) {\r\n                return tablePath.split(\".\")[2];\r\n            } else if (tablePath.split(\".\").length === 2) {\r\n                return tablePath.split(\".\")[1];\r\n            } else {\r\n                return tablePath;\r\n            }\r\n        });\r\n\r\n        let schemaNames: string[] = [];\r\n        tablePaths.filter(tablePath => tablePath.indexOf(\".\") !== -1)\r\n            .forEach(tablePath => {\r\n                if (tablePath.split(\".\").length === 3) {\r\n                    if (tablePath.split(\".\")[1] !== \"\")\r\n                        schemaNames.push(tablePath.split(\".\")[1]);\r\n                } else {\r\n                    schemaNames.push(tablePath.split(\".\")[0]);\r\n                }\r\n            });\r\n        schemaNames.push(this.driver.options.schema || \"SCHEMA_NAME()\");\r\n\r\n        const dbNames = tablePaths\r\n            .filter(tablePath => tablePath.split(\".\").length === 3)\r\n            .map(tablePath => tablePath.split(\".\")[0]);\r\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\r\n            dbNames.push(this.driver.database);\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const schemaNamesString = schemaNames.map(name => {\r\n            return name === \"SCHEMA_NAME()\" ? name : \"'\" + name + \"'\";\r\n        }).join(\", \");\r\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\r\n\r\n        const tablesSql = dbNames.map(dbName => {\r\n            return `SELECT * FROM ${dbName}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN (${tableNamesString}) AND TABLE_SCHEMA IN (${schemaNamesString})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const columnsSql = dbNames.map(dbName => {\r\n            return `SELECT * FROM ${dbName}.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA IN (${schemaNamesString})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const constraintsSql = dbNames.map(dbName => {\r\n            return `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM ${dbName}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages ` +\r\n                `LEFT JOIN ${dbName}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME ` +\r\n                `WHERE columnUsages.TABLE_SCHEMA IN (${schemaNamesString}) AND tableConstraints.TABLE_SCHEMA IN (${schemaNamesString})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const identityColumnsSql = dbNames.map(dbName => {\r\n            return  `SELECT COLUMN_NAME, TABLE_NAME FROM ${dbName}.INFORMATION_SCHEMA.COLUMNS WHERE COLUMNPROPERTY(object_id(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 AND TABLE_SCHEMA IN (${schemaNamesString})`;\r\n        }).join(\" UNION ALL \");\r\n\r\n        const indicesSql = dbNames.map(dbName => {\r\n            return `SELECT TABLE_NAME = t.name, INDEX_NAME = ind.name, IndexId = ind.index_id, ColumnId = ic.index_column_id, \r\n                    COLUMN_NAME = col.name, IS_UNIQUE = ind.is_unique, ind.*, ic.*, col.* \r\n                    FROM ${dbName}.sys.indexes ind \r\n                    INNER JOIN ${dbName}.sys.index_columns ic ON ind.object_id = ic.object_id and ind.index_id = ic.index_id\r\n                    INNER JOIN ${dbName}.sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id \r\n                    INNER JOIN ${dbName}.sys.tables t ON ind.object_id = t.object_id WHERE ind.is_primary_key = 0 \r\n                    AND ind.is_unique_constraint = 0 AND t.is_ms_shipped = 0`;\r\n        }).join(\" UNION ALL \");\r\n        const [dbTables, dbColumns, dbConstraints, dbIdentityColumns, dbIndices]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(identityColumnsSql),\r\n            this.query(indicesSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const table = new Table(dbTable[\"TABLE_NAME\"]);\r\n\r\n            table.database = dbTable[\"TABLE_CATALOG\"];\r\n            table.schema = dbTable[\"TABLE_SCHEMA\"];\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === table.name)\r\n                .map(dbColumn => {\r\n                    const isPrimary = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === table.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                    });\r\n                    const isGenerated = !!dbIdentityColumns.find(column => {\r\n                        return  column[\"TABLE_NAME\"] === table.name &&\r\n                                column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\r\n                    });\r\n                    const isUnique = !!dbConstraints.find(dbConstraint => {\r\n                        return  dbConstraint[\"TABLE_NAME\"] === table.name &&\r\n                                dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] &&\r\n                                dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\r\n                    });\r\n\r\n                    const tableColumn = new TableColumn();\r\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\r\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n\r\n                    tableColumn.length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"] ? dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString() : \"\";\r\n                    if (tableColumn.length === \"-1\")\r\n                        tableColumn.length = \"MAX\";\r\n\r\n                    tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\r\n                    tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\r\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? dbColumn[\"COLUMN_DEFAULT\"] : undefined;\r\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    tableColumn.isPrimary = isPrimary;\r\n                    tableColumn.isGenerated = isGenerated;\r\n                    if (tableColumn.default === \"(newsequentialid())\") {\r\n                        tableColumn.isGenerated = true;\r\n                        tableColumn.default = undefined;                        \r\n                    }\r\n                    tableColumn.isUnique = isUnique;\r\n                    tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\r\n                    tableColumn.collation = dbColumn[\"COLLATION_NAME\"];\r\n                    tableColumn.comment = \"\"; // todo: less priority, implement this later\r\n\r\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\r\n                        tableColumn.precision = dbColumn[\"DATETIME_PRECISION\"];\r\n                    }\r\n\r\n                    return tableColumn;\r\n                });\r\n\r\n            // create primary key schema\r\n            table.primaryKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === table.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\r\n                })\r\n                .map(keyColumnUsage => {\r\n                    return new TablePrimaryKey(keyColumnUsage[\"CONSTRAINT_NAME\"], keyColumnUsage[\"COLUMN_NAME\"]);\r\n                });\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            table.foreignKeys = dbConstraints\r\n                .filter(dbConstraint => {\r\n                    return  dbConstraint[\"TABLE_NAME\"] === table.name &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"FOREIGN KEY\";\r\n                })\r\n                .map(dbConstraint => new TableForeignKey(dbConstraint[\"CONSTRAINT_NAME\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create index schemas from the loaded indices\r\n            table.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return  dbIndex[\"TABLE_NAME\"] === table.name &&\r\n                            (!table.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"INDEX_NAME\"])) &&\r\n                            (!table.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"INDEX_NAME\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"INDEX_NAME\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const columnNames = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === table.name && dbIndex[\"INDEX_NAME\"] === dbIndexName)\r\n                        .map(dbIndex => dbIndex[\"COLUMN_NAME\"]);\r\n\r\n                    const isUnique = !!dbIndices.find(dbIndex => dbIndex[\"TABLE_NAME\"] === table.name && dbIndex[\"INDEX_NAME\"] === dbIndexName && dbIndex[\"IS_UNIQUE\"] === true);\r\n                    return new TableIndex(dbTable[\"TABLE_NAME\"], dbIndexName, columnNames,  isUnique);\r\n                });\r\n\r\n            return table;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT DB_ID('${database}') as db_id`);\r\n        const dbId = result[0][\"db_id\"];\r\n        return !!dbId;\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tablePath: string): Promise<boolean> {\r\n        const parsedTablePath = this.parseTablePath(tablePath);\r\n        const sql = `SELECT * FROM ${parsedTablePath.database}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '${parsedTablePath.tableName}' AND TABLE_SCHEMA = ${parsedTablePath.schema === \"SCHEMA_NAME()\" ? parsedTablePath.schema : `'${parsedTablePath.schema}'`}`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a database if it's not created.\r\n     */\r\n    createDatabase(database: string): Promise<void[]> {\r\n        return this.query(`IF DB_ID('${database}') IS NULL CREATE DATABASE ${database}`);\r\n    }\r\n\r\n    /**\r\n     * Creates a schema if it's not created.\r\n     */\r\n    createSchema(schemaPaths: string[]): Promise<void[]> {\r\n        if (this.driver.options.schema)\r\n            schemaPaths.push(this.driver.options.schema);\r\n\r\n        return PromiseUtils.runInSequence(schemaPaths, async path => {\r\n            if (path.indexOf(\".\") === -1) {\r\n                const query = `IF SCHEMA_ID('${path}') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA ${path}' END`;\r\n                return this.query(query);\r\n            } else {\r\n                const dbName = path.split(\".\")[0];\r\n                const schema = path.split(\".\")[1];\r\n                const currentDBQuery = await this.query(`SELECT DB_NAME() AS db_name`);\r\n                const currentDB = currentDBQuery[0][\"db_name\"];\r\n                await this.query(`USE ${dbName}`);\r\n                const query = `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC sp_executesql N'CREATE SCHEMA ${schema}' END`;\r\n                await this.query(query);\r\n                return this.query(`USE ${currentDB}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: Table): Promise<void> {\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table.name, column, false, true)).join(\", \");\r\n        let sql = `CREATE TABLE ${this.escapeTablePath(table)} (${columnDefinitions}`;\r\n        sql += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => {\r\n                let constraintName = `${table.name}_${column.name}`;\r\n                const schema = table.schema || this.driver.options.schema;\r\n                if (schema)\r\n                    constraintName = `${schema}_` + constraintName;\r\n\r\n                return `, CONSTRAINT \"uk_${constraintName}\" UNIQUE (\"${column.name}\")`;\r\n            }).join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            sql += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        sql += `)`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tablePath: string): Promise<void> {\r\n        await this.query(`DROP TABLE ${this.escapeTablePath(tablePath)}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tablePath: string, columnName: string): Promise<boolean> {\r\n        const parsedTablePath = this.parseTablePath(tablePath);\r\n        const sql = `SELECT * FROM ${parsedTablePath.database}.INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '${parsedTablePath.tableName}' AND COLUMN_NAME = '${columnName}' AND TABLE_SCHEMA = ${parsedTablePath.schema === \"SCHEMA_NAME()\" ? parsedTablePath.schema : `'${parsedTablePath.schema}'`}`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrPath: Table|string, column: TableColumn): Promise<void> {\r\n        const tableName = tableOrPath instanceof Table ? tableOrPath.name : this.parseTablePath(tableOrPath).tableName;\r\n        const sql = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} ADD ${this.buildCreateColumnSql(tableName, column, false, true)}`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const queries = columns.map(column => this.addColumn(tableOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n        let table: Table|undefined = undefined;\r\n        if (tableOrName instanceof Table) {\r\n            table = tableOrName;\r\n        } else {\r\n            table = await this.getTable(tableOrName);\r\n        }\r\n\r\n        if (!table)\r\n            throw new Error(`Table ${tableOrName} was not found.`);\r\n\r\n        let oldColumn: TableColumn|undefined = undefined;\r\n        if (oldTableColumnOrName instanceof TableColumn) {\r\n            oldColumn = oldTableColumnOrName;\r\n        } else {\r\n            oldColumn = table.columns.find(column => column.name === oldTableColumnOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${tableOrName}\" table.`);\r\n\r\n        let newColumn: TableColumn|undefined = undefined;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n\r\n        let table: Table|undefined = undefined;\r\n        if (tableOrName instanceof Table) {\r\n            table = tableOrName;\r\n        } else {\r\n            table = await this.getTable(tableOrName);\r\n        }\r\n\r\n        if (!table)\r\n            throw new Error(`Table ${tableOrName} was not found.`);\r\n\r\n        let oldColumn: TableColumn|undefined = undefined;\r\n        if (oldTableColumnOrName instanceof TableColumn) {\r\n            oldColumn = oldTableColumnOrName;\r\n        } else {\r\n            oldColumn = table.columns.find(column => column.name === oldTableColumnOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${tableOrName}\" table.`);\r\n\r\n        // to update an identy column we have to drop column and recreate it again\r\n        if (newColumn.isGenerated !== oldColumn.isGenerated) {\r\n            await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} DROP COLUMN \"${newColumn.name}\"`);\r\n            await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} ADD ${this.buildCreateColumnSql(table.name, newColumn, false, false)}`);\r\n        }\r\n\r\n        const sql = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ALTER COLUMN ${this.buildCreateColumnSql(table.name, newColumn, true, false)}`; // todo: CHANGE OR MODIFY COLUMN ????\r\n        await this.query(sql);\r\n\r\n        if (newColumn.isUnique !== oldColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} ADD CONSTRAINT \"uk_${table.name}_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`);\r\n\r\n            } else if (newColumn.isUnique === false) {\r\n                await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} DROP CONSTRAINT \"uk_${table.name}_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n        if (newColumn.default !== oldColumn.default) {\r\n            if (newColumn.default !== null && newColumn.default !== undefined) {\r\n                await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} DROP CONSTRAINT \"df_${table.name}_${newColumn.name}\"`);\r\n                await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} ADD CONSTRAINT \"df_${table.name}_${newColumn.name}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`);\r\n\r\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                await this.query(`ALTER TABLE ${this.escapeTablePath(tableOrName)} DROP CONSTRAINT \"df_${table.name}_${newColumn.name}\"`);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(table: Table, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(table, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(table: Table, column: TableColumn): Promise<void> {\r\n        if (column.default)\r\n            await this.query(`ALTER TABLE ${this.escapeTablePath(table)} DROP CONSTRAINT \"df_${table.name}_${column.name}\"`);\r\n        await this.query(`ALTER TABLE ${this.escapeTablePath(table)} DROP COLUMN \"${column.name}\"`);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(table: Table, columns: TableColumn[]): Promise<void> {\r\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(table: Table): Promise<void> {\r\n        const schema = table.schema || \"SCHEMA_NAME()\";\r\n        const database = table.database || this.driver.database;\r\n        const oldPrimaryKeySql = `SELECT columnUsages.*, tableConstraints.CONSTRAINT_TYPE FROM ${database}.INFORMATION_SCHEMA.KEY_COLUMN_USAGE columnUsages\r\nLEFT JOIN ${database}.INFORMATION_SCHEMA.TABLE_CONSTRAINTS tableConstraints ON tableConstraints.CONSTRAINT_NAME = columnUsages.CONSTRAINT_NAME AND tableConstraints.CONSTRAINT_TYPE = 'PRIMARY KEY'\r\nWHERE tableConstraints.TABLE_CATALOG = '${database}' AND columnUsages.TABLE_SCHEMA = '${schema}' AND tableConstraints.TABLE_SCHEMA = '${schema}'`;\r\n        const oldPrimaryKey = await this.query(oldPrimaryKeySql);\r\n        if (oldPrimaryKey.length > 0)\r\n            await this.query(`ALTER TABLE ${this.escapeTablePath(table)} DROP CONSTRAINT \"${oldPrimaryKey[0][\"CONSTRAINT_NAME\"]}\"`);\r\n\r\n        const primaryColumnNames = table.primaryKeys.map(primaryKey => `\"` + primaryKey.columnName + `\"`);\r\n        if (primaryColumnNames.length > 0)\r\n            await this.query(`ALTER TABLE ${this.escapeTablePath(table)} ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrPath: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\r\n        let sql = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapeTablePath(foreignKey.referencedTablePath)}(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrPath: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const sql = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n        return this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tablePath: Table|string, index: TableIndex): Promise<void> {\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        const sql = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapeTablePath(tablePath)}(${columns})`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableSchemeOrName: Table|string, indexName: string): Promise<void> {\r\n        const sql = `DROP INDEX \"${indexName}\" ON ${this.escapeTablePath(tableSchemeOrName)}`;\r\n        await this.query(sql);\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tablePath: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapeTablePath(tablePath)}`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(schemas?: string[], database?: string): Promise<void> {\r\n        const isDatabaseExist = await this.hasDatabase(database!);\r\n        if (!isDatabaseExist)\r\n            return Promise.resolve();\r\n\r\n        if (!schemas)\r\n            schemas = [];\r\n        schemas.push(this.driver.options.schema || \"SCHEMA_NAME()\");\r\n        const schemaNamesString = schemas.map(name => {\r\n            return name === \"SCHEMA_NAME()\" ? name : \"'\" + name + \"'\";\r\n        }).join(\", \");\r\n\r\n        await this.startTransaction();\r\n        try {\r\n\r\n            let allTablesSql = `SELECT * FROM ${database}.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA IN (${schemaNamesString})`;\r\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\r\n            await Promise.all(allTablesResults.map(async tablesResult => {\r\n                const dropForeignKeySql = `SELECT 'ALTER TABLE \"${database}\".\"' + OBJECT_SCHEMA_NAME(fk.parent_object_id, DB_ID('${database}')) + '\".\"' + OBJECT_NAME(fk.parent_object_id, DB_ID('${database}')) + '\" DROP CONSTRAINT \"' + fk.name + '\"' as query FROM ${database}.sys.foreign_keys AS fk WHERE fk.referenced_object_id = object_id('\"${database}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"')`;\r\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\r\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => {\r\n                    return this.query(dropQuery);\r\n                }));\r\n            }));\r\n            await Promise.all(allTablesResults.map(tablesResult => {\r\n                const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\r\n                return this.query(dropTableSql);\r\n            }));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        this.sqlMemoryMode = true;\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        this.sqlsInMemory = [];\r\n        this.sqlMemoryMode = false;\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): (string|{ up: string, down: string })[] {\r\n        return this.sqlsInMemory;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Escapes given table path.\r\n     */\r\n    protected escapeTablePath(tableOrPath: Table|string, disableEscape?: boolean): string {\r\n        let tablePath;\r\n        if (tableOrPath instanceof Table) {\r\n            const schema = tableOrPath.schema || this.driver.options.schema;\r\n            if (schema) {\r\n                tablePath = `${schema}.${tableOrPath.name}`;\r\n                if (tableOrPath.database)\r\n                    tablePath = `${tableOrPath.database}.${tablePath}`;\r\n            } else {\r\n                tablePath = tableOrPath.name;\r\n                if (tableOrPath.database)\r\n                    tablePath = `${tableOrPath.database}..${tablePath}`;\r\n            }\r\n        } else {\r\n            tablePath = tableOrPath.indexOf(\".\") === -1 && this.driver.options.schema ? this.driver.options.schema + \".\" + tableOrPath : tableOrPath;\r\n        }\r\n\r\n        return tablePath.split(\".\").map(i => {\r\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\r\n            if (i === \"\")\r\n                return i;\r\n            return disableEscape ? i : `\"${i}\"`;\r\n        }).join(\".\");\r\n    }\r\n\r\n    protected parseTablePath(target: Table|string): any {\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        if (tableName.split(\".\").length === 3) {\r\n            return {\r\n                database:  tableName.split(\".\")[0],\r\n                schema:  tableName.split(\".\")[1] === \"\" ? \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\r\n                tableName: tableName.split(\".\")[2]\r\n            };\r\n        } else if (tableName.split(\".\").length === 2) {\r\n            return {\r\n                database:  this.driver.database,\r\n                schema: tableName.split(\".\")[0],\r\n                tableName: tableName.split(\".\")[1]\r\n            };\r\n        } else {\r\n            return {\r\n                database:  this.driver.database,\r\n                schema: this.driver.options.schema ? this.driver.options.schema : \"SCHEMA_NAME()\",\r\n                tableName: tableName\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startFrom: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => {\r\n            return `\"${key}\"` + \"=@\" + (startFrom + index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(tableName: string, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\r\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\r\n        if (column.collation)\r\n            c += \" COLLATE \" + column.collation;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" IDENTITY(1,1)\";\r\n        // if (column.isPrimary === true && !skipPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.comment)\r\n            c += \" COMMENT '\" + column.comment + \"'\";\r\n        if (createDefault) {\r\n            if (column.default !== undefined && column.default !== null) {\r\n                c += ` CONSTRAINT \"df_${tableName}_${column.name}\" DEFAULT ${column.default}`;\r\n            }\r\n        }\r\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default)\r\n            c += \" DEFAULT NEWSEQUENTIALID()\";\r\n        return c;\r\n    }\r\n\r\n\r\n}"],"sourceRoot":"../.."}
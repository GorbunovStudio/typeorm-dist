{"version":3,"sources":["../../src/query-builder/InsertQueryBuilder.ts"],"names":[],"mappings":"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","file":"InsertQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {QueryPartialEntity} from \"./QueryPartialEntity\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class InsertQueryBuilder<Entity> extends QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createInsertExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string): this {\r\n         return this.returning(output);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies INTO which entity's table insertion will be executed.\r\n     */\r\n    into<T>(entityTarget: ObjectType<T>|string, columns?: string[]): InsertQueryBuilder<T> {\r\n        const mainAlias = this.createFromAlias(entityTarget);\r\n        this.expressionMap.setMainAlias(mainAlias);\r\n        this.expressionMap.insertColumns = columns || [];\r\n        return (this as any) as InsertQueryBuilder<T>;\r\n    }\r\n\r\n    /**\r\n     * Values needs to be inserted into table.\r\n     */\r\n    values(values: QueryPartialEntity<Entity>|QueryPartialEntity<Entity>[]): this {\r\n        this.expressionMap.valuesSet = values;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string): this {\r\n        if (this.connection.driver instanceof SqlServerDriver || this.connection.driver instanceof PostgresDriver) {\r\n            this.expressionMap.returning = returning;\r\n            return this;\r\n        } else throw new Error(\"OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL\");\r\n    }\r\n\r\n    /**\r\n     * Adds additional ON CONFLICT statement supported in postgres.\r\n     */\r\n    onConflict(statement: string): this {\r\n        this.expressionMap.onConflict = statement;\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates INSERT express used to perform insert query.\r\n     */\r\n    protected createInsertExpression() { // todo: insertion into custom tables wont work because of binding to columns. fix it\r\n        const valueSets = this.getValueSets();\r\n        let values: string, columnNames: string;\r\n\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const columns = this.expressionMap.mainAlias!.metadata.columns.filter(column => {\r\n                if (!this.expressionMap.insertColumns.length)\r\n                    return !column.isGenerated;\r\n\r\n                return this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\r\n            });\r\n\r\n            // get a table name and all column database names\r\n            columnNames = columns.map(column => this.escape(column.databaseName)).join(\", \");\r\n\r\n            // get values needs to be inserted\r\n            values = valueSets.map((valueSet, insertionIndex) => {\r\n                const columnValues = columns.map(column => {\r\n                    const paramName = \"_inserted_\" + insertionIndex + \"_\" + column.databaseName;\r\n                    const value = this.connection.driver.preparePersistentValue(column.getEntityValue(valueSet), column);\r\n\r\n                    if (value instanceof Function) { // support for SQL expressions in update query\r\n                        return value();\r\n\r\n                    } else if (value === undefined) {\r\n                        if (this.connection.driver instanceof AbstractSqliteDriver) {\r\n                            return \"NULL\";\r\n\r\n                        } else {\r\n                            return \"DEFAULT\";\r\n                        }\r\n\r\n                    } else {\r\n                        if (this.connection.driver instanceof SqlServerDriver) {\r\n                            this.setParameter(paramName, this.connection.driver.parametrizeValue(column, value));\r\n                        } else {\r\n                            this.setParameter(paramName, value);\r\n                        }\r\n                        return \":\" + paramName;\r\n                    }\r\n                });\r\n                return \"(\" + columnValues.join(\",\") + \")\";\r\n            }).join(\", \");\r\n\r\n        } else { // for tables without metadata\r\n\r\n            // get a table name and all column database names\r\n            columnNames = this.expressionMap.insertColumns.join(\", \");\r\n\r\n            // get values needs to be inserted\r\n            values = valueSets.map((valueSet, insertionIndex) => {\r\n                const columnValues = Object.keys(valueSet).map(columnName => {\r\n                    const paramName = \"_inserted_\" + insertionIndex + \"_\" + columnName;\r\n                    const value = valueSet[columnName];\r\n\r\n                    if (value instanceof Function) { // support for SQL expressions in update query\r\n                        return value();\r\n\r\n                    } else if (value === undefined) {\r\n                        if (this.connection.driver instanceof AbstractSqliteDriver) {\r\n                            return \"NULL\";\r\n\r\n                        } else {\r\n                            return \"DEFAULT\";\r\n                        }\r\n\r\n                    } else {\r\n                        this.setParameter(paramName, value);\r\n                        return \":\" + paramName;\r\n                    }\r\n                });\r\n                return \"(\" + columnValues.join(\",\") + \")\";\r\n            }).join(\", \");\r\n        }\r\n\r\n        // generate sql query\r\n        if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof PostgresDriver) {\r\n            return `INSERT INTO ${this.getTableName(this.getMainTableName())}${columnNames ? \"(\" + columnNames + \")\" : \"\"} VALUES ${values}${this.expressionMap.onConflict ? \" ON CONFLICT \" + this.expressionMap.onConflict : \"\"} RETURNING ${this.expressionMap.returning}`;\r\n\r\n        } else if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof SqlServerDriver) {\r\n            return `INSERT INTO ${this.getTableName(this.getMainTableName())}(${columnNames}) OUTPUT ${this.expressionMap.returning} VALUES ${values}`;\r\n\r\n        } else {\r\n            return `INSERT INTO ${this.getTableName(this.getMainTableName())}(${columnNames}) VALUES ${values}${this.expressionMap.onConflict ? \" ON CONFLICT \" + this.expressionMap.onConflict : \"\"}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSets(): ObjectLiteral[] {\r\n        if (this.expressionMap.valuesSet instanceof Array && this.expressionMap.valuesSet.length > 0)\r\n            return this.expressionMap.valuesSet;\r\n\r\n        if (this.expressionMap.valuesSet instanceof Object)\r\n            return [this.expressionMap.valuesSet];\r\n\r\n        throw new Error(`Cannot perform insert query because values are not defined. Call \"qb.values(...)\" method to specify inserted values.`);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\r\nimport {SelectQueryBuilder} from \"./SelectQueryBuilder\";\r\nimport {UpdateQueryBuilder} from \"./UpdateQueryBuilder\";\r\nimport {DeleteQueryBuilder} from \"./DeleteQueryBuilder\";\r\nimport {InsertQueryBuilder} from \"./InsertQueryBuilder\";\r\nimport {RelationQueryBuilder} from \"./RelationQueryBuilder\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {Alias} from \"./Alias\";\r\nimport {Brackets} from \"./Brackets\";\r\nimport {QueryPartialEntity} from \"./QueryPartialEntity\";\r\nimport {WhereExpression} from \"./WhereExpression\";\r\nimport {EntityMetadataUtils} from \"../metadata/EntityMetadataUtils\";\r\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\r\n\r\n// todo: completely cover query builder with tests\r\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\r\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\r\n// todo: fix problem with long aliases eg getMaxIdentifierLength\r\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\r\n// todo: implement joinAlways in relations and relationId\r\n// todo: finish partial selection\r\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\r\n// todo: implement @Select decorator\r\n// todo: add select and map functions\r\n\r\n// todo: implement relation/entity loading and setting them into properties within a separate query\r\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\r\n// .loadAndMap(\"post.categories\", Category, qb => ...)\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport abstract class QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection on which QueryBuilder was created.\r\n     */\r\n    readonly connection: Connection;\r\n\r\n    /**\r\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n     */\r\n    readonly expressionMap: QueryExpressionMap;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Query runner used to execute query builder query.\r\n     */\r\n    protected queryRunner?: QueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\r\n     */\r\n    constructor(queryBuilder: QueryBuilder<any>);\r\n\r\n    /**\r\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\r\n     */\r\n    constructor(connection: Connection, queryRunner?: QueryRunner);\r\n\r\n    /**\r\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\r\n     */\r\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\r\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\r\n            this.connection = connectionOrQueryBuilder.connection;\r\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\r\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\r\n\r\n        } else {\r\n            this.connection = connectionOrQueryBuilder;\r\n            this.queryRunner = queryRunner;\r\n            this.expressionMap = new QueryExpressionMap(this.connection);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Abstract Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    abstract getQuery(): string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the main alias string used in this query builder.\r\n     */\r\n    get alias(): string {\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(`Main alias is not set`); // todo: better exception\r\n\r\n        return this.expressionMap.mainAlias.name;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates SELECT query.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string, selectionAliasName?: string): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection: string[]): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates SELECT query and selects given data.\r\n     * Replaces all previous selections if they exist.\r\n     */\r\n    select(selection?: string|string[], selectionAliasName?: string): SelectQueryBuilder<Entity> {\r\n        this.expressionMap.queryType = \"select\";\r\n        if (selection instanceof Array) {\r\n            this.expressionMap.selects = selection.map(selection => ({ selection: selection }));\r\n        } else if (selection) {\r\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\r\n        }\r\n\r\n        // loading it dynamically because of circular issue\r\n        const SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\r\n        if (this instanceof SelectQueryBuilderCls)\r\n            return this as any;\r\n\r\n        return new SelectQueryBuilderCls(this);\r\n    }\r\n\r\n    /**\r\n     * Creates INSERT query.\r\n     */\r\n    insert(): InsertQueryBuilder<Entity> {\r\n        this.expressionMap.queryType = \"insert\";\r\n\r\n        // loading it dynamically because of circular issue\r\n        const InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\r\n        if (this instanceof InsertQueryBuilderCls)\r\n            return this as any;\r\n\r\n        return new InsertQueryBuilderCls(this);\r\n    }\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(): UpdateQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(updateSet: QueryPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update<T>(entity: ObjectType<T>, updateSet?: QueryPartialEntity<T>): UpdateQueryBuilder<T>;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given entity and applies given update values.\r\n     */\r\n    update(entity: Function|string, updateSet?: QueryPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates UPDATE query for the given table name and applies given update values.\r\n     */\r\n    update(tableName: string, updateSet?: QueryPartialEntity<Entity>): UpdateQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates UPDATE query and applies given update values.\r\n     */\r\n    update(entityOrTableNameUpdateSet?: string|Function|ObjectLiteral, maybeUpdateSet?: ObjectLiteral): UpdateQueryBuilder<any> {\r\n        const updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet as ObjectLiteral|undefined;\r\n\r\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\r\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\r\n            this.expressionMap.setMainAlias(mainAlias);\r\n        }\r\n\r\n        this.expressionMap.queryType = \"update\";\r\n        this.expressionMap.valuesSet = updateSet;\r\n\r\n        // loading it dynamically because of circular issue\r\n        const UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\r\n        if (this instanceof UpdateQueryBuilderCls)\r\n            return this as any;\r\n\r\n        return new UpdateQueryBuilderCls(this);\r\n    }\r\n\r\n    /**\r\n     * Creates DELETE query.\r\n     */\r\n    delete(): DeleteQueryBuilder<Entity> {\r\n        this.expressionMap.queryType = \"delete\";\r\n\r\n        // loading it dynamically because of circular issue\r\n        const DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\r\n        if (this instanceof DeleteQueryBuilderCls)\r\n            return this as any;\r\n\r\n        return new DeleteQueryBuilderCls(this);\r\n    }\r\n\r\n    /**\r\n     * Sets entity's relation with which this query builder gonna work.\r\n     */\r\n    relation(propertyPath: string): RelationQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Sets entity's relation with which this query builder gonna work.\r\n     */\r\n    relation<T>(entityTarget: ObjectType<T>|string, propertyPath: string): RelationQueryBuilder<T>;\r\n\r\n    /**\r\n     * Sets entity's relation with which this query builder gonna work.\r\n     */\r\n    relation(entityTargetOrPropertyPath: Function|string, maybePropertyPath?: string): RelationQueryBuilder<Entity> {\r\n        const entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\r\n        const propertyPath = arguments.length === 2 ? maybePropertyPath as string : entityTargetOrPropertyPath as string;\r\n\r\n        this.expressionMap.queryType = \"relation\";\r\n        this.expressionMap.relationPropertyPath = propertyPath;\r\n\r\n        if (entityTarget) {\r\n            const mainAlias = this.createFromAlias(entityTarget);\r\n            this.expressionMap.setMainAlias(mainAlias);\r\n        }\r\n\r\n        // loading it dynamically because of circular issue\r\n        const RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\r\n        if (this instanceof RelationQueryBuilderCls)\r\n            return this as any;\r\n\r\n        return new RelationQueryBuilderCls(this);\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if given relation exists in the entity.\r\n     * Returns true if relation exists, false otherwise.\r\n     */\r\n    hasRelation<T>(target: ObjectType<T>|string, relation: string): boolean;\r\n\r\n    /**\r\n     * Checks if given relations exist in the entity.\r\n     * Returns true if relation exists, false otherwise.\r\n     */\r\n    hasRelation<T>(target: ObjectType<T>|string, relation: string[]): boolean;\r\n\r\n    /**\r\n     * Checks if given relation or relations exist in the entity.\r\n     * Returns true if relation exists, false otherwise.\r\n     */\r\n    hasRelation<T>(target: ObjectType<T>|string, relation: string|string[]): boolean {\r\n        const entityMetadata = this.connection.getMetadata(target);\r\n        const relations = relation instanceof Array ? relation : [relation];\r\n        return relations.every(relation => {\r\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets parameter name and its value.\r\n     */\r\n    setParameter(key: string, value: any): this {\r\n        this.expressionMap.parameters[key] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all parameters from the given object.\r\n     */\r\n    setParameters(parameters: ObjectLiteral): this {\r\n\r\n        // set parent query builder parameters as well in sub-query mode\r\n        if (this.expressionMap.parentQueryBuilder)\r\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\r\n\r\n        Object.keys(parameters).forEach(key => {\r\n            this.expressionMap.parameters[key] = parameters[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets all parameters.\r\n     */\r\n    getParameters(): ObjectLiteral {\r\n        const parameters: ObjectLiteral = Object.assign({}, this.expressionMap.parameters);\r\n\r\n        // add discriminator column parameter if it exist\r\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const values = metadata.childEntityMetadatas\r\n                    .filter(childMetadata => childMetadata.discriminatorColumn)\r\n                    .map(childMetadata => childMetadata.discriminatorValue);\r\n                values.push(metadata.discriminatorValue);\r\n                parameters[\"discriminatorColumnValues\"] = values;\r\n            }\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    /**\r\n     * Gets generated sql that will be executed.\r\n     * Parameters in the query are escaped for the currently used driver.\r\n     */\r\n    getSql(): string {\r\n        return this.connection.driver.escapeQueryWithParameters(this.getQuery(), this.getParameters())[0];\r\n    }\r\n\r\n    /**\r\n     * Prints sql to stdout using console.log.\r\n     */\r\n    printSql(): this {\r\n        console.log(this.getSql());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets query to be executed with all parameters used in it.\r\n     */\r\n    getQueryAndParameters(): [string, any[]] {\r\n        return this.connection.driver.escapeQueryWithParameters(this.getQuery(), this.getParameters());\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<any> {\r\n        const [sql, parameters] = this.getQueryAndParameters();\r\n        const queryRunner = this.obtainQueryRunner();\r\n        try {\r\n            return await queryRunner.query(sql, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\r\n                await queryRunner.release();\r\n            }\r\n            if (this.connection.driver instanceof SqljsDriver) {\r\n                await this.connection.driver.autoSave();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a completely new query builder.\r\n     * Uses same query runner as current QueryBuilder.\r\n     */\r\n    createQueryBuilder(): this {\r\n        return new (this.constructor as any)(this.connection, this.queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Clones query builder as it is.\r\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\r\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\r\n     * where queryBuilder is cloned QueryBuilder.\r\n     */\r\n    clone(): this {\r\n        return new (this.constructor as any)(this);\r\n    }\r\n\r\n    /**\r\n     * Disables escaping.\r\n     */\r\n    disableEscaping(): this {\r\n        this.expressionMap.disableEscaping = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Escapes table name, column name or alias name using current database's escaping character.\r\n     */\r\n    escape(name: string): string {\r\n        if (!this.expressionMap.disableEscaping)\r\n            return name;\r\n        return this.connection.driver.escape(name);\r\n    }\r\n\r\n    /**\r\n     * Sets or overrides query builder's QueryRunner.\r\n     */\r\n    setQueryRunner(queryRunner: QueryRunner): this {\r\n        this.queryRunner = queryRunner;\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets escaped table name with schema name if SqlServer driver used with custom\r\n     * schema name, otherwise returns escaped table name.\r\n     */\r\n    protected getTableName(tablePath: string): string {\r\n        // let tablePath = tableName;\r\n        // const driver = this.connection.driver;\r\n        // const schema = (driver.options as SqlServerConnectionOptions|PostgresConnectionOptions).schema;\r\n        // const metadata = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName) : undefined;\r\n\r\n        /*if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof MysqlDriver) {\r\n            if (metadata) {\r\n                if (metadata.schema) {\r\n                    tablePath = `${metadata.schema}.${tableName}`;\r\n                } else if (schema) {\r\n                    tablePath = `${schema}.${tableName}`;\r\n                }\r\n\r\n                if (metadata.database && !(driver instanceof PostgresDriver)) {\r\n                    if (!schema && !metadata.schema && driver instanceof SqlServerDriver) {\r\n                        tablePath = `${metadata.database}..${tablePath}`;\r\n                    } else {\r\n                        tablePath = `${metadata.database}.${tablePath}`;\r\n                    }\r\n                }\r\n\r\n            } else if (schema) {\r\n                tablePath = `${schema!}.${tableName}`;\r\n            }\r\n        }*/\r\n        return tablePath.split(\".\")\r\n            .map(i => {\r\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\r\n                if (i === \"\")\r\n                    return i;\r\n                return this.escape(i);\r\n            }).join(\".\");\r\n    }\r\n\r\n    /**\r\n     * Gets name of the table where insert should be performed.\r\n     */\r\n    protected getMainTableName(): string {\r\n        if (!this.expressionMap.mainAlias)\r\n            throw new Error(`Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`);\r\n\r\n        if (this.expressionMap.mainAlias.hasMetadata)\r\n            return this.expressionMap.mainAlias.metadata.tablePath;\r\n\r\n        return this.expressionMap.mainAlias.tablePath!;\r\n    }\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    protected createFromAlias(entityTarget: Function|string|((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName?: string): Alias {\r\n\r\n        // if table has a metadata then find it to properly escape its properties\r\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\r\n        if (this.connection.hasMetadata(entityTarget)) {\r\n            const metadata = this.connection.getMetadata(entityTarget);\r\n\r\n            return this.expressionMap.createAlias({\r\n                type: \"from\",\r\n                name: aliasName,\r\n                metadata: this.connection.getMetadata(entityTarget),\r\n                tablePath: metadata.tablePath\r\n            });\r\n\r\n        } else {\r\n            let subQuery: string = \"\";\r\n            if (entityTarget instanceof Function) {\r\n                const subQueryBuilder: SelectQueryBuilder<any> = (entityTarget as any)(((this as any) as SelectQueryBuilder<any>).subQuery());\r\n                this.setParameters(subQueryBuilder.getParameters());\r\n                subQuery = subQueryBuilder.getQuery();\r\n\r\n            } else {\r\n                subQuery = entityTarget;\r\n            }\r\n            const isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\r\n            return this.expressionMap.createAlias({\r\n                type: \"from\",\r\n                name: aliasName,\r\n                tablePath: isSubQuery === false ? entityTarget as string : undefined,\r\n                subQuery: isSubQuery === true ? subQuery : undefined,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces all entity's propertyName to name in the given statement.\r\n     */\r\n    protected replacePropertyNames(statement: string) {\r\n        this.expressionMap.aliases.forEach(alias => {\r\n            if (!alias.hasMetadata) return;\r\n            const replaceAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? alias.name + \"\\\\.\" : \"\";\r\n            const replacementAliasNamePrefix = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(alias.name) + \".\" : \"\";\r\n            alias.metadata.columns.forEach(column => {\r\n                const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(column.databaseName) + \"$2\");\r\n                const expression2 = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\r\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(column.databaseName) + \"$2\");\r\n            });\r\n            alias.metadata.relations.forEach(relation => {\r\n                [...relation.joinColumns, ...relation.inverseJoinColumns].forEach(joinColumn => {\r\n                    const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn!.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                });\r\n                if (relation.joinColumns.length > 0) {\r\n                    const expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\r\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\r\n                }\r\n            });\r\n        });\r\n        return statement;\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression.\r\n     */\r\n    protected createWhereExpression() {\r\n        const conditions = this.createWhereExpressionString();\r\n\r\n        if (this.expressionMap.mainAlias!.hasMetadata) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\r\n                const condition = `${this.replacePropertyNames(this.expressionMap.mainAlias!.name + \".\" + metadata.discriminatorColumn.databaseName)} IN (:discriminatorColumnValues)`;\r\n                return ` WHERE ${ conditions.length ? \"(\" + conditions + \") AND\" : \"\" } ${condition}`;\r\n            }\r\n        }\r\n\r\n        if (!conditions.length) // TODO copy in to discriminator condition\r\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\r\n\r\n        if (this.expressionMap.extraAppendedAndWhereCondition)\r\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\r\n\r\n        return \" WHERE \" + conditions;\r\n    }\r\n\r\n    /**\r\n     * Concatenates all added where expressions into one string.\r\n     */\r\n    protected createWhereExpressionString(): string {\r\n        return this.expressionMap.wheres.map((where, index) => {\r\n            switch (where.type) {\r\n                case \"and\":\r\n                    return (index > 0 ? \"AND \" : \"\") + this.replacePropertyNames(where.condition);\r\n                case \"or\":\r\n                    return (index > 0 ? \"OR \" : \"\") + this.replacePropertyNames(where.condition);\r\n                default:\r\n                    return this.replacePropertyNames(where.condition);\r\n            }\r\n        }).join(\" \");\r\n    }\r\n\r\n    /**\r\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\r\n     */\r\n    protected createWhereIdsExpression(ids: any[]): [string, ObjectLiteral] {\r\n        const metadata = this.expressionMap.mainAlias!.metadata;\r\n\r\n        // create shortcuts for better readability\r\n        const alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias!.name) + \".\" : \"\";\r\n        const parameters: ObjectLiteral = {};\r\n        const whereStrings = ids.map((id, index) => {\r\n            id = id instanceof Object ? id : metadata.createEntityIdMap(id);\r\n            const whereSubStrings: string[] = [];\r\n            metadata.primaryColumns.forEach((primaryColumn, secondIndex) => {\r\n                whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\r\n                parameters[\"id_\" + index + \"_\" + secondIndex] = primaryColumn.getEntityValue(id);\r\n            });\r\n            metadata.parentIdColumns.forEach((parentIdColumn, secondIndex) => {\r\n                whereSubStrings.push(alias + this.escape(parentIdColumn.databaseName) + \"=:parentId_\" + index + \"_\" + secondIndex);\r\n                parameters[\"parentId_\" + index + \"_\" + secondIndex] = parentIdColumn.getEntityValue(id);\r\n            });\r\n            return whereSubStrings.join(\" AND \");\r\n        });\r\n\r\n        const whereString = whereStrings.length > 1 ? \"(\" + whereStrings.join(\" OR \") + \")\" : whereStrings[0];\r\n        return [whereString, parameters];\r\n    }\r\n\r\n    /**\r\n     * Computes given where argument - transforms to a where string all forms it can take.\r\n     */\r\n    protected computeWhereParameter(where: string|((qb: this) => string)|Brackets|ObjectLiteral) {\r\n        if (typeof where === \"string\")\r\n            return where;\r\n\r\n        if (where instanceof Brackets) {\r\n            const whereQueryBuilder = this.createQueryBuilder();\r\n            where.whereFactory(whereQueryBuilder as any);\r\n            const whereString = whereQueryBuilder.createWhereExpressionString();\r\n            this.setParameters(whereQueryBuilder.getParameters());\r\n            return whereString ? \"(\" + whereString + \")\" : \"\";\r\n\r\n        } else if (where instanceof Function) {\r\n            return where(this);\r\n\r\n        } else if (where instanceof Object) {\r\n            if (this.expressionMap.mainAlias!.metadata) {\r\n                const propertyPaths = EntityMetadataUtils.createPropertyPath(this.expressionMap.mainAlias!.metadata, where);\r\n                propertyPaths.forEach((propertyPath, propertyIndex) => {\r\n                    const columns = this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(propertyPath);\r\n                    columns.forEach((column, columnIndex) => {\r\n\r\n                        let parameterValue = column.getEntityValue(where);\r\n                        const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${propertyPath}` : column.propertyPath;\r\n                        if (parameterValue === null) {\r\n                            ((this as any) as WhereExpression).andWhere(`${aliasPath} IS NULL`);\r\n\r\n                        } else {\r\n                            const parameterName = \"where_\" + propertyIndex + \"_\" + columnIndex;\r\n                            ((this as any) as WhereExpression).andWhere(`${aliasPath}=:${parameterName}`);\r\n                            this.setParameter(parameterName, parameterValue);\r\n                        }\r\n                    });\r\n                });\r\n\r\n            } else {\r\n                Object.keys(where).forEach((key, index) => {\r\n                    const parameterValue = (where as ObjectLiteral)[key];\r\n                    const aliasPath = this.expressionMap.aliasNamePrefixingEnabled ? `${this.alias}.${key}` : key;\r\n                    if (parameterValue === null) {\r\n                        ((this as any) as WhereExpression).andWhere(`${aliasPath} IS NULL`);\r\n\r\n                    } else {\r\n                        const parameterName = \"where_\" + index;\r\n                        ((this as any) as WhereExpression).andWhere(`${aliasPath}=:${parameterName}`);\r\n                        this.setParameter(parameterName, parameterValue);\r\n                    }\r\n                });\r\n\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to execute sql queries inside this query builder.\r\n     */\r\n    protected obtainQueryRunner() {\r\n        return this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}
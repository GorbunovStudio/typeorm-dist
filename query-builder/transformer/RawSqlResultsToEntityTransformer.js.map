{"version":3,"sources":["../../src/query-builder/transformer/RawSqlResultsToEntityTransformer.ts"],"names":[],"mappings":"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","file":"RawSqlResultsToEntityTransformer.js","sourcesContent":["import {Driver} from \"../../driver/Driver\";\r\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Alias} from \"../Alias\";\r\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\n\r\n/**\r\n * Transforms raw sql results returned from the database into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class RawSqlResultsToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected expressionMap: QueryExpressionMap,\r\n                protected driver: Driver,\r\n                protected rawRelationIdResults: RelationIdLoadResult[],\r\n                protected rawRelationCountResults: RelationCountLoadResult[]) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    transform(rawResults: any[], alias: Alias): any[] {\r\n        const group = this.group(rawResults, alias);\r\n        const entities: any[] = [];\r\n        group.forEach(results => {\r\n            const entity = this.transformRawResultsGroup(results, alias);\r\n            if (entity !== undefined)\r\n                entities.push(entity);\r\n        });\r\n        return entities;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Groups given raw results by ids of given alias.\r\n     */\r\n    protected group(rawResults: any[], alias: Alias): Map<string, any[]> {\r\n        const map = new Map();\r\n        const keys = alias.metadata.primaryColumns.map(column => alias.name + \"_\" + column.databaseName);\r\n        rawResults.forEach(rawResult => {\r\n            const id = keys.map(key => rawResult[key]).join(\"_\"); // todo: check partial\r\n            if (!id) return;\r\n\r\n            const items = map.get(id);\r\n            if (!items) {\r\n                map.set(id, [rawResult]);\r\n            } else {\r\n                items.push(rawResult);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Transforms set of data results into single entity.\r\n     */\r\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\r\n        let hasColumns = false, hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false, hasRelations = false, hasRelationIds = false, hasRelationCounts = false;\r\n        let entity: any = alias.metadata.create();\r\n\r\n        if (alias.metadata.discriminatorColumn) {\r\n            const discriminatorValues = rawResults.map(result => result[alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName]);\r\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => {\r\n                return !!discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue);\r\n            });\r\n            if (metadata)\r\n                entity = metadata.create();\r\n        }\r\n\r\n        // get value from columns selections and put them into newly created entity\r\n        hasColumns = this.transformColumns(rawResults, alias, entity, alias.metadata);\r\n\r\n        hasRelations = this.transformJoins(rawResults, entity, alias);\r\n        hasRelationIds = this.transformRelationIds(rawResults, alias, entity);\r\n        hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\r\n\r\n        // this.removeVirtualColumns(entity, alias);\r\n\r\n        return (hasColumns || hasEmbeddedColumns || hasParentColumns || hasParentEmbeddedColumns || hasRelations || hasRelationIds || hasRelationCounts) ? entity : undefined;\r\n    }\r\n\r\n    // get value from columns selections and put them into object\r\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\r\n        let hasData = false;\r\n        metadata.columns.forEach(column => {\r\n            const value = rawResults[0][alias.name + \"_\" + column.databaseName];\r\n            if (value === undefined || column.isVirtual || column.isParentId || column.isDiscriminator)\r\n                return;\r\n\r\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\r\n            // then we don't add this column and its value into the entity\r\n            if (!this.expressionMap.selects.find(select => select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyName))\r\n                return;\r\n\r\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\r\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\r\n                hasData = true;\r\n        });\r\n\r\n        if (alias.metadata.parentEntityMetadata) {\r\n            alias.metadata.parentEntityMetadata.columns.forEach(column => {\r\n                const value = rawResults[0][\"parentIdColumn_\" + alias.metadata.parentEntityMetadata.tableName + \"_\" + column.databaseName];\r\n                if (value === undefined || column.isVirtual || column.isParentId || column.isDiscriminator)\r\n                    return;\r\n\r\n                column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\r\n                if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\r\n                    hasData = true;\r\n            });\r\n        }\r\n        return hasData;\r\n    }\r\n\r\n    /**\r\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\r\n     */\r\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias) {\r\n        let hasData = false;\r\n        let discriminatorValue: string = \"\";\r\n\r\n        if (alias.metadata.discriminatorColumn)\r\n            discriminatorValue = rawResults[0][alias.name + \"_\" + alias.metadata.discriminatorColumn!.databaseName];\r\n\r\n        this.expressionMap.joinAttributes.forEach(join => { // todo: we have problem here - when inner joins are used without selects it still create empty array\r\n\r\n            // skip joins without metadata\r\n            if (!join.metadata)\r\n                return;\r\n\r\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used.\r\n            const metadata = alias.metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\r\n            if (metadata && join.relation && metadata.target !== join.relation.target)\r\n                return;\r\n\r\n            // some checks to make sure this join is for current alias\r\n            if (join.mapToProperty) {\r\n                if (join.mapToPropertyParentAlias !== alias.name)\r\n                    return;\r\n            } else {\r\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\r\n                    return;\r\n            }\r\n\r\n            // transform joined data into entities\r\n            const mappedEntities = this.transform(rawResults, join.alias);\r\n            const result = !join.isMany ? mappedEntities[0] : mappedEntities;\r\n            if (!result) // if nothing was joined then simply return\r\n                return;\r\n\r\n            // if join was mapped to some property then save result to that property\r\n            if (join.mapToPropertyPropertyName) {\r\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\r\n\r\n            } else { // otherwise set to relation\r\n                join.relation!.setEntityValue(entity, result);\r\n            }\r\n\r\n            hasData = true;\r\n        });\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\r\n        let hasData = false;\r\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\r\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\r\n                return;\r\n\r\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\r\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\r\n            if (valueMap === undefined || valueMap === null)\r\n                return;\r\n\r\n            const idMaps = rawRelationIdResult.results.map(result => {\r\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\r\n                if (!alias.metadata.compareIds(entityPrimaryIds, valueMap))\r\n                    return;\r\n\r\n                let columns: ColumnMetadata[];\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n                } else { // ManyToMany\r\n                    if (relation.isOwning) {\r\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\r\n                    } else {\r\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n                    }\r\n                }\r\n\r\n                // const idMapColumns = (relation.isOneToMany || relation.isOneToOneNotOwner) ? columns : columns.map(column => column.referencedColumn!);\r\n                // const idMap = idMapColumns.reduce((idMap, column) => {\r\n                //     return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\r\n                // }, {} as ObjectLiteral); // need to create reusable function for this process\r\n\r\n                const idMap = columns.reduce((idMap, column) => {\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(result[column.databaseName]));\r\n                    } else {\r\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(result[column.databaseName]));\r\n                    }\r\n                }, {} as ObjectLiteral);\r\n\r\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        return columns[0].getEntityValue(idMap);\r\n                    } else {\r\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\r\n                    }\r\n                }\r\n                return idMap;\r\n            }).filter(result => result);\r\n\r\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\r\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\r\n\r\n                const property = properties.shift();\r\n                if (property && properties.length === 0) {\r\n                    map[property] = value;\r\n                    return map;\r\n                } else if (property && properties.length > 0) {\r\n                    mapToProperty(properties, map[property], value);\r\n                } else {\r\n                    return map;\r\n                }\r\n            };\r\n            if (relation.isOneToOne || relation.isManyToOne) {\r\n                if (idMaps[0] !== undefined) {\r\n                    mapToProperty(properties, entity, idMaps[0]);\r\n                    hasData = true;\r\n                }\r\n            } else {\r\n                mapToProperty(properties, entity, idMaps);\r\n                if (idMaps.length > 0) {\r\n                    hasData = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\r\n        let hasData = false;\r\n        this.rawRelationCountResults\r\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\r\n            .forEach(rawRelationCountResult => {\r\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\r\n                let referenceColumnName: string;\r\n\r\n                if (relation.isOneToMany) {\r\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\r\n\r\n                } else {\r\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\r\n                }\r\n\r\n                const referenceColumnValue = rawSqlResults[0][alias.name + \"_\" + referenceColumnName]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\r\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\r\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\r\n                    rawRelationCountResult.results\r\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\r\n                        .forEach(result => {\r\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\r\n                            hasData = true;\r\n                        });\r\n                }\r\n            });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((valueMap, column) => {\r\n            rawSqlResults.forEach(rawSqlResult => {\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    valueMap[column.databaseName] = rawSqlResult[parentAlias + \"_\" + column.databaseName];\r\n                } else {\r\n                    valueMap[column.databaseName] =  rawSqlResult[parentAlias + \"_\" + column.referencedColumn!.databaseName];\r\n                }\r\n            });\r\n            return valueMap;\r\n        }, {} as ObjectLiteral);\r\n\r\n    }\r\n\r\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((data, column) => {\r\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\r\n            return data;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n    /*private removeVirtualColumns(entity: ObjectLiteral, alias: Alias) {\r\n        const virtualColumns = this.expressionMap.selects\r\n            .filter(select => select.virtual)\r\n            .map(select => select.selection.replace(alias.name + \".\", \"\"));\r\n\r\n        virtualColumns.forEach(virtualColumn => delete entity[virtualColumn]);\r\n    }*/\r\n\r\n}"],"sourceRoot":"../.."}
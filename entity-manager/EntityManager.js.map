{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {SaveOptions} from \"../repository/SaveOptions\";\r\nimport {NoNeedToReleaseEntityManagerError} from \"../error/NoNeedToReleaseEntityManagerError\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {SubjectBuilder} from \"../persistence/SubjectBuilder\";\r\nimport {SubjectOperationExecutor} from \"../persistence/SubjectOperationExecutor\";\r\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\r\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\r\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../error/CustomRepositoryCannotInheritRepositoryError\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {RepositoryNotFoundError} from \"../error/RepositoryNotFoundError\";\r\nimport {RepositoryNotTreeError} from \"../error/RepositoryNotTreeError\";\r\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\r\nimport {TreeRepositoryNotSupportedError} from \"../error/TreeRepositoryNotSupportedError\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {QueryPartialEntity} from \"../query-builder/QueryPartialEntity\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n */\r\nexport class EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this entity manager.\r\n     */\r\n    readonly connection: Connection;\r\n\r\n    /**\r\n     * Custom query runner to be used for operations in this entity manager.\r\n     * Used only in non-global entity manager.\r\n     */\r\n    readonly queryRunner?: QueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Once created and then reused by en repositories.\r\n     */\r\n    protected repositories: Repository<any>[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\r\n        this.connection = connection;\r\n        if (queryRunner) {\r\n            this.queryRunner = queryRunner;\r\n            // dynamic: this.queryRunner = manager;\r\n            Object.assign(this.queryRunner, { manager: this });\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction<T>(runInTransaction: (entityManger: EntityManager) => Promise<T>): Promise<T> {\r\n\r\n        if (this.connection.driver instanceof MongoDriver)\r\n            throw new Error(`Transactions aren't supported by MongoDB.`);\r\n\r\n        if (this.queryRunner && this.queryRunner.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        if (this.queryRunner && this.queryRunner.isTransactionActive)\r\n            throw new Error(`Cannot start transaction because its already started`);\r\n\r\n        const usedQueryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n        const transactionEntityManager = this.connection.createEntityManager(usedQueryRunner);\r\n\r\n        try {\r\n            await usedQueryRunner.startTransaction();\r\n            const result = await runInTransaction(transactionEntityManager);\r\n            await usedQueryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await usedQueryRunner.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw err;\r\n\r\n        } finally {\r\n            if (!this.queryRunner) // if we used a new query runner provider then release it\r\n                await usedQueryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        return this.connection.query(query, parameters, this.queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\r\n        if (alias) {\r\n            return this.connection.createQueryBuilder(entityClass as Function|string, alias, queryRunner || this.queryRunner);\r\n\r\n        } else {\r\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || this.queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     */\r\n    hasId(entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity of given schema name has an id.\r\n     */\r\n    hasId(target: Function|string, entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity has an id by its Function type or schema name.\r\n     */\r\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(target: Function|string, entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.getEntityIdMixedMap(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n\r\n        if (!plainObjectOrObjects)\r\n            return metadata.create();\r\n\r\n        if (plainObjectOrObjects instanceof Array)\r\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\r\n\r\n        return this.merge(entityClass, metadata.create(), plainObjectOrObjects);\r\n    }\r\n\r\n    /**\r\n     * Merges two entities into one new entity.\r\n     */\r\n    merge<Entity>(entityClass: ObjectType<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception if entity manager is released\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\r\n        entityLikes.forEach(object => plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     */\r\n    async preload<Entity>(entityClass: ObjectType<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\r\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\r\n        if (transformedEntity)\r\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|string, entity: T, options?: SaveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|string, entities: T[], options?: SaveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|ObjectType<Entity>|string, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\r\n\r\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\r\n\r\n        // if user passed empty array of entities then we don't need to do anything\r\n        if (entity instanceof Array && entity.length === 0)\r\n            return Promise.resolve(entity);\r\n\r\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n\r\n            // todo: use transaction instead if possible\r\n            // await this.transaction(async transactionEntityManager => {\r\n            //     if (options && options.data)\r\n            //         transactionEntityManager.data = options.data;\r\n            //\r\n            // });\r\n\r\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n            const transactionEntityManager = this.connection.createEntityManager(queryRunner);\r\n            if (options && options.data)\r\n                Object.assign(queryRunner.data, options.data);\r\n\r\n            try {\r\n                const executors: SubjectOperationExecutor[] = [];\r\n                if (entity instanceof Array) {\r\n                    await Promise.all(entity.map(async entity => {\r\n                        const entityTarget = target ? target : entity.constructor;\r\n                        const metadata = this.connection.getMetadata(entityTarget);\r\n\r\n                        const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\r\n                        await databaseEntityLoader.persist(entity, metadata);\r\n\r\n                        const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\r\n                        executors.push(executor);\r\n                    }));\r\n\r\n                } else {\r\n                    const finalTarget = target ? target : entity.constructor;\r\n                    const metadata = this.connection.getMetadata(finalTarget);\r\n\r\n                    const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\r\n                    await databaseEntityLoader.persist(entity, metadata);\r\n\r\n                    const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\r\n                    executors.push(executor);\r\n                }\r\n\r\n                const executorsNeedsToBeExecuted = executors.filter(executor => executor.areExecutableOperations());\r\n                if (executorsNeedsToBeExecuted.length) {\r\n\r\n                    // start execute queries in a transaction\r\n                    // if transaction is already opened in this query runner then we don't touch it\r\n                    // if its not opened yet then we open it here, and once we finish - we close it\r\n                    let isTransactionStartedByItself = false;\r\n                    try {\r\n\r\n                        // open transaction if its not opened yet\r\n                        if (!queryRunner.isTransactionActive) {\r\n                            isTransactionStartedByItself = true;\r\n                            await queryRunner.startTransaction();\r\n                        }\r\n\r\n                        await Promise.all(executorsNeedsToBeExecuted.map(executor => {\r\n                            return executor.execute();\r\n                        }));\r\n\r\n                        // commit transaction if it was started by us\r\n                        if (isTransactionStartedByItself === true)\r\n                            await queryRunner.commitTransaction();\r\n\r\n                    } catch (error) {\r\n\r\n                        // rollback transaction if it was started by us\r\n                        if (isTransactionStartedByItself) {\r\n                            try {\r\n                                await queryRunner.rollbackTransaction();\r\n                            } catch (rollbackError) { }\r\n                        }\r\n\r\n                        throw error;\r\n                    }\r\n                }\r\n\r\n            } finally {\r\n                if (!this.queryRunner) // release it only if its created by this method\r\n                    await queryRunner.release();\r\n            }\r\n\r\n            return entity;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Does not modify source entity and does not execute listeners and subscribers.\r\n     * Executes fast and efficient INSERT query.\r\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\r\n     * You can execute bulk inserts using this method.\r\n     */\r\n    async insert<Entity>(target: ObjectType<Entity>|string, entity: QueryPartialEntity<Entity>|QueryPartialEntity<Entity>[], options?: SaveOptions): Promise<void> {\r\n        // todo: in the future create InsertResult with query result information\r\n        // todo: think if subscribers and listeners can be executed here as well\r\n\r\n        await this.createQueryBuilder()\r\n            .insert()\r\n            .into(target)\r\n            .values(entity)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Does not modify source entity and does not execute listeners and subscribers.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async update<Entity>(target: ObjectType<Entity>|string, conditions: Partial<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        // todo: in the future create UpdateResult with query result information\r\n        // todo: think if subscribers and listeners can be executed here as well\r\n\r\n        await this.createQueryBuilder()\r\n            .update(target)\r\n            .set(partialEntity)\r\n            .where(conditions)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity will be found by a given id.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Does not modify source entity and does not execute listeners and subscribers.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async updateById<Entity>(target: ObjectType<Entity>|string, id: any|any[], partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<void> {\r\n        // todo: in the future create UpdateResult with query result information\r\n        // todo: think if subscribers and listeners can be executed here as well\r\n\r\n        await this.createQueryBuilder()\r\n            .update(target)\r\n            .set(partialEntity)\r\n            .whereInIds(id)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\r\n\r\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\r\n\r\n        // if user passed empty array of entities then we don't need to do anything\r\n        if (entity instanceof Array && entity.length === 0)\r\n            return Promise.resolve(entity);\r\n\r\n        return Promise.resolve().then(async () => { // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded properties are resolved.\r\n\r\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n            const transactionEntityManager = this.connection.createEntityManager(queryRunner);\r\n            if (options && options.data)\r\n                Object.assign(queryRunner.data, options.data);\r\n\r\n            try {\r\n                const executors: SubjectOperationExecutor[] = [];\r\n                if (entity instanceof Array) {\r\n                    await Promise.all(entity.map(async entity => {\r\n                        const entityTarget = target ? target : entity.constructor;\r\n                        const metadata = this.connection.getMetadata(entityTarget);\r\n\r\n                        const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\r\n                        await databaseEntityLoader.remove(entity, metadata);\r\n\r\n                        const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\r\n                        executors.push(executor);\r\n                    }));\r\n\r\n                } else {\r\n                    const finalTarget = target ? target : entity.constructor;\r\n                    const metadata = this.connection.getMetadata(finalTarget);\r\n\r\n                    const databaseEntityLoader = new SubjectBuilder(this.connection, queryRunner);\r\n                    await databaseEntityLoader.remove(entity, metadata);\r\n\r\n                    const executor = new SubjectOperationExecutor(this.connection, transactionEntityManager, queryRunner, databaseEntityLoader.operateSubjects);\r\n                    executors.push(executor);\r\n                }\r\n\r\n                const executorsNeedsToBeExecuted = executors.filter(executor => executor.areExecutableOperations());\r\n                if (executorsNeedsToBeExecuted.length) {\r\n\r\n                    // start execute queries in a transaction\r\n                    // if transaction is already opened in this query runner then we don't touch it\r\n                    // if its not opened yet then we open it here, and once we finish - we close it\r\n                    let isTransactionStartedByItself = false;\r\n                    try {\r\n\r\n                        // open transaction if its not opened yet\r\n                        if (!queryRunner.isTransactionActive) {\r\n                            isTransactionStartedByItself = true;\r\n                            await queryRunner.startTransaction();\r\n                        }\r\n\r\n                        await Promise.all(executorsNeedsToBeExecuted.map(executor => {\r\n                            return executor.execute();\r\n                        }));\r\n\r\n                        // commit transaction if it was started by us\r\n                        if (isTransactionStartedByItself === true)\r\n                            await queryRunner.commitTransaction();\r\n\r\n                    } catch (error) {\r\n\r\n                        // rollback transaction if it was started by us\r\n                        if (isTransactionStartedByItself) {\r\n                            try {\r\n                                await queryRunner.rollbackTransaction();\r\n                            } catch (rollbackError) { }\r\n                        }\r\n\r\n                        throw error;\r\n                    }\r\n                }\r\n\r\n            } finally {\r\n                if (!this.queryRunner) // release it only if its created by this method\r\n                    await queryRunner.release();\r\n            }\r\n\r\n            return entity;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Does not modify source entity and does not execute listeners and subscribers.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async delete<Entity>(targetOrEntity: ObjectType<Entity>|string, conditions: Partial<Entity>, options?: RemoveOptions): Promise<void> {\r\n        // todo: in the future create DeleteResult with query result information\r\n        // todo: think if subscribers and listeners can be executed here as well\r\n\r\n        await this.createQueryBuilder()\r\n            .delete()\r\n            .from(targetOrEntity)\r\n            .where(conditions)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given entity id or ids.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Does not modify source entity and does not execute listeners and subscribers.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    async deleteById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any|any[], options?: RemoveOptions): Promise<void> {\r\n        // todo: in the future create DeleteResult with query result information\r\n        // todo: think if subscribers and listeners can be executed here as well\r\n\r\n        await this.createQueryBuilder()\r\n            .delete()\r\n            .from(targetOrEntity)\r\n            .whereInIds(id)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Deletes entity by a given entity id.\r\n     *\r\n     * @deprecated use deleteById method instead.\r\n     */\r\n    async removeById<Entity>(targetOrEntity: ObjectType<Entity>|string, id: any, options?: RemoveOptions): Promise<void> {\r\n        return this.deleteById(targetOrEntity, id, options);\r\n    }\r\n\r\n    /**\r\n     * Deletes entity by a given entity ids.\r\n     *\r\n     * @deprecated use deleteById method instead.\r\n     */\r\n    async removeByIds<Entity>(targetOrEntity: ObjectType<Entity>|string, ids: any[], options?: RemoveOptions): Promise<void> {\r\n        return this.deleteById(targetOrEntity, ids, options);\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     * Useful for pagination.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     * Useful for pagination.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     * Useful for pagination.\r\n     */\r\n    async count<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<number> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        this.joinEagerRelations(qb, qb.alias, metadata);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options and conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[Entity[], number]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        this.joinEagerRelations(qb, qb.alias, metadata);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], conditions?: Partial<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findByIds<Entity>(entityClass: ObjectType<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\r\n\r\n        // if no ids passed, no need to execute a query - just return an empty array of values\r\n        if (!ids.length)\r\n            return Promise.resolve([]);\r\n\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\r\n\r\n        ids = ids.map(id => {\r\n            if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n                return metadata.createEntityIdMap([id]);\r\n            }\r\n            return id;\r\n        });\r\n        this.joinEagerRelations(qb, qb.alias, metadata);\r\n        return qb.andWhereInIds(ids).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|string, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    async findOne<Entity>(entityClass: ObjectType<Entity>|string, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\r\n        this.joinEagerRelations(qb, qb.alias, metadata);\r\n        return FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getOne();\r\n    }\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, conditions?: Partial<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds entity with given id.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findOneById<Entity>(entityClass: ObjectType<Entity>|string, id: any, optionsOrConditions?: FindOneOptions<Entity>|Partial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindOneOptionsAlias(optionsOrConditions) || metadata.name);\r\n        if (metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n            // const columnNames = this.metadata.getEntityIdMap({  });\r\n            throw new Error(`You have multiple primary keys in your entity, to use findOneById with multiple primary keys please provide ` +\r\n                `complete object with all entity ids, like this: { firstKey: value, secondKey: value }`);\r\n        }\r\n\r\n        if (!metadata.hasMultiplePrimaryKeys && !(id instanceof Object)) {\r\n            id = metadata.createEntityIdMap([id]);\r\n        }\r\n\r\n        this.joinEagerRelations(qb, qb.alias, metadata);\r\n        FindOptionsUtils.applyFindOneOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\r\n        return qb.andWhereInIds([id]).getOne();\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table (truncates/drops it).\r\n     *\r\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\r\n     * @see https://stackoverflow.com/a/5972738/925151\r\n     */\r\n    async clear<Entity>(entityClass: ObjectType<Entity>|string): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n        try {\r\n            return await queryRunner.truncate(metadata.tablePath); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (!this.queryRunner)\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(target: ObjectType<Entity>|string): Repository<Entity> {\r\n\r\n        // throw exception if there is no repository with this target registered\r\n        if (!this.connection.hasMetadata(target))\r\n            throw new RepositoryNotFoundError(this.connection.name, target);\r\n\r\n        // find already created repository instance and return it if found\r\n        const metadata = this.connection.getMetadata(target);\r\n        const repository = this.repositories.find(repository => repository.metadata === metadata);\r\n        if (repository)\r\n            return repository;\r\n\r\n        // if repository was not found then create it, store its instance and return it\r\n        const newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\r\n        this.repositories.push(newRepository);\r\n        return newRepository;\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(target: ObjectType<Entity>|string): TreeRepository<Entity> {\r\n\r\n        // tree tables aren't supported by some drivers (mongodb)\r\n        if (this.connection.driver.treeSupport === false)\r\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\r\n\r\n        // check if repository is real tree repository\r\n        const repository = this.getRepository(target);\r\n        if (!(repository instanceof TreeRepository))\r\n            throw new RepositoryNotTreeError(target);\r\n\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(entityClass: ObjectType<Entity>): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity name.\r\n     */\r\n    getMongoRepository<Entity>(entityName: string): MongoRepository<Entity>;\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class or name.\r\n     */\r\n    getMongoRepository<Entity>(entityClassOrName: ObjectType<Entity>|string): MongoRepository<Entity> {\r\n        return this.connection.getMongoRepository<Entity>(entityClassOrName as any);\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\r\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        if (entityRepositoryInstance instanceof AbstractRepository) {\r\n            if (!(entityRepositoryInstance as any)[\"manager\"])\r\n                (entityRepositoryInstance as any)[\"manager\"] = this;\r\n        }\r\n        if (entityRepositoryInstance instanceof Repository) {\r\n            if (!entityMetadata)\r\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\r\n\r\n            (entityRepositoryInstance as any)[\"manager\"] = this;\r\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\r\n        }\r\n\r\n        return entityRepositoryInstance;\r\n    }\r\n\r\n    /**\r\n     * Releases all resources used by entity manager.\r\n     * This is used when entity manager is created with a single query runner,\r\n     * and this single query runner needs to be released after job with entity manager is done.\r\n     */\r\n    async release(): Promise<void> {\r\n        if (!this.queryRunner)\r\n            throw new NoNeedToReleaseEntityManagerError();\r\n\r\n        return this.queryRunner.release();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Joins all eager relations recursively.\r\n     */\r\n    protected joinEagerRelations(qb: SelectQueryBuilder<any>, alias: string, metadata: EntityMetadata) {\r\n        metadata.eagerRelations.forEach(relation => {\r\n            const relationAlias = alias + \"_\" + relation.propertyPath.replace(\".\", \"_\");\r\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\r\n            this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}
{"version":3,"sources":["../../src/decorator/transaction/Transaction.ts"],"names":[],"mappings":"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","file":"Transaction.js","sourcesContent":["import { getConnection, getMetadataArgsStorage, Repository, MongoRepository, TreeRepository } from \"../../index\";\r\n\r\n/**\r\n * Wraps some method into the transaction.\r\n * Note, method result will return a promise if this decorator applied.\r\n * Note, all database operations in the wrapped method should be executed using entity managed passed as a first parameter\r\n * into the wrapped method.\r\n * If you want to control at what position in your method parameters entity manager should be injected,\r\n * then use @TransactionEntityManager() decorator.\r\n * If you want to use repositories instead of bare entity manager,\r\n * then use @TransactionRepository() decorator.\r\n */\r\nexport function Transaction(connectionName: string = \"default\"): MethodDecorator {\r\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\r\n\r\n        // save original method - we gonna need it\r\n        const originalMethod = descriptor.value;\r\n\r\n        // override method descriptor with proxy method\r\n        descriptor.value = function(...args: any[]) {\r\n            return getConnection(connectionName)\r\n                .manager\r\n                .transaction(entityManager => {\r\n                    let argsWithInjectedTransactionManagerAndRepositories: any[];\r\n\r\n                    // gets all @TransactionEntityManager() decorator usages for this method\r\n                    const transactionEntityManagerMetadatas = getMetadataArgsStorage()\r\n                        .filterTransactionEntityManagers(target.constructor)\r\n                        .filter(transactionEntityManagerMetadata => {\r\n                            return transactionEntityManagerMetadata.methodName === methodName;\r\n                        })\r\n                        .reverse();\r\n\r\n                    // gets all @TransactionRepository() decorator usages for this method\r\n                    const transactionRepositoryMetadatas = getMetadataArgsStorage()\r\n                        .filterTransactionRepository(target.constructor)\r\n                        .filter(transactionRepositoryMetadata => {\r\n                            return transactionRepositoryMetadata.methodName === methodName;\r\n                        })\r\n                        .reverse();\r\n                        \r\n                    // if there are @TransactionEntityManager() decorator usages the inject them\r\n                    if (transactionEntityManagerMetadatas.length > 0) { \r\n                        argsWithInjectedTransactionManagerAndRepositories = [...args];\r\n                        // replace method params with injection of transactionEntityManager\r\n                        transactionEntityManagerMetadatas.forEach(metadata => {\r\n                            argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\r\n                        });\r\n\r\n                    } else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\r\n                        argsWithInjectedTransactionManagerAndRepositories = [entityManager, ...args];\r\n\r\n                    } else {\r\n                        argsWithInjectedTransactionManagerAndRepositories = [...args];\r\n                    }\r\n\r\n                    // for every usage of @TransactionRepository decorator\r\n                    transactionRepositoryMetadatas.forEach(metadata => {\r\n                        let repositoryInstance: any;\r\n\r\n                        // detect type of the repository and get instance from transaction entity manager\r\n                        switch (metadata.repositoryType) {\r\n                            case Repository:\r\n                                repositoryInstance = entityManager.getRepository(metadata.entityType!);\r\n                                break;\r\n                            case MongoRepository:\r\n                                repositoryInstance = entityManager.getMongoRepository(metadata.entityType!);\r\n                                break;\r\n                            case TreeRepository:\r\n                                repositoryInstance = entityManager.getTreeRepository(metadata.entityType!);\r\n                                break;\r\n                            // if not the TypeORM's ones, there must be custom repository classes\r\n                            default:\r\n                                repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\r\n                        }\r\n\r\n                        // replace method param with injection of repository instance\r\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\r\n                    });\r\n\r\n                    return originalMethod.apply(this, argsWithInjectedTransactionManagerAndRepositories);\r\n                });\r\n        };\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/decorator/entity/Entity.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AAgBnD;;;GAGG;AACH,gBAAuB,aAAoC,EAAE,YAA4B;IACrF,IAAM,OAAO,GAAG,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAA8B,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC1G,IAAM,IAAI,GAAG,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAE9E,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,IAAI,GAAsB;YAC5B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;YACjE,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC9D,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YACpE,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC9D,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,CAAC;SACrD,CAAC;QACF,8BAAsB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC;AACN,CAAC;AAjBD,wBAiBC","file":"Entity.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\nimport {EntityOptions} from \"../options/EntityOptions\";\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(options?: EntityOptions): Function;\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(name?: string, options?: EntityOptions): Function;\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(nameOrOptions?: string|EntityOptions, maybeOptions?: EntityOptions): Function {\r\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as EntityOptions : maybeOptions) || {};\r\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\r\n\r\n    return function (target: Function) {\r\n        const args: TableMetadataArgs = {\r\n            target: target,\r\n            name: name,\r\n            type: \"regular\",\r\n            orderBy: options && options.orderBy ? options.orderBy : undefined,\r\n            engine: options && options.engine ? options.engine : undefined,\r\n            database: options && options.database ? options.database : undefined,\r\n            schema: options && options.schema ? options.schema : undefined,\r\n            skipSync: !!(options && options.skipSync === true)\r\n        };\r\n        getMetadataArgsStorage().tables.push(args);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}
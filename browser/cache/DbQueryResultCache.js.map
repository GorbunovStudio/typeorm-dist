{"version":3,"sources":["../browser/src/cache/DbQueryResultCache.ts"],"names":[],"mappings":"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","file":"DbQueryResultCache.js","sourcesContent":["import {QueryResultCache} from \"./QueryResultCache\";\r\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\r\nimport {Table} from \"../schema-builder/schema/Table\";\r\nimport {TableColumn} from \"../schema-builder/schema/TableColumn\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Caches query result into current database, into separate table called \"query-result-cache\".\r\n */\r\nexport class DbQueryResultCache implements QueryResultCache {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    async connect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Disconnects with given cache provider.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Creates table for storing cache if it does not exist yet.\r\n     */\r\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n        const driver = this.connection.driver;\r\n        const tableExist = await queryRunner.hasTable(\"query-result-cache\"); // todo: table name should be configurable\r\n        if (tableExist)\r\n            return;\r\n\r\n        await queryRunner.createTable(new Table(\"query-result-cache\", [ // createTableIfNotExist\r\n            new TableColumn({\r\n                name: \"id\",\r\n                isNullable: true,\r\n                isPrimary: true,\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheId }),\r\n                generationStrategy: \"increment\",\r\n                isGenerated: true\r\n            }),\r\n            new TableColumn({\r\n                name: \"identifier\",\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheIdentifier }),\r\n                isNullable: true\r\n            }),\r\n            new TableColumn({\r\n                name: \"time\",\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheTime }),\r\n                isPrimary: false,\r\n                isNullable: false\r\n            }),\r\n            new TableColumn({\r\n                name: \"duration\",\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheDuration }),\r\n                isPrimary: false,\r\n                isNullable: false\r\n            }),\r\n            new TableColumn({\r\n                name: \"query\",\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheQuery }),\r\n                isPrimary: false,\r\n                isNullable: false\r\n            }),\r\n            new TableColumn({\r\n                name: \"result\",\r\n                type: driver.normalizeType({ type: driver.mappedDataTypes.cacheResult }),\r\n                isNullable: false\r\n            }),\r\n        ]));\r\n    }\r\n\r\n    /**\r\n     * Caches given query result.\r\n     * Returns cache result if found.\r\n     * Returns undefined if result is not cached.\r\n     */\r\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n        const qb = this.connection\r\n            .createQueryBuilder(queryRunner)\r\n            .select()\r\n            .from(\"query-result-cache\", \"cache\");\r\n\r\n        if (options.identifier) {\r\n            return qb\r\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\r\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\r\n                .getRawOne();\r\n\r\n        } else if (options.query) {\r\n            return qb\r\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\r\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\r\n                .getRawOne();\r\n        }\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    /**\r\n     * Checks if cache is expired or not.\r\n     */\r\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\r\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time as any) : savedCache.time)! + savedCache.duration) < new Date().getTime();\r\n    }\r\n\r\n    /**\r\n     * Stores given query result in the cache.\r\n     */\r\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions|undefined, queryRunner?: QueryRunner): Promise<void> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n\r\n        let insertedValues: ObjectLiteral = options;\r\n        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\r\n            insertedValues = {\r\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\r\n                time: new MssqlParameter(options.time, \"bigint\"),\r\n                duration: new MssqlParameter(options.duration, \"int\"),\r\n                query: new MssqlParameter(options.query, \"nvarchar\"),\r\n                result: new MssqlParameter(options.result, \"nvarchar\"),\r\n            };\r\n        }\r\n\r\n        if (savedCache && savedCache.identifier) { // if exist then update\r\n            await queryRunner.update(\"query-result-cache\", insertedValues, { identifier: insertedValues.identifier });\r\n\r\n        } else if (savedCache && savedCache.query) { // if exist then update\r\n            await queryRunner.update(\"query-result-cache\", insertedValues, { query: insertedValues.query });\r\n\r\n        } else { // otherwise insert\r\n            await queryRunner.insert(\"query-result-cache\", insertedValues);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears everything stored in the cache.\r\n     */\r\n    async clear(queryRunner: QueryRunner): Promise<void> {\r\n        return this.getQueryRunner(queryRunner).truncate(\"query-result-cache\");\r\n    }\r\n\r\n    /**\r\n     * Removes all cached results by given identifiers from cache.\r\n     */\r\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\r\n        await Promise.all(identifiers.map(identifier => {\r\n            return this.getQueryRunner(queryRunner).delete(\"query-result-cache\", { identifier });\r\n        }));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets a query runner to work with.\r\n     */\r\n    protected getQueryRunner(queryRunner: QueryRunner|undefined): QueryRunner {\r\n        if (queryRunner)\r\n            return queryRunner;\r\n\r\n        return this.connection.createQueryRunner(\"master\");\r\n    }\r\n\r\n}"],"sourceRoot":".."}
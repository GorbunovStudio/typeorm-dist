{"version":3,"sources":["../browser/src/decorator/columns/PrimaryGeneratedColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AA2BnD;;;;GAIG;AACH,MAAM,iCAAiC,iBAA6G,EAC7G,YAAqF;IACxH,IAAM,OAAO,GAAkB,EAAE,CAAC;IAClC,IAAI,QAA4B,CAAC;IAEjC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACpB,EAAE,CAAC,CAAC,OAAO,iBAAiB,KAAK,QAAQ,CAAC;YACtC,QAAQ,GAAG,iBAAuC,CAAC;QAEvD,EAAE,CAAC,CAAC,iBAAiB,YAAY,MAAM,CAAC,CAAC,CAAC;YACtC,QAAQ,GAAG,WAAW,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,QAAQ,GAAG,WAAW,CAAC;IAC3B,CAAC;IAED,EAAE,CAAC,CAAC,YAAY,YAAY,MAAM,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAEzC,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,2GAA2G;QAC3G,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAmB,CAAC,CAAC;YAC9D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAmB,CAAC,CAAC;YAC9D,CAAC;QACL,CAAC;QAED,2DAA2D;QAC3D,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAmB,CAAC,CAAC;QAE3D,4CAA4C;QAC5C,IAAM,UAAU,GAAuB;YACnC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAElD,IAAM,cAAc,GAA0B;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACrB,CAAC;QACF,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC,CAAC;AACN,CAAC","file":"PrimaryGeneratedColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\r\nimport {ColumnOptions} from \"../options/ColumnOptions\";\r\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\r\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * This column creates an integer PRIMARY COLUMN with generated set to true.\r\n */\r\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\r\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): Function {\r\n    const options: ColumnOptions = {};\r\n    let strategy: \"increment\"|\"uuid\";\r\n\r\n    if (strategyOrOptions) {\r\n        if (typeof strategyOrOptions === \"string\")\r\n            strategy = strategyOrOptions as \"increment\"|\"uuid\";\r\n\r\n        if (strategyOrOptions instanceof Object) {\r\n            strategy = \"increment\";\r\n            Object.assign(options, strategyOrOptions);\r\n        }\r\n    } else {\r\n        strategy = \"increment\";\r\n    }\r\n\r\n    if (maybeOptions instanceof Object)\r\n        Object.assign(options, maybeOptions);\r\n\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // check if there is no type in column options then set the int type - by default for auto generated column\r\n        if (!options.type) {\r\n            if (strategy === \"increment\") {\r\n                Object.assign(options, { type: Number } as ColumnOptions);\r\n            } else {\r\n                Object.assign(options, { type: \"uuid\" } as ColumnOptions);\r\n            }\r\n        }\r\n\r\n        // implicitly set a primary and generated to column options\r\n        Object.assign(options, { primary: true } as ColumnOptions);\r\n\r\n        // create and register a new column metadata\r\n        const columnArgs: ColumnMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"regular\",\r\n            options: options\r\n        };\r\n        getMetadataArgsStorage().columns.push(columnArgs);\r\n\r\n        const generationArgs: GeneratedMetadataArgs = {\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            strategy: strategy\r\n        };\r\n        getMetadataArgsStorage().generations.push(generationArgs);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}
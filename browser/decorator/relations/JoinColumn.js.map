{"version":3,"sources":["../browser/src/decorator/relations/JoinColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AAyBnD;;;;GAIG;AACH,MAAM,qBAAqB,qBAA6D;IACpF,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAM,OAAO,GAAG,qBAAqB,YAAY,KAAK,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;QAC/G,OAAO,CAAC,OAAO,CAAC,UAAA,OAAO;YACnB,IAAM,IAAI,GAA2B;gBACjC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;aACrD,CAAC;YACF,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC","file":"JoinColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\r\nimport {JoinColumnOptions} from \"../options/JoinColumnOptions\";\r\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions[]): Function;\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        const options = optionsOrOptionsArray instanceof Array ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\r\n        options.forEach(options => {\r\n            const args: JoinColumnMetadataArgs = {\r\n                target: object.constructor,\r\n                propertyName: propertyName,\r\n                name: options.name,\r\n                referencedColumnName: options.referencedColumnName\r\n            };\r\n            getMetadataArgsStorage().joinColumns.push(args);\r\n        });\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}
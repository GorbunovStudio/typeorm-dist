{"version":3,"sources":["../browser/src/query-builder/QueryExpressionMap.ts"],"names":[],"mappings":"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","file":"QueryExpressionMap.js","sourcesContent":["import {Alias} from \"./Alias\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {JoinAttribute} from \"./JoinAttribute\";\r\nimport {RelationIdAttribute} from \"./relation-id/RelationIdAttribute\";\r\nimport {RelationCountAttribute} from \"./relation-count/RelationCountAttribute\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SelectQuery} from \"./SelectQuery\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {QueryBuilder} from \"./QueryBuilder\";\r\n\r\n/**\r\n * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n */\r\nexport class QueryExpressionMap {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if QueryBuilder used to select entities and not a raw results.\r\n     */\r\n    queryEntity: boolean = false;\r\n\r\n    /**\r\n     * Main alias is a main selection object selected by QueryBuilder.\r\n     */\r\n    mainAlias?: Alias;\r\n\r\n    /**\r\n     * All aliases (including main alias) used in the query.\r\n     */\r\n    aliases: Alias[] = [];\r\n\r\n    /**\r\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\r\n     */\r\n    queryType: \"select\"|\"update\"|\"delete\"|\"insert\"|\"relation\" = \"select\";\r\n\r\n    /**\r\n     * Data needs to be SELECT-ed.\r\n     */\r\n    selects: SelectQuery[] = [];\r\n\r\n    /**\r\n     * FROM-s to be selected.\r\n     */\r\n    // froms: { target: string, alias: string }[] = [];\r\n\r\n    /**\r\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\r\n     * If insert query was used, it needs \"insert set\" - values that needs to be inserted.\r\n     */\r\n    valuesSet?: ObjectLiteral|ObjectLiteral[];\r\n\r\n    /**\r\n     * Optional returning (or output) clause for insert, update or delete queries.\r\n     */\r\n    returning: string = \"\";\r\n\r\n    /**\r\n     * Optional on conflict statement used in insertion query in postgres.\r\n     */\r\n    onConflict: string = \"\";\r\n\r\n    /**\r\n     * JOIN queries.\r\n     */\r\n    joinAttributes: JoinAttribute[] = [];\r\n\r\n    /**\r\n     * RelationId queries.\r\n     */\r\n    relationIdAttributes: RelationIdAttribute[] = [];\r\n\r\n    /**\r\n     * Relation count queries.\r\n     */\r\n    relationCountAttributes: RelationCountAttribute[] = [];\r\n\r\n    /**\r\n     * WHERE queries.\r\n     */\r\n    wheres: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * HAVING queries.\r\n     */\r\n    havings: { type: \"simple\"|\"and\"|\"or\", condition: string }[] = [];\r\n\r\n    /**\r\n     * ORDER BY queries.\r\n     */\r\n    orderBys: OrderByCondition = {};\r\n\r\n    /**\r\n     * GROUP BY queries.\r\n     */\r\n    groupBys: string[] = [];\r\n\r\n    /**\r\n     * LIMIT query.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * OFFSET query.\r\n     */\r\n    offset?: number;\r\n\r\n    /**\r\n     * Number of rows to skip of result using pagination.\r\n     */\r\n    skip?: number;\r\n\r\n    /**\r\n     * Number of rows to take using pagination.\r\n     */\r\n    take?: number;\r\n\r\n    /**\r\n     * Locking mode.\r\n     */\r\n    lockMode?: \"optimistic\"|\"pessimistic_read\"|\"pessimistic_write\";\r\n\r\n    /**\r\n     * Current version of the entity, used for locking.\r\n     */\r\n    lockVersion?: number|Date;\r\n\r\n    /**\r\n     * Parameters used to be escaped in final query.\r\n     */\r\n    parameters: ObjectLiteral = {};\r\n\r\n    /**\r\n     * Indicates if alias, table names and column names will be ecaped by driver, or not.\r\n     *\r\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\r\n     */\r\n    disableEscaping: boolean = true;\r\n\r\n    /**\r\n     * todo: needs more information.\r\n     */\r\n    ignoreParentTablesJoins: boolean = false;\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     *\r\n     * todo: what to do with it? is it properly used? what about persistence?\r\n     */\r\n    enableRelationIdValues: boolean = false;\r\n\r\n    /**\r\n     * Extra where condition appended to the end of original where conditions with AND keyword.\r\n     * Original condition will be wrapped into brackets.\r\n     */\r\n    extraAppendedAndWhereCondition: string = \"\";\r\n\r\n    /**\r\n     * Indicates if query builder creates a subquery.\r\n     */\r\n    subQuery: boolean = false;\r\n\r\n    /**\r\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\r\n     */\r\n    parentQueryBuilder: QueryBuilder<any>;\r\n\r\n    /**\r\n     * Indicates if property names are prefixed with alias names during property replacement.\r\n     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\r\n     * but user can use them in WHERE expressions.\r\n     */\r\n    aliasNamePrefixingEnabled: boolean = true;\r\n\r\n    /**\r\n     * Indicates if query result cache is enabled or not.\r\n     */\r\n    cache: boolean = false;\r\n\r\n    /**\r\n     * Time in milliseconds in which cache will expire.\r\n     * If not set then global caching time will be used.\r\n     */\r\n    cacheDuration: number;\r\n\r\n    /**\r\n     * Cache id.\r\n     * Used to identifier your cache queries.\r\n     */\r\n    cacheId: string;\r\n\r\n    /**\r\n     * Property path of relation to work with.\r\n     * Used in relational query builder.\r\n     */\r\n    relationPropertyPath: string;\r\n\r\n    /**\r\n     * Entity (target) which relations will be updated.\r\n     */\r\n    of: any|any[];\r\n\r\n    /**\r\n     * List of columns where data should be inserted.\r\n     * Used in INSERT query.\r\n     */\r\n    insertColumns: string[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\r\n     * otherwise it uses default entity order by if it was set.\r\n     */\r\n    get allOrderBys() {\r\n        if (!Object.keys(this.orderBys).length && this.mainAlias!.hasMetadata) {\r\n            const entityOrderBy = this.mainAlias!.metadata.orderBy || {};\r\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\r\n                orderBy[this.mainAlias!.name + \".\" + key] = entityOrderBy[key];\r\n                return orderBy;\r\n            }, {} as OrderByCondition);\r\n        }\r\n\r\n        return this.orderBys;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    setMainAlias(alias: Alias): Alias {\r\n\r\n        // if main alias is already set then remove it from the array\r\n        if (this.mainAlias)\r\n            this.aliases.splice(this.aliases.indexOf(this.mainAlias));\r\n\r\n        // set new main alias\r\n        this.mainAlias = alias;\r\n\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: { type: \"from\"|\"select\"|\"join\"|\"other\", name?: string, target?: Function|string, tablePath?: string, subQuery?: string, metadata?: EntityMetadata }): Alias {\r\n\r\n        let aliasName = options.name;\r\n        if (!aliasName && options.tablePath)\r\n            aliasName = options.tablePath;\r\n        if (!aliasName && options.target instanceof Function)\r\n            aliasName = options.target.name;\r\n        if (!aliasName && typeof options.target === \"string\")\r\n            aliasName = options.target;\r\n\r\n        const alias = new Alias();\r\n        alias.type = options.type;\r\n        if (aliasName)\r\n            alias.name = aliasName;\r\n        if (options.metadata)\r\n            alias.metadata = options.metadata;\r\n        if (options.target && !alias.hasMetadata)\r\n            alias.metadata = this.connection.getMetadata(options.target);\r\n        if (options.tablePath)\r\n            alias.tablePath = options.tablePath;\r\n        if (options.subQuery)\r\n            alias.subQuery = options.subQuery;\r\n\r\n        this.aliases.push(alias);\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * Finds alias with the given name.\r\n     * If alias was not found it throw an exception.\r\n     */\r\n    findAliasByName(aliasName: string): Alias {\r\n        const alias = this.aliases.find(alias => alias.name === aliasName);\r\n        if (!alias)\r\n            throw new Error(`\"${aliasName}\" alias was not found. Maybe you forgot to join it?`);\r\n\r\n        return alias;\r\n    }\r\n\r\n    findColumnByAliasExpression(aliasExpression: string): ColumnMetadata|undefined {\r\n        const [aliasName, propertyPath] = aliasExpression.split(\".\");\r\n        const alias = this.findAliasByName(aliasName);\r\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Gets relation metadata of the relation this query builder works with.\r\n     *\r\n     * todo: add proper exceptions\r\n     */\r\n    get relationMetadata(): RelationMetadata {\r\n        if (!this.mainAlias)\r\n            throw new Error(`Entity to work with is not specified!`); // todo: better message\r\n\r\n        const relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\r\n        if (!relationMetadata)\r\n            throw new Error(`Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`); // todo: better message\r\n\r\n        return relationMetadata;\r\n    }\r\n\r\n    /**\r\n     * Copies all properties of the current QueryExpressionMap into a new one.\r\n     * Useful when QueryBuilder needs to create a copy of itself.\r\n     */\r\n    clone(): QueryExpressionMap {\r\n        const map = new QueryExpressionMap(this.connection);\r\n        map.queryType = this.queryType;\r\n        map.selects = this.selects.map(select => select);\r\n        this.aliases.forEach(alias => map.aliases.push(new Alias(alias)));\r\n        map.mainAlias = this.mainAlias;\r\n        map.valuesSet = this.valuesSet;\r\n        map.returning = this.returning;\r\n        map.onConflict = this.onConflict;\r\n        map.joinAttributes = this.joinAttributes.map(join => new JoinAttribute(this.connection, this, join));\r\n        map.relationIdAttributes = this.relationIdAttributes.map(relationId => new RelationIdAttribute(this, relationId));\r\n        map.relationCountAttributes = this.relationCountAttributes.map(relationCount => new RelationCountAttribute(this, relationCount));\r\n        map.wheres = this.wheres.map(where => ({ ...where }));\r\n        map.havings = this.havings.map(having => ({ ...having }));\r\n        map.orderBys = Object.assign({}, this.orderBys);\r\n        map.groupBys = this.groupBys.map(groupBy => groupBy);\r\n        map.limit = this.limit;\r\n        map.offset = this.offset;\r\n        map.skip = this.skip;\r\n        map.take = this.take;\r\n        map.lockMode = this.lockMode;\r\n        map.lockVersion = this.lockVersion;\r\n        map.parameters = Object.assign({}, this.parameters);\r\n        map.disableEscaping = this.disableEscaping;\r\n        map.ignoreParentTablesJoins = this.ignoreParentTablesJoins;\r\n        map.enableRelationIdValues = this.enableRelationIdValues;\r\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\r\n        map.subQuery = this.subQuery;\r\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\r\n        map.cache = this.cache;\r\n        map.cacheId = this.cacheId;\r\n        map.cacheDuration = this.cacheDuration;\r\n        map.relationPropertyPath = this.relationPropertyPath;\r\n        map.of = this.of;\r\n        return map;\r\n    }\r\n\r\n}"],"sourceRoot":".."}
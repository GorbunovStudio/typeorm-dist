{"version":3,"sources":["../browser/src/query-builder/RelationQueryBuilder.ts"],"names":[],"mappings":"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","file":"RelationQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {RelationUpdater} from \"./RelationUpdater\";\r\nimport {RelationRemover} from \"./RelationRemover\";\r\nimport {RelationLoader} from \"./RelationLoader\";\r\n\r\n/**\r\n * Allows to work with entity relations and perform specific operations with those relations.\r\n *\r\n * todo: add transactions everywhere\r\n */\r\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        return \"\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets entity (target) which relations will be updated.\r\n     */\r\n    of(entity: any|any[]): this {\r\n        this.expressionMap.of = entity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets entity relation's value.\r\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\r\n     * Works only for many-to-one and one-to-one relations.\r\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\r\n     */\r\n    async set(value: any): Promise<void> {\r\n        const relation = this.expressionMap.relationMetadata;\r\n\r\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\r\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\r\n\r\n        if (relation.isManyToMany || relation.isOneToMany)\r\n            throw new Error(`Set operation is only supported for many-to-one and one-to-one relations. ` +\r\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\r\n                `Use .add() method instead.`);\r\n\r\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\r\n        if (relation.joinColumns &&\r\n            relation.joinColumns.length > 1 &&\r\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\r\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\r\n\r\n        const updater = new RelationUpdater(this, this.expressionMap);\r\n        return updater.update(value);\r\n    }\r\n\r\n    /**\r\n     * Adds (binds) given value to entity relation.\r\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\r\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\r\n     * Works only for many-to-many and one-to-many relations.\r\n     * For many-to-one and one-to-one use #set method instead.\r\n     */\r\n    async add(value: any|any[]): Promise<void> {\r\n        if (value instanceof Array && value.length === 0)\r\n            return;\r\n\r\n        const relation = this.expressionMap.relationMetadata;\r\n\r\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\r\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\r\n\r\n        if (relation.isManyToOne || relation.isOneToOne)\r\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\r\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\r\n                `Use .set() method instead.`);\r\n\r\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\r\n        if (relation.joinColumns &&\r\n            relation.joinColumns.length > 1 &&\r\n            (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\r\n            throw new Error(`Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`);\r\n\r\n        const updater = new RelationUpdater(this, this.expressionMap);\r\n        return updater.update(value);\r\n    }\r\n\r\n    /**\r\n     * Removes (unbinds) given value from entity relation.\r\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\r\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\r\n     * Works only for many-to-many and one-to-many relations.\r\n     * For many-to-one and one-to-one use #set method instead.\r\n     */\r\n    async remove(value: any|any[]): Promise<void> {\r\n        if (value instanceof Array && value.length === 0)\r\n            return;\r\n\r\n        const relation = this.expressionMap.relationMetadata;\r\n\r\n        if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\r\n            throw new Error(`Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`);\r\n\r\n        if (relation.isManyToOne || relation.isOneToOne)\r\n            throw new Error(`Add operation is only supported for many-to-many and one-to-many relations. ` +\r\n                `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\r\n                `Use .set(null) method instead.`);\r\n\r\n        const remover = new RelationRemover(this, this.expressionMap);\r\n        return remover.remove(value);\r\n    }\r\n\r\n    /**\r\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\r\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\r\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\r\n     * Works only for many-to-many and one-to-many relations.\r\n     * For many-to-one and one-to-one use #set method instead.\r\n     */\r\n    async addAndRemove(added: any|any[], removed: any|any[]): Promise<void> {\r\n        await this.remove(removed);\r\n        await this.add(added);\r\n    }\r\n\r\n    /**\r\n     * Gets entity's relation id.\r\n    async getId(): Promise<any> {\r\n\r\n    }*/\r\n\r\n    /**\r\n     * Gets entity's relation ids.\r\n    async getIds(): Promise<any[]> {\r\n        return [];\r\n    }*/\r\n\r\n    /**\r\n     * Loads a single entity (relational) from the relation.\r\n     * You can also provide id of relational entity to filter by.\r\n     */\r\n    async loadOne<T = any>(): Promise<T|undefined> {\r\n        let of = this.expressionMap.of;\r\n        if (!(of instanceof Object)) {\r\n            const metadata = this.expressionMap.mainAlias!.metadata;\r\n            if (metadata.hasMultiplePrimaryKeys)\r\n                throw new Error(`Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`);\r\n\r\n            of = metadata.primaryColumns[0].createValueMap(of);\r\n        }\r\n\r\n        const relationLoader = new RelationLoader(this.connection);\r\n        return relationLoader.load(this.expressionMap.relationMetadata, of);\r\n    }\r\n\r\n    /**\r\n     * Loads many entities (relational) from the relation.\r\n     * You can also provide ids of relational entities to filter by.\r\n     */\r\n    async loadMany<T = any>(): Promise<T[]> {\r\n        return this.loadOne();\r\n    }\r\n\r\n}"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/query-builder/UpdateQueryBuilder.ts"],"names":[],"mappings":"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","file":"UpdateQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {WhereExpression} from \"./WhereExpression\";\r\nimport {Brackets} from \"./Brackets\";\r\nimport {EntityMetadataUtils} from \"../metadata/EntityMetadataUtils\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\r\n        super(connectionOrQueryBuilder as any, queryRunner);\r\n        this.expressionMap.aliasNamePrefixingEnabled = false;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createUpdateExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string): this {\r\n         return this.returning(output);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Values needs to be updated.\r\n     */\r\n    set(values: ObjectLiteral): this {\r\n        this.expressionMap.valuesSet = values;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.computeWhereParameter(where);\r\n        if (condition)\r\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\r\n        if (parameters)\r\n            this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    whereInIds(ids: any|any[]): this {\r\n        ids = ids instanceof Array ? ids : [ids];\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.where(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any|any[]): this {\r\n        ids = ids instanceof Array ? ids : [ids];\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.andWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any|any[]): this {\r\n        ids = ids instanceof Array ? ids : [ids];\r\n        const [whereExpression, parameters] = this.createWhereIdsExpression(ids);\r\n        this.orWhere(whereExpression, parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     *\r\n     * Calling order by without order set will remove all previously set order bys.\r\n     */\r\n    orderBy(): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(order: OrderByCondition): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\r\n        if (sort) {\r\n            if (sort instanceof Object) {\r\n                this.expressionMap.orderBys = sort as OrderByCondition;\r\n            } else {\r\n                if (nulls) {\r\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\r\n                } else {\r\n                    this.expressionMap.orderBys = { [sort as string]: order };\r\n                }\r\n            }\r\n        } else {\r\n            this.expressionMap.orderBys = {};\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\r\n        if (nulls) {\r\n            this.expressionMap.orderBys[sort] = { order, nulls };\r\n        } else {\r\n            this.expressionMap.orderBys[sort] = order;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets LIMIT - maximum number of rows to be selected.\r\n     */\r\n    limit(limit?: number): this {\r\n        this.expressionMap.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string): this {\r\n        if (this.connection.driver instanceof SqlServerDriver || this.connection.driver instanceof PostgresDriver) {\r\n            this.expressionMap.returning = returning;\r\n            return this;\r\n        } else throw new Error(\"OUTPUT or RETURNING clause only supported by MS SQLServer or PostgreSQL\");\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates UPDATE express used to perform insert query.\r\n     */\r\n    protected createUpdateExpression() {\r\n        const valuesSet = this.getValueSet();\r\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\r\n\r\n        // prepare columns and values to be updated\r\n        const updateColumnAndValues: string[] = [];\r\n        if (metadata) {\r\n            EntityMetadataUtils.createPropertyPath(metadata, valuesSet).forEach(propertyPath => {\r\n                // todo: make this and other query builder to work with properly with tables without metadata\r\n                const column = metadata.findColumnWithPropertyPath(propertyPath);\r\n\r\n                // we update an entity and entity can contain property which aren't columns, so we just skip them\r\n                if (!column) return;\r\n\r\n                const paramName = \"_updated_\" + column.databaseName;\r\n                const value = this.connection.driver.preparePersistentValue(column.getEntityValue(valuesSet), column);\r\n\r\n                // todo: duplication zone\r\n                if (value instanceof Function) { // support for SQL expressions in update query\r\n                    updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + value());\r\n                } else {\r\n                    if (this.connection.driver instanceof SqlServerDriver) {\r\n                        this.setParameter(paramName, this.connection.driver.parametrizeValue(column, value));\r\n                    } else {\r\n                        this.setParameter(paramName, value);\r\n                    }\r\n                    updateColumnAndValues.push(this.escape(column.databaseName) + \" = :\" + paramName);\r\n                }\r\n            });\r\n        } else {\r\n            Object.keys(valuesSet).map(key => {\r\n                const value = valuesSet[key];\r\n\r\n                // todo: duplication zone\r\n                if (value instanceof Function) { // support for SQL expressions in update query\r\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + value());\r\n                } else {\r\n                    updateColumnAndValues.push(this.escape(key) + \" = :\" + key);\r\n                    this.setParameter(key, value);\r\n                }\r\n            });\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        const whereExpression = this.createWhereExpression();\r\n\r\n        // generate and return sql update query\r\n        if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof PostgresDriver) {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${this.expressionMap.returning}`;\r\n\r\n        } else if (this.expressionMap.returning !== \"\" && this.connection.driver instanceof SqlServerDriver) {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${this.expressionMap.returning}${whereExpression}`;\r\n\r\n        } else {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates \"ORDER BY\" part of SQL query.\r\n     */\r\n    protected createOrderByExpression() {\r\n        const orderBys = this.expressionMap.orderBys;\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                    .map(columnName => {\r\n                        if (typeof orderBys[columnName] === \"string\") {\r\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\r\n                        } else {\r\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\r\n                        }\r\n                    })\r\n                    .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Creates \"LIMIT\" parts of SQL query.\r\n     */\r\n    protected createLimitExpression(): string {\r\n        let limit: number|undefined = this.expressionMap.limit;\r\n\r\n        if (limit) {\r\n            if (this.connection.driver instanceof MysqlDriver) {\r\n                return \" LIMIT \" + limit;\r\n            } else {\r\n                throw new LimitOnUpdateNotSupportedError();\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSet(): ObjectLiteral {\r\n        if (this.expressionMap.valuesSet instanceof Object)\r\n            return this.expressionMap.valuesSet;\r\n\r\n        throw new Error(`Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.`);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}
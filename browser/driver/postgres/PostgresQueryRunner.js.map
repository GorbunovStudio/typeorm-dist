{"version":3,"sources":["../browser/src/driver/postgres/PostgresQueryRunner.ts"],"names":[],"mappings":"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","file":"PostgresQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {TableColumn} from \"../../schema-builder/schema/TableColumn\";\r\nimport {Table} from \"../../schema-builder/schema/Table\";\r\nimport {TableIndex} from \"../../schema-builder/schema/TableIndex\";\r\nimport {TableForeignKey} from \"../../schema-builder/schema/TableForeignKey\";\r\nimport {TablePrimaryKey} from \"../../schema-builder/schema/TablePrimaryKey\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {PostgresDriver} from \"./PostgresDriver\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\nimport {InsertResult} from \"../InsertResult\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class PostgresQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: PostgresDriver;\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Isolated entity manager working only with current query runner.\r\n     */\r\n    manager: EntityManager;\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    isReleased = false;\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     */\r\n    isTransactionActive = false;\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {};\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    protected databaseConnection: any;\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>;\r\n\r\n    /**\r\n     * Special callback provided by a driver used to release a created connection.\r\n     */\r\n    protected releaseCallback: Function;\r\n\r\n    /**\r\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\r\n     */\r\n    protected sqlMemoryMode: boolean = false;\r\n\r\n    /**\r\n     * Sql-s stored if \"sql in memory\" mode is enabled.\r\n     */\r\n    protected sqlsInMemory: (string|{ up: string, down: string })[] = [];\r\n\r\n    /**\r\n     * Mode in which query runner executes.\r\n     * Used for replication.\r\n     * If replication is not setup its value is ignored.\r\n     */\r\n    protected mode: \"master\"|\"slave\";\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: PostgresDriver, mode: \"master\"|\"slave\" = \"master\") {\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.mode = mode;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise;\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\r\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n\r\n        } else { // master\r\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n        }\r\n\r\n        return this.databaseConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true;\r\n        if (this.releaseCallback)\r\n            this.releaseCallback();\r\n\r\n        const index = this.driver.connectedQueryRunners.indexOf(this);\r\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        // console.log(\"query: \", query);\r\n        // console.log(\"parameters: \", parameters);\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n            const databaseConnection = await this.connect();\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const queryStartTime = +new Date();\r\n\r\n            databaseConnection.query(query, parameters, (err: any, result: any) => {\r\n\r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                const queryEndTime = +new Date();\r\n                const queryExecutionTime = queryEndTime - queryStartTime;\r\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                if (err) {\r\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                    fail(new QueryFailedError(query, parameters, err));\r\n                } else {\r\n                    ok(result.rows);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        const QueryStream = this.driver.loadStreamDependency();\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect();\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const stream = databaseConnection.query(new QueryStream(query, parameters));\r\n                if (onEnd) stream.on(\"end\", onEnd);\r\n                if (onError) stream.on(\"error\", onError);\r\n                ok(stream);\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of the generated column if given and generate column exist in the table.\r\n     */\r\n    async insert(tablePath: string, keyValues: ObjectLiteral): Promise<InsertResult> {\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\r\n        const values = keys.map((key, index) => \"$\" + (index + 1)).join(\",\");\r\n        const generatedColumns = this.connection.hasMetadata(tablePath) ? this.connection.getMetadata(tablePath).generatedColumns : [];\r\n        const generatedColumnNames = generatedColumns.map(generatedColumn => `\"${generatedColumn.databaseName}\"`).join(\", \");\r\n        const generatedColumnSql = generatedColumns.length > 0 ? ` RETURNING ${generatedColumnNames}` : \"\";\r\n\r\n        const sql = columns.length > 0\r\n            ? `INSERT INTO ${this.escapeTablePath(tablePath)}(${columns}) VALUES (${values}) ${generatedColumnSql}`\r\n            : `INSERT INTO ${this.escapeTablePath(tablePath)} DEFAULT VALUES ${generatedColumnSql}`;\r\n\r\n        const parameters = keys.map(key => keyValues[key]);\r\n        const result: ObjectLiteral[] = await this.query(sql, parameters);\r\n        const generatedMap = generatedColumns.reduce((map, column) => {\r\n            const valueMap = column.createValueMap(result[0][column.databaseName]);\r\n            return OrmUtils.mergeDeep(map, valueMap);\r\n        }, {} as ObjectLiteral);\r\n\r\n        return {\r\n            result: result,\r\n            generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n     */\r\n    async update(tablePath: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<void> {\r\n        const updateValues = this.parametrize(valuesMap).join(\", \");\r\n        const conditionString = this.parametrize(conditions, Object.keys(valuesMap).length).join(\" AND \");\r\n        const query = `UPDATE ${this.escapeTablePath(tablePath)} SET ${updateValues}${conditionString ? (\" WHERE \" + conditionString) : \"\"}`;\r\n        const updateParams = Object.keys(valuesMap).map(key => valuesMap[key]);\r\n        const conditionParams = Object.keys(conditions).map(key => conditions[key]);\r\n        const allParameters = updateParams.concat(conditionParams);\r\n        await this.query(query, allParameters);\r\n    }\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n     */\r\n    async delete(tablePath: string, conditions: ObjectLiteral|string, maybeParameters?: any[]): Promise<void> {\r\n        const conditionString = typeof conditions === \"string\" ? conditions : this.parametrize(conditions).join(\" AND \");\r\n        const parameters = conditions instanceof Object ? Object.keys(conditions).map(key => (conditions as ObjectLiteral)[key]) : maybeParameters;\r\n\r\n        const sql = `DELETE FROM ${this.escapeTablePath(tablePath)} WHERE ${conditionString}`;\r\n        await this.query(sql, parameters);\r\n    }\r\n\r\n    /**\r\n     * Inserts rows into closure table.\r\n     *\r\n     * todo: rethink its place\r\n     */\r\n    async insertIntoClosureTable(tablePath: string, newEntityId: any, parentId: any, hasLevel: boolean): Promise<number> {\r\n        let sql = \"\";\r\n        if (hasLevel) {\r\n            sql = `INSERT INTO ${this.escapeTablePath(tablePath)}(\"ancestor\", \"descendant\", \"level\") ` +\r\n                `SELECT \"ancestor\", ${newEntityId}, \"level\" + 1 FROM ${this.escapeTablePath(tablePath)} WHERE \"descendant\" = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}, 1`;\r\n        } else {\r\n            sql = `INSERT INTO ${this.escapeTablePath(tablePath)}(\"ancestor\", \"descendant\") ` +\r\n                `SELECT \"ancestor\", ${newEntityId} FROM ${this.escapeTablePath(tablePath)} WHERE \"descendant\" = ${parentId} ` +\r\n                `UNION ALL SELECT ${newEntityId}, ${newEntityId}`;\r\n        }\r\n        await this.query(sql);\r\n        if (hasLevel) {\r\n            const results: ObjectLiteral[] = await this.query(`SELECT MAX(level) as level FROM ${this.escapeTablePath(tablePath)} WHERE descendant = ${parentId}`);\r\n            return results && results[0] && results[0][\"level\"] ? parseInt(results[0][\"level\"]) + 1 : 1;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(tablePath: string): Promise<Table|undefined> {\r\n        const tables = await this.getTables([tablePath]);\r\n        return tables.length > 0 ? tables[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getTables(tablePaths: string[]): Promise<Table[]> {\r\n        // if no tables given then no need to proceed\r\n        if (!tablePaths || !tablePaths.length)\r\n            return [];\r\n\r\n        const tableNames = tablePaths.map(tablePath => {\r\n            return tablePath.indexOf(\".\") === -1 ? tablePath : tablePath.split(\".\")[1];\r\n        });\r\n\r\n        const currentSchemaQuery = await this.query(`SELECT * FROM current_schema()`);\r\n        const currentSchema = currentSchemaQuery[0][\"current_schema\"];\r\n        const schemaNames = tablePaths\r\n            .filter(tablePath => tablePath.indexOf(\".\") !== -1)\r\n            .map(tablePath => tablePath.split(\".\")[0]);\r\n        schemaNames.push(this.driver.options.schema || currentSchema);\r\n\r\n        // load tables, columns, indices and foreign keys\r\n        const tableNamesString = tableNames.map(name => `'${name}'`).join(\", \");\r\n        const schemaNamesString = schemaNames.map(name => `'${name}'`).join(\", \");\r\n        const tablesCondition = tablePaths.map(tablePath => {\r\n            let [schemaName, tableName] = tablePath.split(\".\");\r\n            if (!tableName) {\r\n                tableName = schemaName;\r\n                schemaName = this.driver.options.schema || currentSchema;\r\n            }\r\n            return `table_schema = '${schemaName}' AND table_name = '${tableName}'`;\r\n        }).join(\" OR \");\r\n        const tablesSql      = `SELECT * FROM information_schema.tables WHERE ` + tablesCondition;\r\n        const columnsSql     = `SELECT * FROM information_schema.columns WHERE table_schema IN (${schemaNamesString})`;\r\n        const indicesSql     = `SELECT t.relname AS table_name, i.relname AS index_name, a.attname AS column_name, ix.indisunique AS is_unique, a.attnum, ix.indkey FROM pg_class t, pg_class i, pg_index ix, pg_attribute a, pg_namespace ns\r\nWHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid\r\nAND a.attnum = ANY(ix.indkey) AND t.relkind = 'r' AND t.relname IN (${tableNamesString}) AND t.relnamespace = ns.OID AND ns.nspname IN (${schemaNamesString}) ORDER BY t.relname, i.relname`;\r\n        const foreignKeysSql = `SELECT table_name, constraint_name FROM information_schema.table_constraints WHERE table_schema IN (${schemaNamesString}) AND constraint_type = 'FOREIGN KEY'`;\r\n        const uniqueKeysSql  = `SELECT * FROM information_schema.table_constraints WHERE table_schema IN (${schemaNamesString}) AND constraint_type = 'UNIQUE'`;\r\n        const primaryKeysSql = `SELECT c.column_name, tc.table_name, tc.constraint_name FROM information_schema.table_constraints tc\r\nJOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name)\r\nJOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name\r\nwhere constraint_type = 'PRIMARY KEY' AND c.table_schema IN (${schemaNamesString})`;\r\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbUniqueKeys, primaryKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql),\r\n            this.query(uniqueKeysSql),\r\n            this.query(primaryKeysSql),\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        // create tables for loaded tables\r\n        return dbTables.map(dbTable => {\r\n            const table = new Table(dbTable[\"table_name\"]);\r\n\r\n            table.database = dbTable[\"table_catalog\"];\r\n            table.schema = dbTable[\"table_schema\"];\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = dbColumns\r\n                .filter(dbColumn => dbColumn[\"table_name\"] === table.name)\r\n                .map(dbColumn => {\r\n                    const seqName = table.schema === currentSchema\r\n                        ? `${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}_seq`\r\n                        : `${table.schema}.${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}_seq`;\r\n\r\n                    const isGenerated = !!dbColumn[\"column_default\"]\r\n                        && (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === `nextval('${seqName}'::regclass)` || /^uuid\\_generate\\_v\\d\\(\\)/.test(dbColumn[\"column_default\"]));\r\n                    const tableColumn = new TableColumn();\r\n                    tableColumn.name = dbColumn[\"column_name\"];\r\n                    tableColumn.type = dbColumn[\"data_type\"].toLowerCase();\r\n                    tableColumn.length = dbColumn[\"character_maximum_length\"] ? dbColumn[\"character_maximum_length\"].toString() : \"\";\r\n                    tableColumn.precision = dbColumn[\"numeric_precision\"];\r\n                    tableColumn.scale = dbColumn[\"numeric_scale\"];\r\n                    tableColumn.default = dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined ? dbColumn[\"column_default\"].replace(/::character varying/, \"\") : undefined;\r\n                    tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\r\n                    // tableColumn.isPrimary = dbColumn[\"column_key\"].indexOf(\"PRI\") !== -1;\r\n                    tableColumn.isGenerated = isGenerated;\r\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\r\n                    tableColumn.charset = dbColumn[\"character_set_name\"];\r\n                    tableColumn.collation = dbColumn[\"collation_name\"];\r\n                    tableColumn.isUnique = !!dbUniqueKeys.find(key => key[\"constraint_name\"] ===  `uk_${dbColumn[\"table_name\"]}_${dbColumn[\"column_name\"]}`);\r\n                    if (tableColumn.type === \"array\") {\r\n                        tableColumn.isArray = true;\r\n                        const type = dbColumn[\"udt_name\"].substring(1);\r\n                        tableColumn.type = this.connection.driver.normalizeType({type: type});\r\n                    }\r\n\r\n                    if (tableColumn.type === \"time without time zone\"\r\n                        || tableColumn.type === \"time with time zone\"\r\n                        || tableColumn.type === \"timestamp without time zone\"\r\n                        || tableColumn.type === \"timestamp with time zone\") {\r\n                        tableColumn.precision = dbColumn[\"datetime_precision\"];\r\n                    }\r\n                    return tableColumn;\r\n                });\r\n\r\n            // create primary key schema\r\n            table.primaryKeys = primaryKeys\r\n                .filter(primaryKey => primaryKey[\"table_name\"] === table.name)\r\n                .map(primaryKey => new TablePrimaryKey(primaryKey[\"constraint_name\"], primaryKey[\"column_name\"]));\r\n\r\n            // create foreign key schemas from the loaded indices\r\n            table.foreignKeys = dbForeignKeys\r\n                .filter(dbForeignKey => dbForeignKey[\"table_name\"] === table.name)\r\n                .map(dbForeignKey => new TableForeignKey(dbForeignKey[\"constraint_name\"], [], [], \"\", \"\")); // todo: fix missing params\r\n\r\n            // create unique key schemas from the loaded indices\r\n            /*table.uniqueKeys = dbUniqueKeys\r\n                .filter(dbUniqueKey => dbUniqueKey[\"table_name\"] === table.name)\r\n                .map(dbUniqueKey => {\r\n                    return new UniqueKeySchema(dbUniqueKey[\"TABLE_NAME\"], dbUniqueKey[\"CONSTRAINT_NAME\"], [/!* todo *!/]);\r\n                });*/\r\n\r\n            // create index schemas from the loaded indices\r\n            table.indices = dbIndices\r\n                .filter(dbIndex => {\r\n                    return dbIndex[\"table_name\"] === table.name &&\r\n                        (!table.foreignKeys.find(foreignKey => foreignKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!table.primaryKeys.find(primaryKey => primaryKey.name === dbIndex[\"index_name\"])) &&\r\n                        (!dbUniqueKeys.find(key => key[\"constraint_name\"] === dbIndex[\"index_name\"]));\r\n                })\r\n                .map(dbIndex => dbIndex[\"index_name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(dbIndexName => {\r\n                    const dbIndicesInfos = dbIndices\r\n                        .filter(dbIndex => dbIndex[\"table_name\"] === table.name && dbIndex[\"index_name\"] === dbIndexName);\r\n                    const columnPositions = dbIndicesInfos[0][\"indkey\"].split(\" \")\r\n                        .map((x: string) => parseInt(x));\r\n                    const columnNames = columnPositions\r\n                        .map((pos: number) => dbIndicesInfos.find(idx => idx.attnum === pos)![\"column_name\"]);\r\n\r\n                    return new TableIndex(dbTable[\"table_name\"], dbIndexName, columnNames, dbIndicesInfos[0][\"is_unique\"]);\r\n                });\r\n\r\n            return table;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tablePath: string): Promise<boolean> {\r\n        const parsedTablePath = this.parseTablePath(tablePath);\r\n        const sql = `SELECT * FROM information_schema.tables WHERE table_schema = ${parsedTablePath.schema} AND table_name = ${parsedTablePath.tableName}`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a database if it's not created.\r\n     * Postgres does not supports database creation inside a transaction block.\r\n     */\r\n    createDatabase(database: string): Promise<void[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Creates a schema if it's not created.\r\n     */\r\n    async createSchema(schemas: string[]): Promise<void[]> {\r\n        if (this.driver.options.schema)\r\n            schemas.push(this.driver.options.schema);\r\n        return Promise.all(schemas.map(schema => this.query(`CREATE SCHEMA IF NOT EXISTS \"${schema}\"`)));\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table metadata and column metadatas.\r\n     */\r\n    async createTable(table: Table): Promise<void> {\r\n        const schema = table.schema || this.driver.options.schema;\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, false)).join(\", \");\r\n        let up = `CREATE TABLE ${this.escapeTablePath(table)} (${columnDefinitions}`;\r\n        up += table.columns\r\n            .filter(column => column.isUnique)\r\n            .map(column => {\r\n                return schema ? `, CONSTRAINT \"uk_${schema}_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`\r\n                              : `, CONSTRAINT \"uk_${table.name}_${column.name}\" UNIQUE (\"${column.name}\")`;\r\n            }).join(\" \");\r\n        const primaryKeyColumns = table.columns.filter(column => column.isPrimary);\r\n        if (primaryKeyColumns.length > 0)\r\n            up += `, PRIMARY KEY(${primaryKeyColumns.map(column => `\"${column.name}\"`).join(\", \")})`;\r\n        up += `)`;\r\n\r\n        const down = `DROP TABLE \"${table.name}\"`;\r\n        await this.schemaQuery(up, down);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tablePath: string): Promise<void> {\r\n        await this.query(`DROP TABLE ${this.escapeTablePath(tablePath)}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tablePath: string, columnName: string): Promise<boolean> {\r\n        const parsedTablePath = this.parseTablePath(tablePath);\r\n        const sql = `SELECT * FROM information_schema.columns WHERE table_schema = ${parsedTablePath.schema} AND table_name = '${parsedTablePath.tableName}' AND column_name = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrPath: Table|string, column: TableColumn): Promise<void> {\r\n        const up = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} ADD ${this.buildCreateColumnSql(column, false)}`;\r\n        const down = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} DROP \"${column.name}\"`;\r\n        return this.schemaQuery(up, down);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const queries = columns.map(column => this.addColumn(tableOrName as any, column));\r\n        await Promise.all(queries);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n\r\n        let table: Table|undefined = undefined;\r\n        if (tableOrName instanceof Table) {\r\n            table = tableOrName;\r\n        } else {\r\n            table = await this.getTable(tableOrName);\r\n        }\r\n\r\n        if (!table)\r\n            throw new Error(`Table ${tableOrName} was not found.`);\r\n\r\n        let oldColumn: TableColumn|undefined = undefined;\r\n        if (oldTableColumnOrName instanceof TableColumn) {\r\n            oldColumn = oldTableColumnOrName;\r\n        } else {\r\n            oldColumn = table.columns.find(column => column.name === oldTableColumnOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${tableOrName}\" table.`);\r\n\r\n        let newColumn: TableColumn|undefined = undefined;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n\r\n        let table: Table|undefined = undefined;\r\n        const sql: Array<{up: string, down: string}> = [];\r\n\r\n        if (tableOrName instanceof Table) {\r\n            table = tableOrName;\r\n        } else {\r\n            table = await this.getTable(tableOrName);\r\n        }\r\n\r\n        if (!table)\r\n            throw new Error(`Table ${tableOrName} was not found.`);\r\n\r\n        let oldColumn: TableColumn|undefined = undefined;\r\n        if (oldTableColumnOrName instanceof TableColumn) {\r\n            oldColumn = oldTableColumnOrName;\r\n        } else {\r\n            oldColumn = table.columns.find(column => column.name === oldTableColumnOrName);\r\n        }\r\n\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${tableOrName}\" table.`);\r\n\r\n        if (this.connection.driver.createFullType(oldColumn) !== this.connection.driver.createFullType(newColumn) ||\r\n            oldColumn.name !== newColumn.name) {\r\n\r\n            let up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (this.connection.driver.createFullType(oldColumn) !== this.connection.driver.createFullType(newColumn)) {\r\n                up += ` TYPE ${this.connection.driver.createFullType(newColumn)}`;\r\n            }\r\n            if (oldColumn.name !== newColumn.name) { // todo: make rename in a separate query too. Need also change sequences and their defaults\r\n                up += ` RENAME TO ` + newColumn.name;\r\n            }\r\n            sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n        }\r\n\r\n        if (oldColumn.isNullable !== newColumn.isNullable) {\r\n            let up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ALTER COLUMN \"${oldColumn.name}\"`;\r\n            if (newColumn.isNullable) {\r\n                up += ` DROP NOT NULL`;\r\n            } else {\r\n                up += ` SET NOT NULL`;\r\n            }\r\n\r\n            sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n        }\r\n\r\n        // update sequence generation\r\n        if (oldColumn.isGenerated !== newColumn.isGenerated) {\r\n            const schema = table.schema || this.driver.options.schema;\r\n            if (!oldColumn.isGenerated && newColumn.type !== \"uuid\") {\r\n                const up = schema\r\n                    ? `CREATE SEQUENCE \"${schema}\".\"${table.name}_${oldColumn.name}_seq\" OWNED BY ${this.escapeTablePath(table)}.\"${oldColumn.name}\"`\r\n                    : `CREATE SEQUENCE \"${table.name}_${oldColumn.name}_seq\" OWNED BY ${this.escapeTablePath(table)}.\"${oldColumn.name}\"`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n\r\n                const up2 = schema\r\n                    ? `ALTER TABLE ${this.escapeTablePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${schema}.${table.name}_${oldColumn.name}_seq\"')`\r\n                    : `ALTER TABLE ${this.escapeTablePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT nextval('\"${table.name}_${oldColumn.name}_seq\"')`;\r\n                sql.push({up: up2, down: `-- TODO: revert ${up2}`}); // TODO: Add revert logic\r\n            } else {\r\n                const up = `ALTER TABLE ${this.escapeTablePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n\r\n                const up2 = schema\r\n                    ? `DROP SEQUENCE \"${schema}\".\"${table.name}_${oldColumn.name}_seq\"`\r\n                    : `DROP SEQUENCE \"${table.name}_${oldColumn.name}_seq\"`;\r\n                sql.push({up: up2, down: `-- TODO: revert ${up2}`}); // TODO: Add revert logic\r\n            }\r\n        }\r\n\r\n        if (oldColumn.comment !== newColumn.comment) {\r\n            const up = `COMMENT ON COLUMN ${this.escapeTablePath(tableOrName)}.\"${oldColumn.name}\" is '${newColumn.comment}'`;\r\n            sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n        }\r\n\r\n        if (oldColumn.isUnique !== newColumn.isUnique) {\r\n            if (newColumn.isUnique === true) {\r\n                const up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ADD CONSTRAINT \"uk_${table.name}_${newColumn.name}\" UNIQUE (\"${newColumn.name}\")`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n            } else if (newColumn.isUnique === false) {\r\n                const up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} DROP CONSTRAINT \"uk_${table.name}_${newColumn.name}\"`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n            }\r\n\r\n        }\r\n\r\n        if (newColumn.default !== oldColumn.default) {\r\n            if (newColumn.default !== null && newColumn.default !== undefined) {\r\n                const up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n\r\n            } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\r\n                const up = `ALTER TABLE ${this.escapeTablePath(tableOrName)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`;\r\n                sql.push({up, down: `-- TODO: revert ${up}`}); // TODO: Add revert logic\r\n            }\r\n        }\r\n\r\n        await Promise.all(sql.map(({up, down}) => this.schemaQuery(up, down)));\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(table: Table, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        const updatePromises = changedColumns.map(async changedColumn => {\r\n            return this.changeColumn(table, changedColumn.oldColumn, changedColumn.newColumn);\r\n        });\r\n\r\n        await Promise.all(updatePromises);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(table: Table, column: TableColumn): Promise<void> {\r\n        const up = `ALTER TABLE ${this.escapeTablePath(table)} DROP \"${column.name}\"`;\r\n        const down = `ALTER TABLE ${this.escapeTablePath(table)} ADD ${this.buildCreateColumnSql(column, false)}`;\r\n\r\n        return this.schemaQuery(up, down);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(table: Table, columns: TableColumn[]): Promise<void> {\r\n        const dropPromises = columns.map(column => this.dropColumn(table, column));\r\n        await Promise.all(dropPromises);\r\n    }\r\n\r\n    /**\r\n     * Updates table's primary keys.\r\n     */\r\n    async updatePrimaryKeys(table: Table): Promise<void> {\r\n        const primaryColumnNames = table.primaryKeys.map(primaryKey => `\"${primaryKey.columnName}\"`);\r\n\r\n        const up = `ALTER TABLE ${this.escapeTablePath(table)} DROP CONSTRAINT IF EXISTS \"${table.name}_pkey\"`;\r\n        const down = `-- TODO: revert ${up}`;\r\n        await this.schemaQuery(up, down); // TODO: Add revert logic\r\n\r\n        const up2 = `DROP INDEX IF EXISTS \"${table.name}_pkey\"`;\r\n        const down2 = `-- TODO: revert ${up2}`;\r\n        await this.schemaQuery(up2, down2); // TODO: Add revert logic\r\n\r\n        if (primaryColumnNames.length > 0) {\r\n            const up3 = `ALTER TABLE ${this.escapeTablePath(table)} ADD PRIMARY KEY (${primaryColumnNames.join(\", \")})`;\r\n            const down3 = `ALTER TABLE ${this.escapeTablePath(table)} DROP PRIMARY KEY (${primaryColumnNames.join(\", \")})`;\r\n            await this.schemaQuery(up3, down3);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const {add: up, drop: down} = this.foreignKeySql(tableOrName, foreignKey);\r\n        return this.schemaQuery(up, down);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const {add: down, drop: up} = this.foreignKeySql(tableOrName, foreignKey);\r\n        return this.schemaQuery(up, down);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName as any, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(table: Table|string, index: TableIndex): Promise<void> {\r\n        const columnNames = index.columnNames.map(columnName => `\"${columnName}\"`).join(\",\");\r\n\r\n        const up = `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapeTablePath(table)}(${columnNames})`;\r\n        const down = `-- TODO: revert ${up}`;\r\n        await this.schemaQuery(up, down); // TODO: Add revert logic\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableSchemeOrPath: Table|string, indexName: string): Promise<void> {\r\n        const schema = this.extractSchema(tableSchemeOrPath);\r\n        const up = schema ? `DROP INDEX \"${schema}\".\"${indexName}\"` : `DROP INDEX \"${indexName}\"`; // todo: make sure DROP INDEX should not be used here\r\n        const down = `-- TODO: revert ${up}`;\r\n        await this.schemaQuery(up, down); // TODO: Add revert logic\r\n    }\r\n\r\n    /**\r\n     * Truncates table.\r\n     */\r\n    async truncate(tablePath: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapeTablePath(tablePath)}`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(schemas?: string[]): Promise<void> {\r\n        if (!schemas)\r\n            schemas = [];\r\n        schemas.push(this.driver.options.schema || \"current_schema()\");\r\n        const schemaNamesString = schemas.map(name => {\r\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\r\n        }).join(\", \");\r\n\r\n        await this.startTransaction();\r\n        try {\r\n            const selectDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as query FROM pg_tables WHERE schemaname IN (${schemaNamesString})`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        this.sqlMemoryMode = true;\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        this.sqlsInMemory = [];\r\n        this.sqlMemoryMode = false;\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): (string|{ up: string, down: string })[] {\r\n        return this.sqlsInMemory;\r\n    }\r\n\r\n  /**\r\n   * Executes sql used special for schema build.\r\n   */\r\n    protected async schemaQuery(upQuery: string, downQuery: string): Promise<void> {\r\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\r\n        if (this.sqlMemoryMode === true) {\r\n          this.sqlsInMemory.push({up: upQuery, down: downQuery});\r\n          return Promise.resolve() as Promise<any>;\r\n        }\r\n\r\n        await this.query(upQuery);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts schema name from given Table object or tablePath string.\r\n     */\r\n    protected extractSchema(tableOrPath: Table|string): string|undefined {\r\n        if (tableOrPath instanceof Table) {\r\n            return tableOrPath.schema || this.driver.options.schema;\r\n        } else {\r\n            return tableOrPath.indexOf(\".\") === -1 ? this.driver.options.schema : tableOrPath.split(\".\")[0];\r\n        }\r\n    }\r\n\r\n    protected foreignKeySql(tableOrPath: Table|string, foreignKey: TableForeignKey): { add: string, drop: string } {\r\n        let add = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} ADD CONSTRAINT \"${foreignKey.name}\" ` +\r\n            `FOREIGN KEY (\"${foreignKey.columnNames.join(\"\\\", \\\"\")}\") ` +\r\n            `REFERENCES ${this.escapeTablePath(foreignKey.referencedTablePath)}(\"${foreignKey.referencedColumnNames.join(\"\\\", \\\"\")}\")`;\r\n\r\n        if (foreignKey.onDelete) add += \" ON DELETE \" + foreignKey.onDelete;\r\n        const drop = `ALTER TABLE ${this.escapeTablePath(tableOrPath)} DROP CONSTRAINT \"${foreignKey.name}\"`;\r\n\r\n        return {add, drop};\r\n    }\r\n\r\n    /**\r\n     * Escapes given table path.\r\n     */\r\n    protected escapeTablePath(tableOrPath: Table|string, disableEscape?: boolean): string {\r\n        if (tableOrPath instanceof Table) {\r\n            const schema = tableOrPath.schema || this.driver.options.schema;\r\n            if (schema) {\r\n                tableOrPath = `${schema}.${tableOrPath.name}`;\r\n            } else {\r\n                tableOrPath = tableOrPath.name;\r\n            }\r\n        } else {\r\n            tableOrPath = tableOrPath.indexOf(\".\") === -1 && this.driver.options.schema ? this.driver.options.schema + \".\" + tableOrPath : tableOrPath;\r\n        }\r\n\r\n        return tableOrPath.split(\".\").map(i => {\r\n            return disableEscape ? i : `\"${i}\"`;\r\n        }).join(\".\");\r\n    }\r\n\r\n    protected parseTablePath(tablePath: string): any {\r\n        if (tablePath.indexOf(\".\") === -1) {\r\n            return {\r\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema()\",\r\n                tableName: `'${tablePath}'`\r\n            };\r\n        } else {\r\n            return {\r\n                schema: `'${tablePath.split(\".\")[0]}'`,\r\n                tableName: `'${tablePath.split(\".\")[1]}'`\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => \"\\\"\" + key + \"\\\"=$\" + (startIndex + index + 1));\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: TableColumn, skipPrimary: boolean) {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") { // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            if (column.type === \"integer\")\r\n                c += \" SERIAL\";\r\n            if (column.type === \"smallint\")\r\n                c += \" SMALLSERIAL\";\r\n            if (column.type === \"bigint\")\r\n                c += \" BIGSERIAL\";\r\n        }\r\n        if (!column.isGenerated || column.type === \"uuid\")\r\n            c += \" \" + this.connection.driver.createFullType(column);\r\n        if (column.charset)\r\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\r\n        if (column.collation)\r\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        // if (column.isPrimary)\r\n        //     c += \" PRIMARY KEY\";\r\n        if (column.default !== undefined && column.default !== null) { // todo: same code in all drivers. make it DRY\r\n            c += \" DEFAULT \" + column.default;\r\n        }\r\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default)\r\n            c += \" DEFAULT uuid_generate_v4()\";\r\n        return c;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/driver/types/ColumnTypes.ts"],"names":[],"mappings":"AA8JA,iFAAiF;AACjF,qFAAqF;AAErF,4EAA4E;AAC5E,eAAe;AACf,4EAA4E;AAC5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6GAuF6G;AAC7G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkLG","file":"ColumnTypes.js","sourcesContent":["/**\r\n * Column types where precision and scale properties are used.\r\n */\r\nexport type PrimaryGeneratedColumnType = \"int\" // mysql, mssql, oracle, sqlite\r\n    |\"int2\" // postgres, sqlite\r\n    |\"int2\" // postgres, sqlite\r\n    |\"int4\" // postgres\r\n    |\"int8\" // postgres, sqlite\r\n    |\"integer\" // postgres, oracle, sqlite\r\n    |\"tinyint\" // mysql, mssql, sqlite\r\n    |\"smallint\" // mysql, postgres, mssql, oracle, sqlite\r\n    |\"mediumint\" // mysql, sqlite\r\n    |\"bigint\" // mysql, postgres, mssql, sqlite\r\n    |\"dec\" // oracle, mssql\r\n    |\"decimal\" // mysql, postgres, mssql, sqlite\r\n    |\"numeric\" // postgres, mssql, sqlite\r\n    |\"number\"; // oracle\r\n\r\n/**\r\n * Column types where precision and scale properties are used.\r\n */\r\nexport type WithPrecisionColumnType = \"float\" // mysql, mssql, oracle, sqlite\r\n    |\"double\" // mysql, sqlite\r\n    |\"dec\" // oracle, mssql\r\n    |\"decimal\" // mysql, postgres, mssql, sqlite\r\n    |\"numeric\" // postgres, mssql, sqlite\r\n    |\"real\" // mysql, postgres, mssql, oracle, sqlite\r\n    |\"double precision\" // postgres, oracle, sqlite\r\n    |\"number\" // oracle\r\n    |\"datetime\" // mssql, mysql, sqlite\r\n    |\"datetime2\" // mssql\r\n    |\"datetimeoffset\" // mssql\r\n    |\"time\" // mysql, postgres, mssql\r\n    |\"time with time zone\" // postgres\r\n    |\"time without time zone\" // postgres\r\n    |\"timestamp\" // mysql, postgres, mssql, oracle\r\n    |\"timestamp without time zone\" // postgres\r\n    |\"timestamp with time zone\"; // postgres, oracle\r\n\r\n/**\r\n * Column types where column length is used.\r\n */\r\nexport type WithLengthColumnType = \"int\" // mysql, postgres, mssql, oracle, sqlite\r\n    |\"tinyint\" // mysql, mssql, sqlite\r\n    |\"smallint\" // mysql, postgres, mssql, oracle, sqlite\r\n    |\"mediumint\" // mysql, sqlite\r\n    |\"bigint\" // mysql, postgres, mssql, sqlite\r\n    |\"character varying\" // postgres\r\n    |\"varying character\" // sqlite\r\n    |\"nvarchar\" // mssql\r\n    |\"character\" // mysql, postgres, sqlite\r\n    |\"native character\" // sqlite\r\n    |\"varchar\" // mysql, postgres, mssql, sqlite\r\n    |\"char\" // mysql, postgres, mssql, oracle\r\n    |\"nchar\" // mssql, oracle, sqlite\r\n    |\"varchar2\" // oracle\r\n    |\"nvarchar2\" // oracle, sqlite\r\n    |\"binary\" // mssql\r\n    |\"varbinary\"; // mssql\r\n\r\n/**\r\n * All other regular column types.\r\n */\r\nexport type SimpleColumnType =\r\n\r\n    \"simple-array\" // typeorm-specific, automatically mapped to string\r\n    // |\"string\" // typeorm-specific, automatically mapped to varchar depend on platform\r\n\r\n    |\"simple-json\" // typeorm-specific, automatically mapped to string\r\n\r\n    // numeric types\r\n    |\"bit\" // mssql\r\n    |\"int2\" // postgres, sqlite\r\n    |\"integer\" // postgres, oracle, sqlite\r\n    |\"int4\" // postgres\r\n    |\"int8\" // postgres, sqlite\r\n    |\"unsigned big int\" // sqlite\r\n    |\"float4\" // postgres\r\n    |\"float8\" // postgres\r\n    |\"smallmoney\" // mssql\r\n    |\"money\" // postgres, mssql\r\n\r\n    // boolean types\r\n    |\"boolean\" // postgres, sqlite\r\n    |\"bool\" // postgres\r\n\r\n    // text/binary types\r\n    |\"tinyblob\" // mysql\r\n    |\"tinytext\" // mysql\r\n    |\"mediumblob\" // mysql\r\n    |\"mediumtext\" // mysql\r\n    |\"blob\" // mysql, oracle, sqlite\r\n    |\"text\" // mysql, postgres, mssql, sqlite\r\n    |\"ntext\" // mssql\r\n    |\"citext\" // postgres\r\n    |\"longblob\" // mysql\r\n    |\"longtext\" // mysql\r\n    |\"bytea\" // postgres\r\n    |\"long\" // oracle\r\n    |\"raw\" // oracle\r\n    |\"long raw\" // oracle\r\n    |\"bfile\" // oracle\r\n    |\"clob\" // oracle, sqlite\r\n    |\"nclob\" // oracle\r\n    |\"image\" // mssql\r\n\r\n    // date types\r\n    |\"timestamp with local time zone\" // oracle\r\n    |\"smalldatetime\" // mssql\r\n    |\"date\" // mysql, postgres, mssql, oracle, sqlite\r\n    |\"interval year\" // oracle\r\n    |\"interval day\" // oracle\r\n    |\"interval\" // postgres\r\n    |\"year\" // mysql\r\n\r\n    // geometric types\r\n    |\"point\" // postgres\r\n    |\"line\" // postgres\r\n    |\"lseg\" // postgres\r\n    |\"box\" // postgres\r\n    |\"circle\" // postgres\r\n    |\"path\" // postgres\r\n    |\"polygon\" // postgres\r\n\r\n    // other types\r\n    |\"enum\" // mysql, postgres\r\n    |\"cidr\" // postgres\r\n    |\"inet\" // postgres\r\n    |\"macaddr\"// postgres\r\n    |\"bit\" // postgres\r\n    |\"bit varying\" // postgres\r\n    |\"varbit\"// postgres\r\n    |\"tsvector\" // postgres\r\n    |\"tsquery\" // postgres\r\n    |\"uuid\" // postgres\r\n    |\"xml\" // mssql, postgres\r\n    |\"json\" // mysql, postgres\r\n    |\"jsonb\" // postgres\r\n    |\"varbinary\" // mssql\r\n    |\"cursor\" // mssql\r\n    |\"hierarchyid\" // mssql\r\n    |\"sql_variant\" // mssql\r\n    |\"table\" // mssql\r\n    |\"rowid\" // oracle\r\n    |\"urowid\" // oracle\r\n    |\"uniqueidentifier\"; // mssql\r\n\r\n/**\r\n * Any column type column can be.\r\n */\r\nexport type ColumnType = WithPrecisionColumnType\r\n    |WithLengthColumnType\r\n    |SimpleColumnType\r\n    |BooleanConstructor\r\n    |DateConstructor\r\n    |NumberConstructor\r\n    |StringConstructor;\r\n\r\n// \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\r\n// \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Merged Types\r\n// -------------------------------------------------------------------------\r\n/*\r\n/!**\r\n * Column types where column length is used.\r\n *!/\r\nexport type WithLengthColumnType =\r\n    VarcharColumnType|\r\n    CharColumnType|\r\n    IntervalColumnType|\r\n    BitColumnType|\r\n    VarbitColumnType;\r\n\r\n/!**\r\n * Column types where time options are used.\r\n *!/\r\nexport type WithTimeColumnType =\r\n    TimeColumnType|\r\n    TimestampColumnType;\r\n\r\n/!**\r\n * All other column types without extra options used.\r\n *!/\r\nexport type SimpleColumnType =\r\n    SmallintColumnType|\r\n    IntegerColumnType|\r\n    BigintColumnType|\r\n    DecimalColumnType|\r\n    RealColumnType|\r\n    DoublePrecisionColumnType|\r\n    SmallserialColumnType|\r\n    SerialColumnType|\r\n    BigserialColumnType|\r\n    MoneyColumnType|\r\n    TextColumnType|\r\n    ByteaColumnType|\r\n    DateColumnType|\r\n    BooleanColumnType|\r\n    PointColumnType|\r\n    LineColumnType|\r\n    LsegColumnType|\r\n    BoxColumnType|\r\n    CircleColumnType|\r\n    PathColumnType|\r\n    PolygonColumnType|\r\n    CidrColumnType|\r\n    InetColumnType|\r\n    MacaddrColumnType|\r\n    TsvectorColumnType|\r\n    TsqueryColumnType|\r\n    UUIDColumnType|\r\n    XmlColumnType|\r\n    JsonColumnType|\r\n    JsonbColumnType;\r\n\r\n/!**\r\n * All column types supported by a database.\r\n *!/\r\nexport type AllColumnType =\r\n    SimpleColumnType|\r\n    WithLengthColumnType|\r\n    WithTimeColumnType|\r\n    NumericColumnType|\r\n    EnumColumnType;\r\n\r\n\r\n/!**\r\n * All data types that column can be.\r\n *!/\r\nexport type ColumnType =\r\n    \"tinyint\"|\r\n    \"smallint\"|\r\n    \"int2\"|\r\n    \"mediumint\"|\r\n    \"integer\"|\r\n    \"int\"|\r\n    \"int4\"|\r\n    \"bigint\"|\r\n    \"int8\"|\r\n    \"decimal\"|\r\n    \"numeric\"|\r\n    \"real\"|\r\n    \"float4\"|\r\n    \"float\"|\r\n    \"double\"|\r\n    \"double precision\"|\r\n    \"numeric\"|\r\n    \"decimal\"|\r\n    \"string\"|\"text\"|\"number\"|\"integer\"|\"int\"|\"smallint\"|\"bigint\"|\"float\"|\"double\"|\r\n                         \"decimal\"|\"date\"|\"time\"|\"datetime\"|\"boolean\"|\"json\"|\"jsonb\"|\"simple_array\"|\"uuid\";*/\r\n/*\r\n\r\n/!**\r\n * All data types that column can be.\r\n *!/\r\nexport class ColumnTypes {\r\n\r\n    /!**\r\n     * SQL VARCHAR type. Your class's property type should be a \"string\".\r\n     *!/\r\n    static STRING: ColumnType = \"string\";\r\n\r\n    /!**\r\n     * SQL CLOB type. Your class's property type should be a \"string\".\r\n     *!/\r\n    static TEXT: ColumnType = \"text\";\r\n\r\n    /!**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static NUMBER: ColumnType = \"number\";\r\n\r\n    /!**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static INTEGER: ColumnType = \"integer\";\r\n\r\n    /!**\r\n     * SQL INT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static INT: ColumnType = \"int\";\r\n\r\n    /!**\r\n     * SQL SMALLINT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static SMALLINT: ColumnType = \"smallint\";\r\n\r\n    /!**\r\n     * SQL BIGINT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static BIGINT: ColumnType = \"bigint\";\r\n\r\n    /!**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static FLOAT: ColumnType = \"float\";\r\n\r\n    /!**\r\n     * SQL FLOAT type. Your class's property type should be a \"number\".\r\n     *!/\r\n    static DOUBLE: ColumnType = \"double\";\r\n\r\n    /!**\r\n     * SQL DECIMAL type. Your class's property type should be a \"string\".\r\n     *!/\r\n    static DECIMAL: ColumnType = \"decimal\";\r\n\r\n    /!**\r\n     * SQL DATETIME type. Your class's property type should be a \"Date\" object.\r\n     *!/\r\n    static DATE: ColumnType = \"date\";\r\n\r\n    /!**\r\n     * SQL TIME type. Your class's property type should be a \"Date\" object.\r\n     *!/\r\n    static TIME: ColumnType = \"time\";\r\n\r\n    /!**\r\n     * SQL DATETIME/TIMESTAMP type. Your class's property type should be a \"Date\" object.\r\n     *!/\r\n    static DATETIME: ColumnType = \"datetime\";\r\n\r\n    /!**\r\n     * SQL BOOLEAN type. Your class's property type should be a \"boolean\".\r\n     *!/\r\n    static BOOLEAN: ColumnType = \"boolean\";\r\n\r\n    /!**\r\n     * SQL CLOB type. Your class's property type should be any Object.\r\n     *!/\r\n    static JSON: ColumnType = \"json\";\r\n\r\n    /!**\r\n     * Postgres jsonb type. Your class's property type should be any Object.\r\n     *!/\r\n    static JSONB: ColumnType = \"jsonb\";\r\n\r\n    /!**\r\n     * SQL CLOB type. Your class's property type should be array of string. Note: value in this column should not contain\r\n     * a comma (\",\") since this symbol is used to create a string from the array, using .join(\",\") operator.\r\n     *!/\r\n    static SIMPLE_ARRAY: ColumnType = \"simple_array\";\r\n\r\n    /!**\r\n     * UUID type. Serialized to a string in typescript or javascript\r\n     *!/\r\n    static UUID: ColumnType = \"uuid\";\r\n\r\n    /!**\r\n     * Checks if given type in a string format is supported by ORM.\r\n     *!/\r\n    static isTypeSupported(type: string) {\r\n        return this.supportedTypes.indexOf(<ColumnType> type) !== -1;\r\n    }\r\n\r\n    /!**\r\n     * Returns list of all supported types by the ORM.\r\n     *!/\r\n    static get supportedTypes() {\r\n        return [\r\n            this.STRING,\r\n            this.TEXT,\r\n            this.NUMBER,\r\n            this.INTEGER,\r\n            this.INT,\r\n            this.SMALLINT,\r\n            this.BIGINT,\r\n            this.FLOAT,\r\n            this.DOUBLE,\r\n            this.DECIMAL,\r\n            this.DATE,\r\n            this.TIME,\r\n            this.DATETIME,\r\n            this.BOOLEAN,\r\n            this.JSON,\r\n            this.JSONB,\r\n            this.SIMPLE_ARRAY,\r\n            this.UUID\r\n        ];\r\n    }\r\n\r\n    /!**\r\n     * Tries to guess a column type from the given function.\r\n     *!/\r\n    static determineTypeFromFunction(type: Function): ColumnType|undefined {\r\n        if (type instanceof Date) {\r\n            return ColumnTypes.DATETIME;\r\n\r\n        } else if (type instanceof Function) {\r\n            const typeName = (<any>type).name.toLowerCase();\r\n            switch (typeName) {\r\n                case \"number\":\r\n                    return ColumnTypes.NUMBER;\r\n                case \"boolean\":\r\n                    return ColumnTypes.BOOLEAN;\r\n                case \"string\":\r\n                    return ColumnTypes.STRING;\r\n                case \"date\":\r\n                    return ColumnTypes.DATETIME;\r\n                case \"object\":\r\n                    return ColumnTypes.JSON;\r\n            }\r\n\r\n        } else if (type instanceof Object) {\r\n            return ColumnTypes.JSON;\r\n\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    static typeToString(type: Function): string {\r\n        return (type as any).name.toLowerCase();\r\n    }\r\n\r\n    /!**\r\n     * Checks if column type is numeric.\r\n     *!/\r\n    static isNumeric(type: ColumnType) {\r\n        return  type === ColumnTypes.NUMBER ||\r\n                type === ColumnTypes.INT ||\r\n                type === ColumnTypes.INTEGER ||\r\n                type === ColumnTypes.BIGINT ||\r\n                type === ColumnTypes.SMALLINT ||\r\n                type === ColumnTypes.DOUBLE ||\r\n                type === ColumnTypes.FLOAT;\r\n    }\r\n\r\n}*/\r\n"],"sourceRoot":"../.."}
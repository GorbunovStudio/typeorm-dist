{"version":3,"sources":["../browser/src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DateUtils} from \"../../util/DateUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\r\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\r\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\r\nimport {TableColumn} from \"../../schema-builder/schema/TableColumn\";\r\nimport {RandomGenerator} from \"../../util/RandomGenerator\";\r\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class MysqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Mysql underlying library.\r\n     */\r\n    mysql: any;\r\n\r\n    /**\r\n     * Connection pool.\r\n     * Used in non-replication mode.\r\n     */\r\n    pool: any;\r\n\r\n    /**\r\n     * Pool cluster used in replication mode.\r\n     */\r\n    poolCluster: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: MysqlConnectionOptions;\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true;\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\r\n     * @see https://dev.mysql.com/doc/refman/5.7/en/data-types.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"float\",\r\n        \"double\",\r\n        \"decimal\",\r\n        \"date\",\r\n        \"datetime\",\r\n        \"timestamp\",\r\n        \"time\",\r\n        \"year\",\r\n        \"char\",\r\n        \"varchar\",\r\n        \"blob\",\r\n        \"text\",\r\n        \"tinyblob\",\r\n        \"tinytext\",\r\n        \"mediumblob\",\r\n        \"mediumtext\",\r\n        \"longblob\",\r\n        \"longtext\",\r\n        \"enum\",\r\n        \"json\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"char\",\r\n        \"varchar\",\r\n        \"blob\",\r\n        \"text\"\r\n    ];\r\n\r\n    /**\r\n     * ORM has special columns and we need to know what database column types should be for those columns.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"datetime\",\r\n        createDatePrecision: 6,\r\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        updateDate: \"datetime\",\r\n        updateDatePrecision: 6,\r\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"text\",\r\n        cacheResult: \"text\",\r\n    };\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        varchar: { length: 255 },\r\n        int: { length: 11 },\r\n        tinyint: { length: 4 },\r\n        smallint: { length: 5 },\r\n        mediumint: { length: 9 },\r\n        bigint: { length: 20 },\r\n        year: { length: 4 }\r\n    };\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection;\r\n        this.options = connection.options as MysqlConnectionOptions;\r\n        this.isReplicated = this.options.replication ? true : false;\r\n\r\n        // load mysql package\r\n        this.loadDependencies();\r\n\r\n        // validate options to make sure everything is set\r\n        // todo: revisit validation with replication in mind\r\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\r\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        // if (!this.options.database)\r\n        //     throw new DriverOptionNotSetError(\"database\");\r\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\r\n        // todo: provide options to auto-create a database if it does not exist yet\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n\r\n        if (this.options.replication) {\r\n            this.poolCluster = this.mysql.createPoolCluster(this.options.replication);\r\n            this.options.replication.slaves.forEach((slave, index) => {\r\n                this.poolCluster.add(\"SLAVE\" + index, this.createConnectionOptions(this.options, slave));\r\n            });\r\n            this.poolCluster.add(\"MASTER\", this.createConnectionOptions(this.options, this.options.replication.master));\r\n            this.database = this.options.replication.master.database;\r\n\r\n        } else {\r\n            this.pool = await this.createPool(this.createConnectionOptions(this.options, this.options));\r\n            this.database = this.options.database;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.poolCluster && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\r\n\r\n        if (this.poolCluster) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.poolCluster.end((err: any) => err ? fail(err) : ok());\r\n                this.poolCluster = undefined;\r\n            });\r\n        }\r\n        if (this.pool) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.pool.end((err: any) => {\r\n                    if (err) return fail(err);\r\n                    this.pool = undefined;\r\n                    ok();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection);\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\r\n        return new MysqlQueryRunner(this, mode);\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Function) {\r\n                return value();\r\n\r\n            } else {\r\n                escapedParameters.push(parameters[key.substr(1)]);\r\n                return \"?\";\r\n            }\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.to(value);\r\n\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0;\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            return JSON.stringify(value);\r\n\r\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            return DateUtils.mixedDateToDate(value);\r\n\r\n        } else if (columnMetadata.isGenerated && columnMetadata.generationStrategy === \"uuid\" && !value) {\r\n            return RandomGenerator.uuid4();\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            return DateUtils.simpleArrayToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            value = value ? true : false;\r\n\r\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            value = DateUtils.normalizeHydratedDate(value);\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            value = DateUtils.stringToSimpleArray(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.from(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: { type: ColumnType, length?: number | string, precision?: number, scale?: number }): string {\r\n        if (column.type === Number || column.type === \"integer\") {\r\n            return \"int\";\r\n\r\n        } else if (column.type === String) {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === Date) {\r\n            return \"datetime\";\r\n\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n\r\n        } else if (column.type === Boolean) {\r\n            return \"tinyint\";\r\n\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === \"simple-array\") {\r\n            return \"text\";\r\n\r\n        } else if (column.type === \"simple-json\") {\r\n            return \"text\";\r\n\r\n        } else {\r\n            return column.type as string || \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(column: ColumnMetadata): string {\r\n        if (typeof column.default === \"number\") {\r\n            return \"\" + column.default;\r\n\r\n        } else if (typeof column.default === \"boolean\") {\r\n            return column.default === true ? \"1\" : \"0\";\r\n\r\n        } else if (typeof column.default === \"function\") {\r\n            return column.default();\r\n\r\n        } else if (typeof column.default === \"string\") {\r\n            return `'${column.default}'`;\r\n\r\n        } else {\r\n            return column.default;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.isUnique ||\r\n            !!column.entityMetadata.indices.find(index => index.isUnique && index.columns.length === 1 && index.columns[0] === column);\r\n    }\r\n\r\n    /**\r\n     * Calculates column length taking into account the default length values.\r\n     */\r\n    getColumnLength(column: ColumnMetadata): string {\r\n\r\n        if (column.length)\r\n            return column.length;\r\n\r\n        const normalizedType = this.normalizeType(column) as string;\r\n        if (this.dataTypeDefaults && this.dataTypeDefaults[normalizedType] && this.dataTypeDefaults[normalizedType].length)\r\n            return this.dataTypeDefaults[normalizedType].length!.toString();\r\n\r\n        return \"\";\r\n    }\r\n\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type;\r\n\r\n        if (column.length) {\r\n            type += \"(\" + column.length + \")\";\r\n        } else if (column.precision && column.scale) {\r\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\r\n        } else if (column.precision) {\r\n            type +=  \"(\" + column.precision + \")\";\r\n        } else if (column.scale) {\r\n            type +=  \"(\" + column.scale + \")\";\r\n        } else  if (this.dataTypeDefaults && this.dataTypeDefaults[column.type] && this.dataTypeDefaults[column.type].length) {\r\n            type +=  \"(\" + this.dataTypeDefaults[column.type].length!.toString() + \")\";\r\n        }\r\n\r\n        if (column.isArray)\r\n            type += \" array\";\r\n\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return new Promise<any>((ok, fail) => {\r\n            if (this.poolCluster) {\r\n                this.poolCluster.getConnection(\"MASTER\", (err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n\r\n            } else if (this.pool) {\r\n                this.pool.getConnection((err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n            } else {\r\n                fail(new Error(`Connection is not established with mysql database`));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        if (!this.poolCluster)\r\n            return this.obtainMasterConnection();\r\n\r\n        return new Promise<any>((ok, fail) => {\r\n            this.poolCluster.getConnection(\"SLAVE*\", (err: any, dbConnection: any) => {\r\n                err ? fail(err) : ok(dbConnection);\r\n            });\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\r\n\r\n        } catch (e) {\r\n            try {\r\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createConnectionOptions(options: MysqlConnectionOptions, credentials: MysqlConnectionCredentialsOptions): Promise<any> {\r\n\r\n        credentials = Object.assign(credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\r\n\r\n        // build connection options for the driver\r\n        return Object.assign({}, {\r\n            charset: options.charset,\r\n            timezone: options.timezone,\r\n            connectTimeout: options.connectTimeout,\r\n            insecureAuth: options.insecureAuth,\r\n            supportBigNumbers: options.supportBigNumbers,\r\n            bigNumberStrings: options.bigNumberStrings,\r\n            dateStrings: options.dateStrings,\r\n            debug: options.debug,\r\n            trace: options.trace,\r\n            multipleStatements: options.multipleStatements,\r\n            flags: options.flags\r\n        }, {\r\n            host: credentials.host,\r\n            user: credentials.username,\r\n            password: credentials.password,\r\n            database: credentials.database,\r\n            port: credentials.port,\r\n            ssl: options.ssl\r\n        }, options.extra || {});\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createPool(connectionOptions: any): Promise<any> {\r\n\r\n        // create a connection pool\r\n        const pool = this.mysql.createPool(connectionOptions);\r\n\r\n        // make sure connection is working fine\r\n        return new Promise<void>((ok, fail) => {\r\n            // (issue #610) we make first connection to database to make sure if connection credentials are wrong\r\n            // we give error before calling any other method that creates actual query runner\r\n            pool.getConnection((err: any, connection: any) => {\r\n                if (err)\r\n                    return pool.end(() => fail(err));\r\n\r\n                connection.release();\r\n                ok(pool);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\r\n     */\r\n    private prepareDbConnection(connection: any): any {\r\n        const { logger } = this.connection;\r\n        /*\r\n          Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\r\n          cause the hosting app to crash.\r\n         */\r\n        if (connection.listeners(\"error\").length === 0) {\r\n            connection.on(\"error\", (error: any) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\r\n        }\r\n        return connection;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}
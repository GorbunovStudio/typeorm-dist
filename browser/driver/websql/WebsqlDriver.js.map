{"version":3,"sources":["../browser/src/driver/websql/WebsqlDriver.ts"],"names":[],"mappings":"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","file":"WebsqlDriver.js","sourcesContent":["import {DriverUtils} from \"../DriverUtils\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\r\nimport {WebsqlQueryRunner} from \"./WebsqlQueryRunner\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {WebSqlConnectionOptions} from \"./WebSqlConnectionOptions\";\r\nimport {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\r\n\r\n/**\r\n * Organizes communication with WebSQL in the browser.\r\n */\r\nexport class WebsqlDriver extends AbstractSqliteDriver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: WebSqlConnectionOptions;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n        \r\n        this.options = connection.options as WebSqlConnectionOptions;\r\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\r\n        this.database = this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        // if (!this.options.host)\r\n        //     throw new DriverOptionNotSetError(\"host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n        // todo: what about extra options: version, description, size\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    disconnect(): Promise<void> {\r\n        return Promise.resolve();\r\n        // if (!this.databaseConnection)\r\n        //     throw new ConnectionIsNotSetError(\"websql\");\r\n\r\n        // return new Promise<void>((ok, fail) => {\r\n            // const handler = (err: any) => err ? fail(err) : ok();\r\n            // todo: find out how to close connection\r\n            // ok();\r\n        // });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): WebsqlQueryRunner {\r\n        return new WebsqlQueryRunner(this);\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.type === \"json\") {\r\n            return JSON.stringify(value);\r\n        }\r\n\r\n        return super.preparePersistentValue(value, columnMetadata);\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.type === \"json\") {\r\n            return JSON.parse(value);\r\n        }\r\n\r\n        return super.prepareHydratedValue(value, columnMetadata);\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, []];\r\n        const escapedParameters: any[] = [];\r\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            const value = parameters[key.substr(1)];\r\n            if (value instanceof Function) {\r\n                return value();\r\n\r\n            }\r\n            // Websql doesn't support queries boolean values. Therefore 1 and 0 has to be used.\r\n            else if ((typeof value) === \"boolean\") {\r\n                escapedParameters.push((value ? 1 : 0));\r\n                return \"?\";\r\n            } else {\r\n                escapedParameters.push(value);\r\n                return \"?\";\r\n            }\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return columnName; // \"`\" + columnName + \"`\";\r\n    }\r\n}"],"sourceRoot":"../.."}
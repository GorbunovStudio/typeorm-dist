{"version":3,"sources":["../browser/src/driver/mongodb/MongoDriver.ts"],"names":[],"mappings":"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","file":"MongoDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {MongoQueryRunner} from \"./MongoQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {MongoConnectionOptions} from \"./MongoConnectionOptions\";\r\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {MongoSchemaBuilder} from \"../../schema-builder/MongoSchemaBuilder\";\r\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\r\nimport {TableColumn} from \"../../schema-builder/schema/TableColumn\";\r\nimport {ConnectionOptions} from \"../../connection/ConnectionOptions\";\r\n\r\n/**\r\n * Organizes communication with MongoDB.\r\n */\r\nexport class MongoDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Mongodb does not require to dynamically create query runner each time,\r\n     * because it does not have a regular connection pool as RDBMS systems have.\r\n     */\r\n    queryRunner?: MongoQueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: MongoConnectionOptions;\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = false;\r\n\r\n    /**\r\n     * Mongodb does not need to have column types because they are not used in schema sync.\r\n     */\r\n    supportedDataTypes: ColumnType[] = [];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [];\r\n\r\n    /**\r\n     * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"int\",\r\n        createDateDefault: \"\",\r\n        updateDate: \"int\",\r\n        updateDateDefault: \"\",\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationName: \"int\",\r\n        migrationTimestamp: \"int\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"int\",\r\n        cacheTime: \"int\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"int\",\r\n        cacheResult: \"int\",\r\n    };\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Underlying mongodb library.\r\n     */\r\n    protected mongodb: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n        this.options = connection.options as MongoConnectionOptions;\r\n\r\n        // validate options to make sure everything is correct and driver will be able to establish connection\r\n        this.validateOptions(connection.options);\r\n\r\n        // load mongodb package\r\n        this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    connect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.mongodb.MongoClient.connect(this.buildConnectionUrl(), {\r\n                poolSize: this.options.poolSize,\r\n                ssl: this.options.ssl,\r\n                sslValidate: this.options.sslValidate,\r\n                sslCA: this.options.sslCA,\r\n                sslCert: this.options.sslCert,\r\n                sslKey: this.options.sslKey,\r\n                sslPass: this.options.sslPass,\r\n                autoReconnect: this.options.autoReconnect,\r\n                noDelay: this.options.noDelay,\r\n                keepAlive: this.options.keepAlive,\r\n                connectTimeoutMS: this.options.connectTimeoutMS,\r\n                socketTimeoutMS: this.options.socketTimeoutMS,\r\n                reconnectTries: this.options.reconnectTries,\r\n                reconnectInterval: this.options.reconnectInterval,\r\n                ha: this.options.ha,\r\n                haInterval: this.options.haInterval,\r\n                replicaSet: this.options.replicaSet,\r\n                acceptableLatencyMS: this.options.acceptableLatencyMS,\r\n                secondaryAcceptableLatencyMS: this.options.secondaryAcceptableLatencyMS,\r\n                connectWithNoPrimary: this.options.connectWithNoPrimary,\r\n                authSource: this.options.authSource,\r\n                w: this.options.w,\r\n                wtimeout: this.options.wtimeout,\r\n                j: this.options.j,\r\n                forceServerObjectId: this.options.forceServerObjectId,\r\n                serializeFunctions: this.options.serializeFunctions,\r\n                ignoreUndefined: this.options.ignoreUndefined,\r\n                raw: this.options.raw,\r\n                promoteLongs: this.options.promoteLongs,\r\n                promoteBuffers: this.options.promoteBuffers,\r\n                promoteValues: this.options.promoteValues,\r\n                domainsEnabled: this.options.domainsEnabled,\r\n                bufferMaxEntries: this.options.bufferMaxEntries,\r\n                readPreference: this.options.readPreference,\r\n                pkFactory: this.options.pkFactory,\r\n                promiseLibrary: this.options.promiseLibrary,\r\n                readConcern: this.options.readConcern,\r\n                maxStalenessSeconds: this.options.maxStalenessSeconds,\r\n                loggerLevel: this.options.loggerLevel,\r\n                logger: this.options.logger\r\n            }, (err: any, dbConnection: any) => {\r\n                if (err) return fail(err);\r\n\r\n                this.queryRunner = new MongoQueryRunner(this.connection, dbConnection);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            if (!this.queryRunner)\r\n                return fail(new ConnectionIsNotSetError(\"mongodb\"));\r\n\r\n            const handler = (err: any) => err ? fail(err) : ok();\r\n            this.queryRunner.databaseConnection.close(handler);\r\n            this.queryRunner = undefined;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new MongoSchemaBuilder(this.connection);\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\r\n        return this.queryRunner!;\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\r\n        throw new Error(`This operation is not supported by Mongodb driver.`);\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return columnName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.to(value);\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.from(value);\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number, scale?: number }): string {\r\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(column: ColumnMetadata): string {\r\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\r\n    }\r\n\r\n    /**\r\n     * Calculates column length taking into account the default length values.\r\n     */\r\n    getColumnLength(column: ColumnMetadata): string {\r\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\r\n    }\r\n    \r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        throw new Error(`MongoDB is schema-less, not supported by this driver.`);\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\r\n     */\r\n    protected validateOptions(options: ConnectionOptions) { // todo: fix\r\n        // if (!options.url) {\r\n        //     if (!options.database)\r\n        //         throw new DriverOptionNotSetError(\"database\");\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): any {\r\n        try {\r\n            this.mongodb = PlatformTools.load(\"mongodb\");  // try to load native driver dynamically\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\r\n     */\r\n    protected buildConnectionUrl(): string {\r\n        if (this.options.url)\r\n            return this.options.url;\r\n\r\n        const credentialsUrlPart = (this.options.username && this.options.password)\r\n            ? `${this.options.username}:${this.options.password}@`\r\n            : \"\";\r\n\r\n        return `mongodb://${credentialsUrlPart}${this.options.host || \"127.0.0.1\"}:${this.options.port || \"27017\"}/${this.options.database}`;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import {EntitySchema} from \"./EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\r\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\r\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\r\n\r\n/**\r\n * Transforms entity schema into metadata args storage.\r\n * The result will be just like entities read from decorators.\r\n */\r\nexport class EntitySchemaTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Transforms entity schema into new metadata args storage object.\r\n     */\r\n    transform(schemas: EntitySchema[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        schemas.forEach(schema => {\r\n\r\n            // add table metadata args from the schema\r\n            const table = schema.table || {} as any;\r\n            const tableMetadata: TableMetadataArgs = {\r\n                target: schema.target || schema.name,\r\n                name: table.name,\r\n                type: table.type || \"regular\",\r\n                orderBy: table.orderBy\r\n            };\r\n            metadataArgsStorage.tables.push(tableMetadata);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(schema.columns).forEach(columnName => {\r\n                const tableColumn = schema.columns[columnName];\r\n                let mode: ColumnMode = \"regular\";\r\n                if (tableColumn.createDate)\r\n                    mode = \"createDate\";\r\n                if (tableColumn.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (tableColumn.version)\r\n                    mode = \"version\";\r\n                if (tableColumn.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (tableColumn.treeLevel)\r\n                    mode = \"treeLevel\";\r\n\r\n                const columnAgrs: ColumnMetadataArgs = {\r\n                    target: schema.target || schema.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        type: tableColumn.type,\r\n                        name: tableColumn.name,\r\n                        length: tableColumn.length,\r\n                        primary: tableColumn.primary,\r\n                        unique: tableColumn.unique,\r\n                        nullable: tableColumn.nullable,\r\n                        comment: tableColumn.comment,\r\n                        default: tableColumn.default,\r\n                        precision: tableColumn.precision,\r\n                        scale: tableColumn.scale\r\n                    }\r\n                };\r\n                metadataArgsStorage.columns.push(columnAgrs);\r\n\r\n                if (tableColumn.generated) {\r\n                    const generationArgs: GeneratedMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: columnName,\r\n                        strategy: typeof tableColumn.generated === \"string\" ? tableColumn.generated : \"increment\"\r\n                    };\r\n                    metadataArgsStorage.generations.push(generationArgs);\r\n                }\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.relations) {\r\n                Object.keys(schema.relations).forEach(relationName => {\r\n                    const relationSchema = schema.relations![relationName];\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.isLazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.isTreeParent,\r\n                        isTreeChildren: relationSchema.isTreeChildren,\r\n                        options: {\r\n                            cascadeAll: relationSchema.cascadeAll,\r\n                            cascadeInsert: relationSchema.cascadeInsert,\r\n                            cascadeUpdate: relationSchema.cascadeUpdate,\r\n                            cascadeRemove: relationSchema.cascadeRemove,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.push(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: schema.target || schema.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // add relation metadata args from the schema\r\n            if (schema.indices) {\r\n                Object.keys(schema.indices).forEach(indexName => {\r\n                    const tableIndex = schema.indices![indexName];\r\n                    const indexAgrs: IndexMetadataArgs = {\r\n                        target: schema.target || schema.name,\r\n                        name: indexName,\r\n                        unique: tableIndex.unique,\r\n                        sparse: tableIndex.sparse,\r\n                        columns: tableIndex.columns\r\n                    };\r\n                    metadataArgsStorage.indices.push(indexAgrs);                        \r\n                });\r\n            }    \r\n\r\n        });\r\n\r\n        return metadataArgsStorage;\r\n    }\r\n}"],"sourceRoot":".."}
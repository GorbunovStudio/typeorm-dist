{"version":3,"sources":["../browser/src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import {FindManyOptions} from \"./FindManyOptions\";\r\nimport {FindOneOptions} from \"./FindOneOptions\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {FindRelationsNotFoundError} from \"../error/FindRelationsNotFoundError\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Utilities to work with FindOptions.\r\n */\r\nexport class FindOptionsUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOneOptions interface.\r\n     */\r\n    static isFindOneOptions(obj: any): obj is FindOneOptions<any> {\r\n        const possibleOptions: FindOneOptions<any> = obj;\r\n        return possibleOptions &&\r\n                (\r\n                    possibleOptions.select instanceof Array ||\r\n                    possibleOptions.where instanceof Object ||\r\n                    typeof possibleOptions.where === \"string\" ||\r\n                    possibleOptions.relations instanceof Array ||\r\n                    possibleOptions.join instanceof Object ||\r\n                    possibleOptions.order instanceof Object ||\r\n                    (possibleOptions.cache instanceof Object ||\r\n                    typeof possibleOptions.cache === \"boolean\" ||\r\n                    typeof possibleOptions.cache === \"number\")\r\n                );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindManyOptions interface.\r\n     */\r\n    static isFindManyOptions(obj: any): obj is FindManyOptions<any> {\r\n        const possibleOptions: FindManyOptions<any> = obj;\r\n        return possibleOptions && (\r\n            this.isFindOneOptions(possibleOptions) ||\r\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"number\" ||\r\n            typeof (possibleOptions as FindManyOptions<any>).take === \"number\" ||\r\n            typeof (possibleOptions as FindManyOptions<any>).skip === \"string\" ||\r\n            typeof (possibleOptions as FindManyOptions<any>).take === \"string\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindOneOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindOneOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindManyOptionsAlias(object: any): string|undefined {\r\n        if (this.isFindManyOptions(object) && object.join)\r\n            return object.join.alias;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Applies give find one options to the given query builder.\r\n     */\r\n    static applyFindOneOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\r\n        if (this.isFindOneOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return qb.where(options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find many options to the given query builder.\r\n     */\r\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\r\n        if (this.isFindManyOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return qb.where(options);\r\n\r\n        return qb;\r\n    }\r\n\r\n    /**\r\n     * Applies give find options to the given query builder.\r\n     */\r\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\r\n\r\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\r\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\r\n            return qb;\r\n\r\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\r\n            return qb;\r\n\r\n        const metadata = qb.expressionMap.mainAlias!.metadata;\r\n\r\n        // apply all options from FindOptions\r\n        if (options.select) {\r\n            qb.select([]);\r\n            options.select.forEach(select => {\r\n                if (!metadata.findColumnWithPropertyPath(select))\r\n                    throw new Error(`${select} column was not found in the ${metadata.name} entity.`);\r\n\r\n                qb.addSelect(qb.alias + \".\" + select);\r\n            });\r\n        }\r\n\r\n        if (options.where)\r\n            qb.where(options.where);\r\n\r\n        if ((options as FindManyOptions<T>).skip)\r\n            qb.skip((options as FindManyOptions<T>).skip!);\r\n\r\n        if ((options as FindManyOptions<T>).take)\r\n            qb.take((options as FindManyOptions<T>).take!);\r\n\r\n        if (options.order)\r\n            Object.keys(options.order).forEach(key => {\r\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\r\n\r\n                if (!metadata.findColumnWithPropertyPath(key))\r\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\r\n\r\n                switch (order) {\r\n                    case 1:\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\r\n                        break;\r\n                    case -1:\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\r\n                        break;\r\n                    case \"ASC\":\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\r\n                        break;\r\n                    case \"DESC\":\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\r\n                        break;\r\n                }\r\n            });\r\n\r\n        if (options.relations) {\r\n            const allRelations = options.relations.map(relation => relation);\r\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\r\n            // recursive removes found relations from allRelations array\r\n            // if there are relations left in this array it means those relations were not found in the entity structure\r\n            // so, we give an exception about not found relations\r\n            if (allRelations.length > 0)\r\n                throw new FindRelationsNotFoundError(allRelations);\r\n        }\r\n\r\n        if (options.join) {\r\n            if (options.join.leftJoin)\r\n                Object.keys(options.join.leftJoin).forEach(key => {\r\n                    qb.leftJoin(options.join!.leftJoin![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoin)\r\n                Object.keys(options.join.innerJoin).forEach(key => {\r\n                    qb.innerJoin(options.join!.innerJoin![key], key);\r\n                });\r\n\r\n            if (options.join.leftJoinAndSelect)\r\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\r\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoinAndSelect)\r\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\r\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\r\n                });\r\n        }\r\n\r\n        if (options.cache) {\r\n            if (options.cache instanceof Object) {\r\n                const cache = options.cache as { id: any, milliseconds: number };\r\n                qb.cache(cache.id, cache.milliseconds);\r\n            } else {\r\n                qb.cache(options.cache);\r\n            }\r\n        }\r\n\r\n        return qb;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\r\n     */\r\n    protected static applyRelationsRecursively(qb: SelectQueryBuilder<any>, allRelations: string[], alias: string, metadata: EntityMetadata, prefix: string): void {\r\n\r\n        // find all relations that match given prefix\r\n        let matchedBaseRelations: string[] = [];\r\n        if (prefix) {\r\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\r\n            matchedBaseRelations = allRelations\r\n                .filter(relation => relation.match(regexp))\r\n                .map(relation => relation.replace(regexp, \"\"))\r\n                .filter(relation => metadata.findRelationWithPropertyPath(relation));\r\n        } else {\r\n            matchedBaseRelations = allRelations.filter(relation => metadata.findRelationWithPropertyPath(relation));\r\n        }\r\n\r\n        // go through all matched relations and add join for them\r\n        matchedBaseRelations.forEach(relation => {\r\n\r\n            // add a join for the found relation\r\n            const selection = alias + \".\" + relation;\r\n            qb.leftJoinAndSelect(selection, alias + \"_\" + relation);\r\n\r\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\r\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\r\n\r\n            // try to find sub-relations\r\n            const join = qb.expressionMap.joinAttributes.find(join => join.entityOrProperty === selection);\r\n            this.applyRelationsRecursively(qb, allRelations, join!.alias.name, join!.metadata!, prefix ? prefix + \".\" + relation : relation);\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}
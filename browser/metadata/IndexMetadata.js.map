{"version":3,"sources":["../browser/src/metadata/IndexMetadata.ts"],"names":[],"mappings":"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","file":"IndexMetadata.js","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\n\r\n/**\r\n * Index metadata contains all information about table's index.\r\n */\r\nexport class IndexMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this index is applied.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata if this index was applied on embedded.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * Indicates if this index must be unique.\r\n     */\r\n    isUnique: boolean = false;\r\n\r\n    /**\r\n     * If true, the index only references documents with the specified field.\r\n     * These indexes use less space but behave differently in some situations (particularly sorts).\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    isSparse?: boolean;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target?: Function|string;\r\n\r\n    /**\r\n     * Indexed columns.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * User specified index name.\r\n     */\r\n    givenName?: string;\r\n\r\n    /**\r\n     * User specified column names.\r\n     */\r\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\r\n\r\n    /**\r\n     * Final index name.\r\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\r\n     * If index name was not given then its generated.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Gets the table name on which index is applied.\r\n     */\r\n    tableName: string;\r\n\r\n    /**\r\n     * Map of column names with order set.\r\n     * Used only by MongoDB driver.\r\n     */\r\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        embeddedMetadata?: EmbeddedMetadata,\r\n        columns?: ColumnMetadata[],\r\n        args?: IndexMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata;\r\n        if (options.columns)\r\n            this.columns = options.columns;\r\n\r\n        if (options.args) {\r\n            this.target = options.args.target;\r\n            this.isUnique = options.args.unique;\r\n            this.isSparse = options.args.sparse;\r\n            this.givenName = options.args.name;\r\n            this.givenColumnNames = options.args.columns;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Build Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend index properties.\r\n     * Must be called after all entity metadata's properties map, columns and relations are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n\r\n        const map: { [key: string]: number } = {};\r\n        this.tableName = this.entityMetadata.tableName;\r\n\r\n        // if columns already an array of string then simply return it\r\n        if (this.givenColumnNames) {\r\n            let columnPropertyPaths: string[] = [];\r\n            if (this.givenColumnNames instanceof Array) {\r\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\r\n                    if (this.embeddedMetadata)\r\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\r\n\r\n                    return columnName;\r\n                });\r\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\r\n            } else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\r\n                // if columns is a function that returns array of field names then execute it and get columns names from it\r\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\r\n                if (columnsFnResult instanceof Array) {\r\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\r\n                    columnPropertyPaths.forEach(name => map[name] = 1);\r\n                } else {\r\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\r\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\r\n                }\r\n            }\r\n\r\n            this.columns = columnPropertyPaths.map(propertyPath => {\r\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\r\n                if (columnWithSameName) {\r\n                    return [columnWithSameName];\r\n                }\r\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\r\n                if (relationWithSameName) {\r\n                    return relationWithSameName.joinColumns;\r\n                }\r\n                throw new Error(`Index ${this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\"}contains column that is missing in the entity: ` + propertyPath);\r\n            })\r\n            .reduce((a, b) => a.concat(b));\r\n        }\r\n\r\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\r\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\r\n            if (column)\r\n                updatedMap[column.databaseName] = map[key];\r\n            return updatedMap;\r\n        }, {} as { [key: string]: number });\r\n        this.name = namingStrategy.indexName(this.givenName ? this.givenName : undefined, this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\r\n        return this;\r\n    }\r\n\r\n}"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/metadata/EntityMetadataUtils.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH;IAAA;IAuCA,CAAC;IArCG;;OAEG;IACI,sCAAkB,GAAzB,UAA0B,QAAwB,EAAE,MAAqB,EAAE,MAAmB;QAA9F,iBAgBC;QAhB0E,uBAAA,EAAA,WAAmB;QAC1F,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAE3B,oHAAoH;YACpH,6DAA6D;YAC7D,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnD,IAAM,QAAQ,GAAG,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;gBACrE,KAAK,CAAC,IAAI,OAAV,KAAK,EAAS,QAAQ,EAAE;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,wCAAoB,GAA3B,UAA4B,MAAqB,EAAE,YAAoB;QACnE,IAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAM,SAAS,GAAG,UAAC,MAAqB;YACpC,IAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YACxC,IAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;gBAClB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAE5B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAEL,0BAAC;AAAD,CAvCA,AAuCC,IAAA","file":"EntityMetadataUtils.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\n\r\n/**\r\n * Utils used to work with EntityMetadata objects.\r\n */\r\nexport class EntityMetadataUtils {\r\n\r\n    /**\r\n     * Creates a property paths for a given entity.\r\n     */\r\n    static createPropertyPath(metadata: EntityMetadata, entity: ObjectLiteral, prefix: string = \"\") {\r\n        const paths: string[] = [];\r\n        Object.keys(entity).forEach(key => {\r\n\r\n            // check for function is needed in the cases when createPropertyPath used on values containing a function as a value\r\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\r\n            const parentPath = prefix ? prefix + \".\" + key : key;\r\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\r\n                const subPaths = this.createPropertyPath(metadata, entity[key], key);\r\n                paths.push(...subPaths);\r\n            } else {\r\n                const path = prefix ? prefix + \".\" + key : key;\r\n                paths.push(path);\r\n            }\r\n        });\r\n        return paths;\r\n    }\r\n\r\n    /**\r\n     * Creates a property paths for a given entity.\r\n     */\r\n    static getPropertyPathValue(entity: ObjectLiteral, propertyPath: string) {\r\n        const properties = propertyPath.split(\".\");\r\n        const recursive = (object: ObjectLiteral): any => {\r\n            const propertyName = properties.shift();\r\n            const value = propertyName ? object[propertyName] : object;\r\n            if (properties.length)\r\n                return recursive(value);\r\n\r\n            return value;\r\n        };\r\n        return recursive(entity);\r\n    }\r\n\r\n}"],"sourceRoot":".."}